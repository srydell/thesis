%!PS-Adobe-3.1 EPSF-3.0
%%Title: kth_pms_enginee_sciences.eps
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0
%AI9_PrintingDataBegin
%%For: oscard
%%CreationDate: 05-02-27
%%BoundingBox: 0 0 467 437
%%HiResBoundingBox: 0 0 466.4053 436.6485
%%CropBox: 0 0 466.4053 436.6485
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (PANTONE 2935 CVU)
%%CMYKCustomColor: 1 0.4700 0 0 (PANTONE 2935 CVU)
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 128 120 8
%%BeginData: 25354 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD0DFF7E2F07300D3007300D3007300D3007300D3007300D300730
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D3007300D3007300D3007300D3007300D30FD1AFF84070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D2FFD1AFF7E300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07300D0D0730FD1AFF84070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D077E842F070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D0DFD1AFF7E300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300D3007300D3007300D300785A884A830
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300D300736FD1AFF84070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070DA85A2FAF2F0D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D2FFD1AFF7E0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D367E847E0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D30FD1AFF84070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D2FA9A87E070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D2FFD1AFF7E2F07300D3007300D3007300D3007300D3007300D300730
%0D3007300D3007300D3007300D3007300D3007300D3007300DAFFFFFFF5A
%07300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D3007300D3007300D3007300D3007300D30FD1AFF84070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D0D2F2F5AA8A9A8AF7E540730070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D2FFD1AFF7E300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07300D0D073007302FA9A9FFFFFFAFFD04FF
%AFA85A2F0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07
%300D0D07300D0D07300D0D07300D0D0730FD1AFF84070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D072F7EA9FFFF7E5A2FFFA8842F84A8FFA8A92F0D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D0DFD1AFF7E300D3007300D3007300D3007300D3007300D3007300D3007
%300D3007300D3007300D3007300D5A847EA8FFFFA92F2F075AA9857E3007
%305AFFFFAF7E857E300D300D3007300D3007300D3007300D3007300D3007
%300D3007300D3007300D3007300D300736FD1AFF84070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D53A9A8
%FFFF84A8A8070D070D59FFA8A9070D070D2FFF5AFFFFFF84A8070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D2FFD1AFF7E0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D
%0D07300D0D07300D0D075A7EA9FFFFA8FFFFFF2F0D073007845A30A93007
%300D0D84FFA9AF84FFFF845A300D0D07300D0D07300D0D07300D0D07300D
%0D07300D0D07300D0D07300D0D07300D30FD1AFF84070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D7EFFFF7E07
%845A84A80D070D070D84A959FF0D0D070D077EA830A80D2FFFA8A9070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D2FFD1AFF7E2F07300D3007300D3007300D3007300D3007300D3007300D
%3007300D3007300D3084FFFF5A07305AFFFFA90D3007300DA97E5AA95A07
%300D2F5AFFFFA907302FFFFFFF5A3007300D3007300D3007300D3007300D
%3007300D3007300D3007300D3007300D30FD1AFF84070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D7E848484070D07
%845330A830070D072FA85A07A9530D070D07845A307E2F070D2FFF59A907
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D2FFD1AFF7E300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07
%300D0D07300D0D077EFFFF0D300D0D7E302FFF2F2F0D0D07A9FFFFFF3007
%0D0730A97E07A92F0D073084FFA8300D0D07300D0D07300D0D07300D0D07
%300D0D07300D0D07300D0D07300D0D0730FD1AFF84070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D075A7EA8A80D070D07
%307EFFFF7E070D0730A8AF7EFF590D072F2FFFFFA9530D070D077EA87E5A
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D0DFD1AFF7E300D3007300D3007300D3007300D3007300D3007300D3007
%300D3007300D2F7E5A2F8507300D300DFFA95AFFFF5A30FFFF302FAFFF5A
%30A9FF7E7EFF5A0D3007305A7E07AF2F3007300D3007300D3007300D3007
%300D3007300D3007300D3007300D300736FD1AFF84070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D0730A8FFA8302F2F07
%A9FF7E07AFFF8407FFFFA97EFFFF5A2FFFFF5A07FFFF3007302FA9FFFF5A
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D2FFD1AFF7E0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D
%0D07300D0D0730077EFD04FF7E30A8FFFFA9A8A92F302F5A7EFF5A5A2F30
%7EA9A8FFFFFF2F5AFFFFAFFFA90D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07300D30FD1AFF84070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D0D7E07A9FFFF0730
%5A5AA8842F7EFFA95AFFFF845AFFA83053FF597E2F0D7EFFFF2F2F5A070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%2FFD1AFF7E2F07300D3007300D3007300D3007300D3007300D3007300D30
%2F360D2F2F300D307E85A9A92F5AA85A84FFFFA97E7E5A7E5A845A7E5A85
%84FFFFFF5A847E307EA97EA95A2F0D5A0D2F0D5A0D2F0D300D3007300D30
%07300D3007300D3007300D3007300D30FD1AFF84070D070D070D070D070D
%070D070D070D070D070D070D070D7EAFA82F5AAFA87E072F7EFF5A5AFFFF
%7E5A2F5A535A5A847E7E5A847E7E595A2F305384A8FF7E5AA8A92F0D2FA9
%A8A9077EA8AF2F0D070D070D070D070D070D070D070D070D070D070D070D
%2FFD1AFF7E300D0D07300D0D07300D0D07300D0D07300D0D07300D0D2FAF
%0D857EAF0D30A830070D2FFFA85A2F5A7EAF537EFD04FF845AFD04FFA85A
%84A95A5A2FA9A9840D0D07A97E0D7EA9A8305AA9070D07300D0D07300D0D
%07300D0D07300D0D07300D0D0730FD1AFF84070D070D070D070D070D070D
%070D070D070D070D070D07307E0D5AFF595A07842F0D070D075A7EFD04FF
%5A537E2F5A2F5A5A302F5A5A5A2FA9FFFFFFA95A0D070D070DA82F0D5A84
%A9075A7E0D070D070D070D070D070D070D070D070D070D070D070D0DFD1A
%FF7E300D3007300D3007300D3007300D3007300D3007302F855AFF0D2F5A
%A95A85A8300D300730A8A9FFA95A5A2F5A5A7E5A857E847E85FD045A2F5A
%5AFFA9AF2F300D300785A87E7E850D2F7EA97E5A07300D3007300D300730
%0D3007300D3007300D300736FD1AFF84070D070D070D070D070D070D070D
%070D070D070D078484AF7E0D5A7E7EFF5A2F070D070D075A7E302F7E7E84
%5A7E5A5A2F5A2F302F5A5A7E7EA97E5A2F7E5A2F070D070D075A84A953A9
%075AFFA9A82F070D070D070D070D070D070D070D070D070D070D2FFD1AFF
%7E0D07300D0D07300D0D07300D0D07300D0D07300D0DA8360D308484075A
%A8840D0D07300D0D073084855A300D0D07300D0D07300D0D0730070D0D5A
%7EA92F2F0D0D07300D0D2FAF7E0D2FFF2F2F07A9300D07300D0D07300D0D
%07300D0D07300D0D07300D30FD1AFF84070D070D070D070D070D070D070D
%070D070D070D0784530D847E2F7E0D0DA85A070D070D070D072F070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D07AF2F0D535A
%2FFF2F0DA82F070D070D070D070D070D070D070D070D070D070D2FFD1AFF
%7E2F07300D3007300D3007300D3007300D305A300D7EAF7E848407FFFFAF
%A8A90D3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D3007300D3007300D2F5AFFA8AFFF302FFF5AAFA830075A543007300D30
%07300D3007300D3007300D30FD1AFF84070D070D070D070D070D070D070D
%070D7EA95A0DA9307EA92F2F53AF0D30070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D2F2F5AA9
%07305AFF0DA95A30A8A92F0D070D070D070D070D070D070D070D2FFD1AFF
%7E300D0D07300D0D07300D0D07300D0D0DA90DA92F84A9A95AFFA8AF5A30
%0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D0736A8A9A8A95AFFA836A8305A5A070D0730
%0D0D07300D0D07300D0D0730FD1AFF84070D070D070D070D070D070D070D
%070DA884A8A807FF84A97E0D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%0730A8A8FF5A2FFF5AAF2F0D070D070D070D070D070D070D070D0DFD1AFF
%7E300D3007300D3007300D3007300D3007A9FFFF5A300D5A2F300D300730
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300D3007365A300730A9FFFF5A0D300730
%0D3007300D3007300D300736FD1AFF84070D070D070D070D070D070D070D
%070D07305A2F0784A984530D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%07305AA9A830075A2F2F070D070D070D070D070D070D070D070D2FFD1AFF
%7E0D07300D0D07300D0D07300D0D07300D305A5A0D85A9A92FA95A300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D0730A95A5AFFA9302F842F0D07300D0D
%07300D0D07300D0D07300D30FD1AFF84070D070D070D070D070D070D070D
%070DA8847EA92FA9A87E8430070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%07A87EA8A95A53A95AAF2F0D070D070D070D070D070D070D070D2FFD1AFF
%7E2F07300D3007300D3007300D305A5A2FA90730845A54AF5A3007300D2F
%07300D2F07300D2F07300D300D300D2F07300D2F07300D2F07300D300730
%0D3007300D300D300D2F07300D2F07300D5A7EA92FFF2F305A852FA92F2F
%07300D3007300D3007300D30FD1AFF84070D070D070D070D070D070D5AA9
%A8847E5A0DA9530D070D070D07302F2F2F302F2F07362F542F5A2F0D0D5A
%2F5A535A2F54535A535A2F30072F2F302F2F2F5A0D0D07362F2F2F302F30
%070D070D070DA830538484A9A8A9070D070D070D070D070D070D2FFD1AFF
%7E300D0D07300D0D07300D0D07AF2F30FF857EA97E300D0D07300D2F2FA9
%FFFFFF842F0D2FFFFFFF7E5A077EFFFF84845AFFFF847EA9FFFF5A2F2F7E
%A9FFFFAF5A360D3053A9FFFFFFA9300D07300D0D075AA9A97EAF7E0DA85A
%070D07300D0D07300D0D0730FD1AFF84070D070D070D070D070D070D7E84
%070D5A7EA8A87E2F070D070D070D07A9FF84070D070DA8A90D0D070D7EAF
%070D070DA8FF070D072FA884070D075AFFFF0D0D070D070D07A8FF84070D
%070D070D075A7EFF7E84070D2FFF070D070D070D070D070D070D0DFD1AFF
%7E300D3007300D3007300D300730A95A07AF0D302FFF5A2F07300D300730
%5AFF5A300D2F7EA90D2F07300DA92F300D300DFFFF300730075A84300D30
%2FFFA93007300D3007305AFF5A300D3007300D30A95A2F2F7E7E0DFF5A30
%0D3007300D3007300D300736FD1AFF84070D070D070D070D070D072F7EFF
%7E5A7E2F2F5AA85A070D070D070D077EFF7E070D5AA8070D070D072F530D
%070D072FAFFF0D0D070D075A070D070DFFFF070D070D070D077EFF7E070D
%070D070D07A87E5A2F307E5AFFA8530D070D070D070D070D070D2FFD1AFF
%7E0D07300D0D07300D0D07307EA92F30845AA9FF7E5A07300D0D07300D0D
%5AFF5A2F5AA90D0D07300D0D07300D0D07300DFFFF300D0D07300D0D0730
%0DFFA8300D0D07300D0D5AFF5A0D07300D0D07300D7E84FF5AA92F5A5AAF
%07300D0D07300D0D07300D30FD1AFF84070D070D070D070D070D075AA807
%07AF075AA85A070D070D070D070D077EFF5A2FA9070D070D070D070D070D
%070D072FFFFF070D070D070D070D072FFFA9070D070D070D077EFF7E070D
%070D070D070D07A97E0D5A7E075AA80D070D070D070D070D070D2FFD1AFF
%7E2F07300D3007300D3007300D84847E842F2FFF5A2F07300D3007300D2F
%5AFF84FFFF5A073007300D3007300D3007300DFFFF300D3007300D300730
%0DFFFFA984A984A984A9A9FF5A2F07300D3007300D30FF5A0D5A7E7EA930
%07300D3007300D3007300D30FD1AFF84070D070D070D070D070D070D5AAF
%7E8484A95A0D070D070D070D070D077EFF847EFFA830070D070D070D070D
%070D072FFFFF070D070D070D070D072FFFFF2F302F302F362F84FF7E070D
%070D070D070D075A7EFF5AA884A9070D070D070D070D070D070D2FFD1AFF
%7E300D0D07300D0D07300D0D07FF5A845AFF5A0D07300D0D07300D0D0730
%5AFF5A30A9FFA830070D07300D0D07300D0D0DFFFF3007300D0D07300D0D
%0DFFA90D07300D0D072F5AFF5A300D0D07300D0D07300730FF848436A95A
%070D07300D0D07300D0D0730FD1AFF84070D070D070D070D072F2F0D2FAF
%FFA9A830070D070D070D070D070D077EFF7E072FA8FFA80D070D070D070D
%070D070DA8FF070D070D070D070D070DA9AF070D070D070D077EFF7E070D
%070D070D070D070D07A8A8FFA87E075A2F0D070D070D070D070D0DFD1AFF
%7E300D3007300D30073084A9A85A2FA95A5A5A7E2F300D3007300D300730
%5AFF5A300D30FFFFA83007300D3007300D300DFFFF3007300D3007300D30
%0DFFA93007300D3007305AFF5A300D3007300D3007305A7E2F5A7E5A2FA9
%A8A92F300D3007300D300736FD1AFF84070D070D070D070D07A92F7EFF30
%075AFF7E7E84070D070D070D070D077EFF7E070D0730FFFF7E0D070D070D
%070D070DFFFF070D070D070D070D072FFFFF070D070D070D077EFF7E070D
%070D070D070D2FAF53A9A80D07A9A82F845A070D070D070D070D2FFD1AFF
%7E0D07300D0D07300D0D2FFFA8FF5A30A9FF53A95A0D07300D0D0730072F
%A8FFA82F0730075AFFFFA83007300D0D07305AFFFF7E070D07300D0D0730
%5AFFFF5A070D0730072FA8FFA82F07300D0D07300D30A85A84FF2F30AFA9
%FFA9070D07300D0D07300D30FD1AFF84070D070D070D070D070D5AA95A30
%077EA9FF5A0D070D070D070D077E84FFA8FFA85A070D072F84FFA85A070D
%075A7EFFAFFFA884530D070D07307EFFAFFFA8842F0D077EA8FFA8FFA85A
%070D070D070D0730FFFF845A075A84A90D0D070D070D070D070D2FFD1AFF
%7E2F07300D3007300D3007300D307EA95A5A5A300D3007300D3007302F30
%0D300D302F300D3007302F5A2F300D302F300D300D302F300D300D300D36
%0D300D302F3007302F300D300D302F300D3007300D30075A5A5A7EA95A30
%07300D3007300D3007300D30FD1AFF84070D070D070D070D070D070DA85A
%2FA95307070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D072FA85A2FAF2F0D070D070D070D070D070D2FFD1AFF
%7E300D0D07300D0D07300D0D0DFF0D0D5A85070D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D2FA90D0D7E7E
%070D07300D0D07300D0D0730FD1AFF84070D070D070D070D070D070D7E7E
%538453842F0D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D072F7E5A7E7E5A840D0D070D070D070D070D070D0DFD1AFF
%7E300D3007300D3007300DA9A8FFA87E84FF84AF2F300D3007300D302F5A
%0D302F302F5A5A5A0D5A545A5A302F5A5A5A073054300D5A0D302F7E2F2F
%0D5A0D5A2F300D5A2F300D365A5A0D3007300D30073084A9A8FF7EA9A8A9
%A95A07300D3007300D300736FD1AFF84070D070D070D070D075A84307E5A
%7E300D0DA85A070D070D070D0754FF300DFF077EFF7E590D5AA9A984077E
%A8845A0D53FF5A2FA80D2FFFA8FF075AA85AFF300730FFA8070DA8A9A87E
%070D070D070D07AF2F0D0D7E5A7E2F7E7E0D070D070D070D070D2FFD1AFF
%7E0D07300D0D07300D0D2FFF2F0D07A90D30A87E0D0D07300D0D07300DFF
%537EA80D5AFF5A5A072F5AA9072F7EFF5A5A075AA8FF54A9077EFF7E5A30
%2FFFFF5A070D7EA9A93007AF5AA9A8300D0D07300D0D2FAF5A0D7E30070D
%7E85070D07300D0D07300D30FD1AFF84070D070D070D070D070D59FF7E2F
%595AA8FF2F0D070D070D070D070D5AA9845A077EA87E2F0D075AA80D077E
%A85A2F0D5A7E7EA9840D077E84AF0730FFFF2F0D07FF7EFF590D7EFF7E2F
%070D070D070D072F84FF2FA8075AA8A8070D070D070D070D070D2FFD1AFF
%7E2F07300D3007300D3007302FFF84847E5A5AFF302F07300D3007300D30
%FFFF0D2F7EFF5A5A0D305AFF07307EFF545A077E8430FFFF0785A85AFF36
%30FF5AFF2F5AFFA9A9AF07FF5A2F07300D3007300D30A8A95A5A845AFF7E
%07300D3007300D3007300D30FD1AFF84070D070D070D070D070D07A9842F
%2FA90730A830070D070D070D070D077E530D075A7EA97E0D075A5A0D075A
%84A85A0D2F5A077E7E0D0D847E5A07305A0D5A5A535A07307E2F595A070D
%070D070D070D07A87E0D5A84077EA82F070D070D070D070D070D2FFD1AFF
%7E300D0D07300D0D07300D0D8484072FA85AFF5A07300D0D07300D0D0730
%070D07300D0D07300D0D07300D0D0730070D07300D0D07300D0D0730070D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300DFF5A845A0D2FFF
%2F0D07300D0D07300D0D0730FD1AFF84070D070D070D070D070D072F7EA9
%5AA87EA95A0D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D0730A87E847E84A92F0D070D070D070D070D070D0DFD1AFF
%7E300D3007300D3007300D3007305AFF5A857EA90D855A3007300D300730
%5A852F300D307E840D302F360D5A2F300D302F360D7E0D305A852F300D5A
%2F30303607307E7E0D305A5A5A7E0D3007300D36845A54AF5A857EA90730
%0D3007300D3007300D300736FD1AFF84070D070D070D070D070D070D075A
%A97EFFA92FA85AA90D0D070D070D7EAF5AFF2F0DA8A8A8A907A9530DA95A
%070D07A97EA9840D7EFF5AFF2F0DFFFF07A95A0DA8A9A97E077EFFA9590D
%070D070D7E7E7E5A5AFF84A9840D070D070D070D070D070D070D2FFD1AFF
%7E0D07300D0D07300D0D07300D0D075A5A842FA9AF3084300D0D07300DFF
%2F2FA8850DFF0D0D2F30A8A97EFF300D07307EFFA8300DFF2F2F7EA907FF
%A9847E7E07FFA87E2F0D07A95A0D07300D0D07845A7EFF367E5A5330070D
%07300D0D07300D0D07300D30FD1AFF84070D070D070D070D070D070D0D7E
%535A070D84FFAFA8070D070D072FFF2F07A97E2FA80D073007A9845AA85A
%070D0784FFAF070DFF5A0784840DA85AA8A9530D535AA8A9070D845A070D
%070D070D2FFFA8FF2F0D2F7E595A070D070D070D070D070D070D2FFD1AFF
%7E2F07300D3007300D3007300DAF5AA9FF84077E7EA92F300D3007300DA9
%A884FF5A07FFA8AFA830A97E07FF5A2F0730A8847EFF0D84A984FF5A0DFF
%2F85FF7E0DFF5AAFA82F07FF5A2F07300D3007307E847E3030FFA85AA95A
%07300D3007300D3007300D30FD1AFF84070D070D070D070D070D070D7E5A
%5AA9A82F2F845A0D070D070D070D077E7E5A070D0D845A2F075A2F0D5930
%070D075A2F0D5A30075A7E5A070D5A2F0D7E2F0D2F845A30070D5336070D
%070D070D075A7E5A07A9A8842FA92F0D070D070D070D070D070D2FFD1AFF
%7E300D0D07300D0D07300D0D07305AFFA9365AFF5AA97E0D5A5A0D0D0730
%070D07300D0D07300D0D07300D0D07300D0D07300D0D0730070D07300D0D
%0730070D0730070D07300D0D07300D0D0D7E2F30A87E84A907A9FFA92F30
%0D0D07300D0D07300D0D0730FD1AFF84070D070D070D070D070D070D070D
%0D2F07A92F072FA95AFFA85A070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%07A8A8A95A7E070DA8300730070D070D070D070D070D070D070D0DFD1AFF
%7E300D3007300D3007300D3007300D30073084852F7EA8FF0D855A2F0730
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300D30A83084FF5A7E30FF2F300D300D30
%0D3007300D3007300D300736FD1AFF84070D070D070D070D070D070D070D
%070D070D7EA87E7E2F0D8430070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%07A82F2F53847EA92F0D070D070D070D070D070D070D070D070D2FFD1AFF
%7E0D07300D0D07300D0D07300D0D07300D0D2F84FF5A843030FFA8850D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D2FFFA9A907845AA9845A0D0D07300D0D
%07300D0D07300D0D07300D30FD1AFF84070D070D070D070D070D070D070D
%070D07A9595A075A84307E5A8430070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D07A8
%53842F5A7E0D2F5AA87E070D070D070D070D070D070D070D070D2FFD1AFF
%7E2F07300D3007300D3007300D3007300D30A85A0D5A0D85A82F07AF0D2F
%075A2F3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D3007300D3007300D302F300D2F7E5A075AA9302F3007AF5A2F07300D30
%07300D3007300D3007300D30FD1AFF84070D070D070D070D070D070D070D
%070D0730A8AF84FF2FA97E2FAF84075AA8A9070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D5AFF7E0D2FFF
%5A30AF2F7EAFA8AF5A0D070D070D070D070D070D070D070D070D2FFD1AFF
%7E300D0D07300D0D07300D0D07300D0D07300D0D077EA80D07A9A85AA87E
%84307E5A0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07A92F8453FF5A7EA930075AA8300D0D07300D0D0730
%0D0D07300D0D07300D0D0730FD1AFF84070D070D070D070D070D070D070D
%070D070D070D5AA9537E5AA97E8459FF5AAF5A0D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D072FA87EA87E7E7E
%847E5A5A5AA9070D070D070D070D070D070D070D070D070D070D0DFD1AFF
%7E300D3007300D3007300D3007300D3007300D3007305AA97EFF30FFA936
%A9FFFF5A073007300D300D300D3007300D3007300D3007300D3007300D30
%07300D300D300D2F0DAFFFFF5A7EFF5A84A97E852F300D3007300D300730
%0D3007300D3007300D300736FD1AFF84070D070D070D070D070D070D070D
%070D070D070D070D070D5AFF5A2F075A84302F30077EA8A90D0D070D070D
%070D070D070D070D070D070D070D070D070D5AFFA82F075A2F847E0D075A
%84A9070D070D070D070D070D070D070D070D070D070D070D070D2FFD1AFF
%7E0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D075A7E5A
%0730A8A9A85A845A7E840D3007300D0D07300D0D07300D0D07300D0D0730
%0D302FFF2FA92FA9A8AF2F300D7E5A300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D30FD1AFF84070D070D070D070D070D070D070D
%070D070D070D070D070D077EA8FFA95A5384072FA8FF0D5A7EA9A8300730
%2F0D0730070D070D2F2F07302F0D07A9A97E7E0D84FF5A0D2FA907A9A9FF
%7E30070D070D070D070D070D070D070D070D070D070D070D070D2FFD1AFF
%7E2F07300D3007300D3007300D3007300D3007300D300730077E843084FF
%2FA95A2F07845A2F2FFF845A84302F84A85A7EA90D307EA92FA9A85A075A
%845AFF85075A7E300730A9307EFF2F5AA93007300D3007300D3007300D30
%07300D3007300D3007300D30FD1AFF84070D070D070D070D070D070D070D
%070D070D070D070D070D2FA87EFF840D2FFF7E7E5A7E5A2F2F2F0DAF8484
%075AA82F2FA87E84077E7E0D2FA9A87E07540D5A5A7E5A7EA884075AFFA9
%7E7E070D070D070D070D070D070D070D070D070D070D070D070D2FFD1AFF
%7E300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D302F30
%0D0D2F7EA9A90D5A84845A307E7E845A075AA83084FF077EA80D07A97EA9
%2F5A7EA95A3054FF5A5A0D0D07302F3007300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D0730FD1AFF84070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D2FA92F0707302F847E845AA9
%5A2F075AA88453FF7E0D075AA87E7EA87E5A2F30072F7E84070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D0DFD1AFF
%7E300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D3007FF5A2F5AFFFF30077E7E7EFFA97E302FFF7E5AFFA9075A7EFF847E
%7E300785FFA90D30FF5A0D3007300D3007300D3007300D3007300D300730
%0D3007300D3007300D300736FD1AFF84070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D2FAFA8A92FFF0D5AA8FF7E84
%070D2FAF07A9FF2F7EA9070D2FA9A8FF7E0D847E7EFFA884070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D2FFD1AFF
%7E0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D0D5A0D0D7EFFA8302F850D0D53FF2F5A84A97E3084850D0D5A85
%0D84A9AF2F0D2F360D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D30FD1AFF84070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%59842F5A7E2F075A5A2F53842F0D070D072F070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D2FFD1AFF
%7E2F07300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300D3007300D2F07300D300D300D300730
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3007300D30FD1AFF84070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D2FFD1AFF
%7E300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D0730FD1AFF84070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D0DFD1AFF
%7E300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D3007300D3007300D300736FD1BFF7EA984A884A984A884A984A884A984
%A884A984A884A984A884A984A884A984A884A984A884A984A884A984A884
%A984A884A984A884A984A884A984A884A984A884A984A884A984A884A984
%A884A984A884A984A884A984A884A984A884A984A884A984A884FDFCFFFD
%FCFFFDFCFFFDFCFFFDC5FFA8FFFFFFA8FD37FFA8FD1BFF7D7DFF7D7DA8A8
%527D52527DFF52A8FFA852FD05FF7D7D525252FD0DFFA852A8FD17FF52A8
%FD11FFA827527DFD07FFA8527DFD1CFFF8527DF827FF5227F8F8F87DA8F8
%27FF52F87DFD04FF52F8272752FD0DFFA827A8FD16FFA8277DFD10FFA8F8
%F827F87DFD07FF277DFD14FFA8FD07FFF827F827FD04FF27F8FFFFA8F852
%A852F8A8FD04FF52F87DA8A8FF7D2727277DFFA827275252FF7D52A8FF27
%52F852A8FF7D27277DFFFF522727A8FF7D27277DFF27A8FF52272727A8FF
%7DF852277DFD04FF7DF8F87D7DFFFFA8272727FFA8527DFFA8272752FFFF
%2752F852FFFF7D27F852FFFF522727A8FF7D272752F8F8F852FD04FFF827
%FFFFA8FD05F87DFD04FF52F8F8F852FF52F852F827FF52F8A8F8F8FF7DF8
%A8FFF8F852F87DA8F82727F8FF7DF827F827FF27F827FF7DF87DFFF82752
%F852FFF8277DF827FD05FF5227F8F87DFFF8277D27A8A8F852FF27F852F8
%7DA8F82752F8A8A8F8277D27FF52F852F827FFF8F82752F85252F87DFFFF
%FF27F8FFFFFFF852FF7DF8A8FD04FF52F8A8FFFFFF52F8FF52F8FF27F8FF
%52F8FF7DF8A8FFF87DA8F87DFFF8525227A87DF87D2752FF52F8FFFFA8F8
%7DFF2727FFF87DFFF852FFF852FD04FF7D52A87DF852FFF827FF7DFFA8F8
%52FFF82752277DFFF87D7DF8A8FFF87DFF7DFF52F87D2752FF7D272727F8
%52A8F8F8A8FFFFF8F8FFFFA8F827FF52F87DFD04FF52F827F852FF52F8FF
%27F8FFA8F827F827FF7DF8A8FFF852A8F87DFF27F827F8FF7DF827F852FF
%27F8A8FF7DF87DFFF827A8F852FF52F827F827FD04FFA8FD04F87DFF27F8
%F8F8A8A8F852FF52F827F8A8A8F8527DF8A8FF27F8F8F8FF7DF827F852FF
%27F8F8F87DA8FFA87DA8FFFFA87DFFFFFF7DA8FFA87DFD05FFA8FD047DFF
%A87DA8A87DFF7D277D27F8FFA87DA8FF7DA8A87DA8FFA87D7DFFFFFFA87D
%7DFFFFA87DFFFFFF7DFFFFA87DFF7DA8FF7D277DF87DFD05FFA8527DA8FF
%FFFF7D7DA8FFFF7DA8FFFF7D52A8FFFF7DA8A87DA8FFA87D52FFFFFF7D7D
%7DFFFFFF7D7DA8FD1CFFA8FD06FFA8F82727A8FD24FF5227F852A8FD13FF
%A8FD0BFFA8FD0EFFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: kth_pms_enginee_sciences.eps 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2005-01-31T16:14:18Z</xap:CreateDate>
  <xap:ModifyDate>2005-02-27T21:45:48Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>240</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA8AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq+bf+cnP+Uv0&#xA;v/tnj/k9JnR9jf3Z/rfodF2r9Y9zxzNw6p2KuxV2KuxV2KuxV2KuxV2KuxVEWGn3uoXkNlYwPc3c&#xA;7cIYIwWZmPYAZGcxEWdgyjEyNDmq6to+qaPfPYapayWd5GAXglUqwDCoPyIwY8kZi4mwmeOUDUhR&#xA;QWTYOxV2KuxV2KuxV2KuxV2KuxV2KvRPyC/8mfpv/GO5/wCTD5r+1P7g/D73O7N/vh8X1jnKPSOx&#xA;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&#xA;WRa0HegqcVR+tfn15a0f8sLXz5fWF7Al7J9WttImj9K6N0C4MR5fCFHpM3Ppx9/hxVS/Ln89rPzZ&#xA;5suPKWo6NLoWuxW4u4ImuIbuKWKisQJYdg4D14/OpBFMVYxaf85W6fqHmebSdJ8palqVlBd/VZLq&#xA;1ImuuIJBlWxRWlK/CT1+dDtiqTaT/wA4oXy/lVqnlTVr6zk1x9Q/SOjajD6hjhb0kiZJOSK/GRUI&#xA;ag8D2xV7N+V2heb9A8mWWi+ar231HUdPHoQ3tsZG9S3QD0vUMioeaj4T4gA9ScVYl+Qv5P63+XP+&#xA;I/0pe215+mbiKeD6r6nwLH6lQ/NU3/eDpirvL35Qa5pn5765+Ys17bPpeqW7QQ2iep9YVmSFatVQ&#xA;lP3J6Nirvyw/KDXPKP5ledPNd7e21xZ+Zbiee0gh9T1Y1munnAk5Kq1CvTYnfFWc/mB5duvMvkjX&#xA;NAtJUhudUsprWGWWvBWlQqC3EE037DFXjvkf8pf+ciPJuj2uhaP5s0aHR7aRnEBt2kakjl5PjeAt&#xA;uSe+Ksw80/lPrWr/AJ5eWvzCgvLaPTNFsha3Fo/qeu7A3JqlFKU/0lerdjirHvKv5G6j5b8pfmRZ&#xA;a3KuqQeaFluLe20zkbmiLM6oolEamUs68RWleuKvnpNP80eYdM8p+S9IutS1Y6ZqEpg0S40r6o1k&#xA;jzcnlnuA8vIEsTu1EFanpir6m87/AJTa1r/5w+VPPFteW0Wn6BGqXNtJ6nrORJI/wcVK/wC7B1OK&#xA;oKT8mddb85PNPnkX1r+jte0p9Otrb956ySNawQcn+Hjx5QE7HpiqVeXv+cdNQh/I/VPy61fU4Prt&#xA;5etfW1/bK8kcbr6TR8lkEbGpiIanY4qhfy1/5x38yaF5v0rXNdu9EjtdGjVYLTSbBFknkSMoss1x&#xA;LGsiuSeblTufCuKpb5t/5xg8zXfm/wAw6roV/ozWHmS6N5M+rWn1m6tHkkaWX6tySWP4ncjem3uo&#xA;OKsh/Mr/AJx/1bzD+V3lvyVo+pWsc2hziaa7uIvq8cpMcgcpFboypV5ahew7nFWX/nf+XWp/mB5D&#xA;l8uaZcwWly9xBMstzzEYWIkkfArH8MVY1+Yv5Ja/5n0b8v7G0v7SCTyj6P11pfU4y+kkCn0uKN/v&#xA;g/apiqZeWPyl1jSvzw8zef7m7tptK1yyNpDZrzMysTbGsgZQnH/Rm6N3GKvl7XdO1LRdJ82eRNFn&#xA;1u1t73UIWtvKVzpXOW5aOZSp+tRvLVEWMEFR+8ohApWir7M/K7R7/Rvy48s6VqMfo39npttFdQnc&#xA;pIsS8kPup2OKsV/Nj8s/PvmDX9J8x+SvNL6HqemoIpLKd5TZTBXZ0do15oWHMhuUbchTwxVJvye/&#xA;IfXvKvnbVPPHmvV7fUdf1FJE9Gwj9K3UzuryyH4YtzxoFVAB79lWPaZ/zjv+aflp9U0fyb5wttI8&#xA;s6pepdtcokyajEkdQsalKKRxajfGOXEdKkYqyz80fyW13zZ5k8i6lY6nCIPKkiNePetI1xcBJYX5&#xA;AojAuwhNSabnFUp/Nj/nH3XfMvn2Xzh5futKee9tFtLyx1u3NxCjKojWeEBZRzVACAy9R3DEYqr3&#xA;X/OPurr+SF95BtdTs31bULyO/uL36stpbB1eIlVjt0J2SEDkRUnwGwVWW35CeY4vNX5caw2oWZg8&#xA;madb2N/GPV5zPCXJaH4KcTz/AGqYq35v/JL8wF/MfW/O3kLX7PTrnzFYtY3yXqyh4Q6Roz28kQc8&#xA;qwK6k04tiqP86/kTq3mr8pLDyjqfmOXUPMWnzi+TXLwM4knPqBo3FWcRcJSo3J2B9sVQ/wCVP5F6&#xA;75a85P5p1240ZJI4Xhs9N0SwjgiQuoQyes0azbrWq+J60FMVYV5k/wCcVvPeveZpru81/Szay3pu&#xA;v0vHam31PgT0ZYEjidu9WevIVrir/9k=</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -436.649 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 436.649 li
466.406 436.649 li
466.406 0 li
clp
[1 0 0 1 0 0 ] concat
418.455 368.504 mo
49.9498 368.504 li
49.9498 0 li
418.455 0 li
418.455 368.504 li
false sop
/0 
<<
/Name (PANTONE 2935 CVU)
/0 
[/DeviceCMYK] add_csa
/CSA /0 
/TintMethod /Subtractive
/TintProc null
/MappedCSA null
/NComponents 4 
/Components [ 1 0.47 0 0 ] 
>>
add_csd
1 /0 get_csd
sepcs
1 sep
f
199.331 152.536 mo
199.331 153.663 li
190.751 154.567 184.636 161.67 179.069 167.461 cv
172.655 174.022 li
188.095 191.208 li
195.372 198.645 198.423 202.659 204.548 202.926 cv
204.528 204.077 li
191.917 205.616 188.81 202.295 181.737 194.545 cv
166.388 177.844 li
178.091 165.356 li
185.991 156.477 184.884 154.19 179.843 153.663 cv
179.843 152.536 li
199.331 152.536 li
cp
165.341 191.407 mo
165.567 199.157 165.642 201.415 175.349 202.618 cv
175.349 203.747 li
149.392 203.747 li
149.392 202.618 li
158.419 201.415 158.495 199.157 158.72 191.407 cv
158.72 164.922 li
158.495 157.172 158.419 154.917 149.392 153.711 cv
149.392 152.584 li
173.317 152.584 li
173.317 153.711 li
165.642 154.917 165.567 157.172 165.341 164.922 cv
165.341 191.407 li
0 0 0 0 cmyk
f
252.929 152.504 mo
253.828 166.321 li
252.773 166.547 li
250.142 157.217 246.003 154.84 237.353 154.84 cv
232.837 154.84 li
232.837 189.602 li
232.837 198.93 233.288 201.415 243.369 202.618 cv
243.369 203.747 li
215.685 203.747 li
215.685 202.618 li
225.765 201.415 226.216 198.93 226.216 189.602 cv
226.216 154.84 li
221.702 154.84 li
213.05 154.84 208.911 157.217 206.278 166.547 cv
205.226 166.321 li
206.1 152.504 li
252.929 152.504 li
f
276.334 191.407 mo
276.334 199.684 276.484 201.188 286.341 202.618 cv
286.341 203.747 li
260.384 203.747 li
260.384 202.618 li
269.412 201.415 269.488 199.157 269.712 191.407 cv
269.712 164.922 li
269.488 157.172 269.412 154.917 260.384 153.711 cv
260.384 152.584 li
286.341 152.584 li
286.341 153.711 li
276.484 155.143 276.334 156.647 276.334 164.922 cv
276.334 175.833 li
304.533 175.833 li
304.533 164.922 li
304.533 156.647 304.382 155.143 294.525 153.711 cv
294.525 152.584 li
320.484 152.584 li
320.484 153.711 li
311.455 154.917 311.38 157.172 311.154 164.922 cv
311.154 191.407 li
311.38 199.157 311.455 201.415 320.484 202.618 cv
320.484 203.747 li
294.525 203.747 li
294.525 202.618 li
304.382 201.188 304.533 199.684 304.533 191.407 cv
304.533 178.993 li
276.334 178.993 li
276.334 191.407 li
f
208.243 320.895 mo
208.243 320.895 213.144 320.846 217.894 325.596 cv
222.645 330.346 231.504 340.889 234.545 343.997 cv
241.292 350.897 246.244 347.997 246.244 347.997 cv
246.244 347.997 241.644 347.698 237.696 343.747 cv
233.795 339.846 222.895 327.196 219.744 324.045 cv
213.844 318.145 208.243 320.895 208.243 320.895 cv
f
219.068 320.895 mo
219.068 320.895 223.969 320.846 228.72 325.596 cv
233.47 330.346 242.328 340.889 245.369 343.997 cv
252.121 350.897 257.07 347.997 257.07 347.997 cv
257.07 347.997 252.468 347.698 248.519 343.747 cv
244.619 339.846 233.72 327.196 230.569 324.045 cv
224.669 318.145 219.068 320.895 219.068 320.895 cv
f
259.646 320.895 mo
259.646 320.895 254.746 320.846 249.994 325.596 cv
245.244 330.346 236.386 340.889 233.345 343.997 cv
226.594 350.897 221.644 347.997 221.644 347.997 cv
221.644 347.997 226.244 347.698 230.194 343.747 cv
234.095 339.846 244.994 327.196 248.144 324.045 cv
254.044 318.145 259.646 320.895 259.646 320.895 cv
f
248.82 320.895 mo
248.82 320.895 243.918 320.846 239.168 325.596 cv
234.42 330.346 225.561 340.889 222.519 343.997 cv
215.769 350.897 210.818 347.997 210.818 347.997 cv
210.818 347.997 215.419 347.698 219.369 343.747 cv
223.27 339.846 234.17 327.196 237.321 324.045 cv
243.218 318.145 248.82 320.895 248.82 320.895 cv
f
2.5562 lw
1 lc
0 lj
4 ml
[] 0 dsh
true sadj
274.05 111.591 mo
261.421 106.912 248.089 104.537 234.423 104.537 cv
233.53 104.537 li
219.862 104.537 206.53 106.912 193.901 111.591 cv
@
151.7 221.566 mo
155.712 221.566 li
160.173 235.067 li
160.219 235.067 li
164.705 221.566 li
168.335 221.566 li
162.024 238.698 li
158.014 238.698 li
151.7 221.566 li
f
173.523 221.566 mo
185.007 221.566 li
185.007 224.417 li
177.202 224.417 li
177.202 228.424 li
184.51 228.424 li
184.51 231.272 li
177.202 231.272 li
177.202 235.85 li
185.27 235.85 li
185.27 238.698 li
173.523 238.698 li
173.523 221.566 li
f
190.433 221.566 mo
204.313 221.566 li
204.313 224.417 li
199.212 224.417 li
199.212 238.698 li
195.533 238.698 li
195.533 224.417 li
190.433 224.417 li
190.433 221.566 li
f
209.522 221.566 mo
221.004 221.566 li
221.004 224.417 li
213.198 224.417 li
213.198 228.424 li
220.507 228.424 li
220.507 231.272 li
213.198 231.272 li
213.198 235.85 li
221.265 235.85 li
221.265 238.698 li
209.522 238.698 li
209.522 221.566 li
f
238.444 238.698 mo
231.683 224.461 li
231.637 224.506 li
231.637 238.698 li
228.195 238.698 li
228.195 221.566 li
233.652 221.566 li
240.174 235.042 li
240.221 234.995 li
240.221 221.566 li
243.662 221.566 li
243.662 238.698 li
238.444 238.698 li
f
259.183 226.452 mo
259.041 224.721 258.113 223.868 256.337 223.868 cv
254.984 223.868 253.609 224.581 253.609 226.077 cv
253.609 227.924 255.269 228.139 256.74 228.495 cv
259.347 229.159 263.195 229.893 263.195 233.334 cv
263.195 237.581 259.492 239.049 255.812 239.049 cv
251.902 239.049 249.121 237.534 249.244 233.217 cv
252.988 233.217 li
252.851 235.116 253.941 236.393 255.863 236.393 cv
257.332 236.393 259.277 235.946 259.277 234.116 cv
259.277 232.1 256.835 231.959 255.367 231.581 cv
252.968 230.983 249.691 229.893 249.691 226.858 cv
249.691 222.944 253.298 221.211 256.812 221.211 cv
260.132 221.211 262.718 223.014 262.718 226.452 cv
259.183 226.452 li
f
272.437 228.971 mo
272.484 228.971 li
278.179 221.566 li
282.476 221.566 li
276.185 229.231 li
283.023 238.698 li
278.441 238.698 li
272.484 229.967 li
272.437 229.967 li
272.437 238.698 li
268.759 238.698 li
268.759 221.566 li
272.437 221.566 li
272.437 228.971 li
f
296.609 232.219 mo
294.257 224.913 li
294.212 224.913 li
291.697 232.219 li
296.609 232.219 li
cp
285.955 238.698 mo
292.144 221.566 li
296.513 221.566 li
302.468 238.698 li
298.767 238.698 li
297.535 235.067 li
290.748 235.067 li
289.464 238.698 li
285.955 238.698 li
f
310.681 229.252 mo
312.722 229.159 315.382 229.87 315.382 226.833 cv
315.382 223.795 312.722 224.506 310.681 224.417 cv
310.681 229.252 li
cp
307.001 238.698 mo
307.001 221.566 li
312.292 221.566 li
316.089 221.59 319.294 222.491 319.294 226.833 cv
319.294 229.944 317.181 231.981 313.361 232.1 cv
310.681 232.1 li
310.681 238.698 li
307.001 238.698 li
f
157.046 258.803 mo
157.046 261.745 157.734 265.065 161.364 265.065 cv
164.995 265.065 165.683 261.745 165.683 258.803 cv
165.683 255.858 164.995 252.538 161.364 252.538 cv
157.734 252.538 157.046 255.858 157.046 258.803 cv
cp
153.13 258.803 mo
153.13 253.75 155.692 249.879 161.364 249.879 cv
167.035 249.879 169.597 253.75 169.597 258.803 cv
169.597 263.854 167.035 267.723 161.364 267.723 cv
155.692 267.723 153.13 263.854 153.13 258.803 cv
f
184.93 255.788 mo
184.951 253.987 183.862 252.538 181.654 252.538 cv
179.044 252.538 178.382 256.407 178.382 258.803 cv
178.382 261.198 179.044 265.065 181.654 265.065 cv
183.862 265.065 184.951 263.616 184.93 261.815 cv
188.844 261.815 li
188.679 266.112 185.595 267.723 181.654 267.723 cv
176.695 267.723 174.466 263.807 174.466 258.803 cv
174.466 253.795 176.695 249.879 181.654 249.879 cv
185.595 249.879 188.679 251.491 188.844 255.788 cv
184.93 255.788 li
f
194.438 267.366 mo
194.438 250.237 li
198.114 250.237 li
198.114 256.999 li
204.592 256.999 li
204.592 250.237 li
208.316 250.237 li
208.316 267.366 li
204.64 267.366 li
204.64 259.844 li
198.114 259.844 li
198.114 267.366 li
194.438 267.366 li
f
227.431 257.639 mo
227.479 257.639 li
233.175 250.237 li
237.47 250.237 li
231.18 257.901 li
238.013 267.366 li
233.435 267.366 li
227.479 258.635 li
227.431 258.635 li
227.431 267.366 li
223.754 267.366 li
223.754 250.237 li
227.431 250.237 li
227.431 257.639 li
f
244.792 258.803 mo
244.792 261.745 245.476 265.065 249.113 265.065 cv
252.744 265.065 253.429 261.745 253.429 258.803 cv
253.429 255.858 252.744 252.538 249.113 252.538 cv
245.476 252.538 244.792 255.858 244.792 258.803 cv
cp
240.881 258.803 mo
240.881 253.75 243.441 249.879 249.113 249.879 cv
254.781 249.879 257.343 253.75 257.343 258.803 cv
257.343 263.854 254.781 267.723 249.113 267.723 cv
243.441 267.723 240.881 263.854 240.881 258.803 cv
f
272.886 267.366 mo
266.121 253.131 li
266.076 253.178 li
266.076 267.366 li
262.638 267.366 li
262.638 250.237 li
268.093 250.237 li
274.617 263.713 li
274.666 263.665 li
274.666 250.237 li
278.105 250.237 li
278.105 267.366 li
272.886 267.366 li
f
293.871 255.124 mo
293.728 253.393 292.8 252.538 291.025 252.538 cv
289.671 252.538 288.296 253.252 288.296 254.745 cv
288.296 256.594 289.957 256.809 291.427 257.165 cv
294.039 257.827 297.882 258.565 297.882 262.006 cv
297.882 266.25 294.179 267.723 290.503 267.723 cv
286.589 267.723 283.808 266.206 283.929 261.885 cv
287.679 261.885 li
287.539 263.784 288.628 265.065 290.55 265.065 cv
292.021 265.065 293.964 264.616 293.964 262.788 cv
293.964 260.772 291.523 260.627 290.054 260.25 cv
287.656 259.655 284.378 258.565 284.378 255.526 cv
284.378 251.614 287.986 249.879 291.5 249.879 cv
294.82 249.879 297.406 251.682 297.406 255.124 cv
293.871 255.124 li
f
302.251 250.237 mo
316.132 250.237 li
316.132 253.084 li
311.035 253.084 li
311.035 267.366 li
307.355 267.366 li
307.355 253.084 li
302.251 253.084 li
302.251 250.237 li
f
247.536 82.2794 mo
247.551 82.3135 247.573 82.3448 247.59 82.379 cv
247.61 82.3555 247.629 82.334 247.649 82.3106 cv
247.536 82.2794 li
f
294.657 87.8663 mo
293.928 89.7286 291.819 90.6553 289.958 89.9278 cv
289.051 89.5762 288.338 88.8956 287.948 88.0108 cv
287.741 87.5411 287.637 87.044 287.637 86.546 cv
287.637 86.1006 287.721 85.6534 287.887 85.2247 cv
288.618 83.3633 290.727 82.4376 292.592 83.1612 cv
294.452 83.8868 295.377 85.9981 294.657 87.8663 cv
cp
280.168 93.5118 mo
277.46 92.4571 275.555 90.2266 274.811 87.6309 cv
272.79 89.4278 269.981 90.2872 267.135 89.7305 cv
264.081 89.1309 262.081 86.1602 262.684 83.1075 cv
262.741 82.8223 263.008 81.7129 263.135 81.3028 cv
263.54 83.4336 265.184 85.2129 267.436 85.6544 cv
270.401 86.2364 273.29 84.293 273.868 81.334 cv
274.452 78.3711 272.508 75.4864 269.545 74.9063 cv
269.233 74.8414 268.888 74.9024 268.559 74.9014 cv
268.653 74.6456 268.76 74.3526 268.76 74.3526 cv
268.888 73.7032 268.888 73.0586 268.789 72.4405 cv
271.494 71.7154 273.495 69.2525 273.495 66.3223 cv
273.495 63.9688 272.202 61.9141 270.292 60.8213 cv
271.876 59.9044 272.958 58.209 272.958 56.25 cv
272.958 53.4976 270.838 51.2554 268.151 51.0035 cv
268.252 50.8589 268.336 50.7042 268.42 50.5489 cv
279.78 54.17 285.672 59.6651 288.364 65.1495 cv
288.506 65.6876 288.721 66.1963 289.024 66.6465 cv
290.139 69.5079 290.44 72.3184 290.245 74.8067 cv
290.407 75.1456 li
290.469 75.8379 290.653 76.4942 290.936 77.0977 cv
290.889 77.1192 290.849 77.1519 290.803 77.1744 cv
290.588 77.2808 290.379 77.3985 290.18 77.5323 cv
290.07 77.606 289.965 77.6866 289.861 77.7681 cv
289.731 77.8697 289.606 77.9776 289.485 78.0918 cv
289.333 78.233 289.192 78.3834 289.055 78.5425 cv
288.983 78.6285 288.915 78.7168 288.847 78.8077 cv
288.692 79.0147 288.553 79.2334 288.426 79.4654 cv
288.386 79.5401 288.348 79.6158 288.311 79.6929 cv
288.248 79.8243 288.168 79.9434 288.114 80.0821 cv
288.114 80.0821 288.046 80.3755 287.994 80.6412 cv
287.71 80.4649 287.458 80.2325 287.155 80.1163 cv
286.094 79.7032 284.886 79.4463 283.713 79.4888 cv
281.762 79.5528 279.904 80.4419 278.979 82.8165 cv
277.881 85.6309 279.278 88.8106 282.094 89.9063 cv
283.618 90.501 285.237 90.3458 286.583 89.6436 cv
286.807 89.9844 287.059 90.3018 287.348 90.5831 cv
286.12 93.292 282.969 94.6045 280.168 93.5118 cv
cp
259.233 76.7227 mo
259.599 74.8531 261.349 73.6275 263.212 73.8536 cv
263.713 73.9517 li
265.52 74.4444 266.683 76.2408 266.315 78.1114 cv
265.932 80.0665 264.034 81.3379 262.083 80.9571 cv
260.124 80.5743 258.848 78.6797 259.233 76.7227 cv
cp
260.292 82.6387 mo
259.694 85.6915 256.721 87.6895 253.668 87.0899 cv
250.856 86.5411 248.793 84.754 247.59 82.379 cv
245.956 84.4864 243.626 85.8497 240.753 85.8497 cv
237.643 85.8497 235.113 83.3145 235.113 80.2051 cv
235.113 79.9122 235.168 78.7735 235.203 78.3458 cv
236.018 80.3575 237.973 81.7891 240.271 81.7891 cv
243.292 81.7891 245.749 79.3321 245.749 76.3145 cv
245.749 73.293 243.292 70.836 240.271 70.836 cv
239.945 70.836 239.625 70.9595 239.301 71.0215 cv
239.347 70.753 239.39 70.4483 239.39 70.4483 cv
239.39 69.9673 239.322 69.503 239.205 69.0582 cv
241.162 67.8516 li
241.162 67.8516 240.958 49.0484 237.633 40.7564 cv
237.695 40.7217 237.754 40.6807 237.816 40.6441 cv
264.711 42.2461 262.389 60.9942 259.208 67.5938 cv
260.006 68.9805 li
259.971 69.0079 259.943 69.0435 259.908 69.0718 cv
259.754 69.1978 259.61 69.334 259.471 69.4766 cv
259.368 69.5811 259.27 69.688 259.175 69.8008 cv
259.121 69.8668 259.071 69.938 259.019 70.0069 cv
258.857 70.2193 258.71 70.4415 258.58 70.6783 cv
258.565 70.7051 258.552 70.7334 258.538 70.7603 cv
258.384 71.0523 258.257 71.3594 258.157 71.6836 cv
258.151 71.7007 258.147 71.7188 258.141 71.7359 cv
258.09 71.9073 258.026 72.0713 257.991 72.25 cv
257.991 72.25 257.975 72.5586 257.971 72.8321 cv
257.653 72.7071 257.358 72.5176 257.028 72.4512 cv
254.065 71.8711 251.18 73.8126 250.602 76.7754 cv
250.022 79.7364 251.956 82.6211 254.924 83.2012 cv
257.18 83.6446 259.372 82.6172 260.557 80.7969 cv
260.51 81.2247 260.348 82.3516 260.292 82.6387 cv
cp
230.344 74.627 mo
230.344 72.6446 231.943 71.0425 233.926 71.0264 cv
233.984 71.0264 li
235.961 71.0425 237.561 72.6446 237.561 74.627 cv
237.561 76.6211 235.945 78.2344 233.955 78.2344 cv
231.959 78.2344 230.344 76.6211 230.344 74.627 cv
cp
227.032 85.8497 mo
224.128 85.8497 221.724 84.4258 220.085 82.2794 cv
218.888 84.7051 216.804 86.5332 213.954 87.0899 cv
210.899 87.6895 207.927 85.6915 207.329 82.6387 cv
207.272 82.3516 207.11 81.2247 207.065 80.7969 cv
208.249 82.6172 210.442 83.6446 212.696 83.2012 cv
215.665 82.6211 217.599 79.7364 217.021 76.7754 cv
216.44 73.8126 213.556 71.8711 210.593 72.4512 cv
210.272 72.5157 209.983 72.6963 209.676 72.8208 cv
209.671 72.5503 209.656 72.2491 209.656 72.2491 cv
209.394 70.9034 208.654 69.773 207.651 68.9898 cv
208.457 67.5938 li
205.267 60.9795 202.94 42.1651 230.02 40.6329 cv
230.127 40.6963 230.234 40.7608 230.344 40.8194 cv
227.036 49.0967 226.689 67.6231 226.689 67.6231 cv
228.647 68.8858 li
228.499 69.3819 228.417 69.9053 228.417 70.4493 cv
228.417 70.4493 228.466 70.7579 228.507 71.0274 cv
228.179 70.9668 227.845 70.836 227.515 70.836 cv
224.495 70.836 222.034 73.293 222.034 76.3145 cv
222.034 79.3321 224.495 81.7891 227.515 81.7891 cv
229.813 81.7891 231.771 80.3575 232.581 78.3458 cv
232.622 78.7735 232.671 79.9122 232.671 80.2051 cv
232.671 83.3145 230.142 85.8497 227.032 85.8497 cv
cp
201.58 78.1114 mo
201.193 76.1544 202.475 74.2618 204.43 73.877 cv
206.387 73.4981 208.281 74.7676 208.66 76.7227 cv
209.047 78.6797 207.77 80.5743 205.814 80.9571 cv
203.861 81.3379 201.961 80.0665 201.58 78.1114 cv
cp
200.487 89.7305 mo
197.64 90.2872 194.831 89.4278 192.812 87.6309 cv
192.065 90.2266 190.161 92.4571 187.454 93.5118 cv
184.712 94.5811 181.635 93.3497 180.351 90.7569 cv
180.692 90.4551 180.997 90.1182 181.252 89.7481 cv
182.285 90.2315 183.461 90.3956 184.625 90.1636 cv
184.738 90.1446 184.856 90.1207 184.98 90.087 cv
184.988 90.085 184.996 90.0816 185.003 90.0796 cv
185.178 90.0313 185.353 89.9834 185.553 89.9053 cv
188.369 88.8096 189.766 85.6299 188.668 82.8155 cv
187.651 80.2037 185.504 79.3887 183.345 79.4927 cv
182.361 79.5372 181.374 79.7725 180.489 80.1172 cv
180.188 80.2334 179.934 80.4654 179.651 80.6416 cv
179.599 80.3755 179.529 80.0811 179.529 80.0811 cv
178.996 78.7095 177.965 77.6778 176.724 77.1045 cv
177.008 76.5 177.196 75.8409 177.258 75.1456 cv
177.42 74.8067 li
177.225 72.3184 177.526 69.5079 178.641 66.6456 cv
178.943 66.1963 179.157 65.6876 179.299 65.1504 cv
181.991 59.6651 187.884 54.171 199.244 50.5489 cv
199.328 50.7042 199.413 50.8589 199.513 51.0035 cv
196.825 51.2554 194.707 53.4976 194.707 56.25 cv
194.707 58.209 195.788 59.9044 197.373 60.8213 cv
195.462 61.9141 194.17 63.9688 194.17 66.3223 cv
194.17 69.2461 196.162 71.7071 198.857 72.4376 cv
198.758 73.0577 198.758 73.7032 198.886 74.3536 cv
198.886 74.3536 198.991 74.6465 199.087 74.9024 cv
198.749 74.9063 198.397 74.8399 198.077 74.9063 cv
195.112 75.4864 193.169 78.3711 193.753 81.334 cv
194.333 84.293 197.22 86.2364 200.185 85.6544 cv
202.437 85.2129 204.083 83.4336 204.487 81.3028 cv
204.612 81.7129 204.882 82.8223 204.937 83.1075 cv
205.54 86.1602 203.54 89.1309 200.487 89.7305 cv
cp
177.941 89.9268 mo
176.077 90.6553 173.967 89.7286 173.236 87.8614 cv
172.516 85.9981 173.444 83.8868 175.307 83.1602 cv
177.168 82.4376 179.277 83.3633 180.007 85.2247 cv
180.174 85.6563 180.254 86.1006 180.254 86.5372 cv
180.254 87.9942 179.375 89.3711 177.941 89.9268 cv
cp
171.389 70.7149 mo
173.537 70.7149 175.285 72.4639 175.285 74.6133 cv
175.285 75.3443 175.07 76.021 174.718 76.6065 cv
173.964 76.5655 173.19 76.6758 172.441 76.9678 cv
171.683 77.2647 170.597 77.6876 169.625 78.0665 cv
168.365 77.4205 167.492 76.1231 167.492 74.6133 cv
167.492 72.4639 169.24 70.7149 171.389 70.7149 cv
cp
171.604 63.8965 mo
171.604 62.2764 172.919 60.959 174.537 60.959 cv
176.16 60.959 177.48 62.2764 177.48 63.8965 cv
177.48 65.5176 176.16 66.836 174.537 66.836 cv
172.919 66.836 171.604 65.5176 171.604 63.8965 cv
cp
180.281 54.1778 mo
181.422 54.1778 182.35 55.1065 182.35 56.2481 cv
182.35 57.3887 181.422 58.3165 180.281 58.3165 cv
179.139 58.3165 178.209 57.3887 178.209 56.2481 cv
178.209 55.1065 179.139 54.1778 180.281 54.1778 cv
cp
187.297 49.5689 mo
188.235 49.5689 188.998 50.334 188.998 51.274 cv
188.998 52.2139 188.235 52.9786 187.297 52.9786 cv
186.354 52.9786 185.586 52.2139 185.586 51.274 cv
185.586 50.334 186.354 49.5689 187.297 49.5689 cv
cp
194.816 46.4712 mo
195.565 46.4712 196.174 47.0821 196.174 47.8326 cv
196.174 48.5821 195.565 49.1919 194.816 49.1919 cv
194.067 49.1919 193.457 48.5821 193.457 47.8326 cv
193.457 47.0821 194.067 46.4712 194.816 46.4712 cv
cp
200.004 52.9537 mo
201.822 52.9537 203.301 54.4327 203.301 56.25 cv
203.301 58.0694 201.822 59.5489 200.004 59.5489 cv
198.186 59.5489 196.707 58.0694 196.707 56.25 cv
196.707 54.4327 198.186 52.9537 200.004 52.9537 cv
cp
203.363 45.6587 mo
204.84 45.6587 206.041 46.8633 206.041 48.3443 cv
206.041 49.8228 204.84 51.0259 203.363 51.0259 cv
201.881 51.0259 200.676 49.8228 200.676 48.3443 cv
200.676 46.8633 201.881 45.6587 203.363 45.6587 cv
cp
203.229 67.9268 mo
201.622 68.2393 200.321 69.2344 199.555 70.5499 cv
197.621 70.1124 196.17 68.3873 196.17 66.3223 cv
196.17 63.9297 198.118 61.9825 200.512 61.9825 cv
202.908 61.9825 204.857 63.9297 204.857 66.3223 cv
204.857 66.857 204.747 67.3633 204.57 67.8365 cv
204.129 67.8135 203.681 67.8374 203.229 67.9268 cv
cp
209.189 41.2974 mo
210.263 41.2974 211.137 42.1729 211.137 43.2486 cv
211.137 44.3223 210.263 45.1958 209.189 45.1958 cv
208.109 45.1958 207.23 44.3223 207.23 43.2486 cv
207.23 42.1729 208.109 41.2974 209.189 41.2974 cv
cp
215.516 38.1978 mo
216.379 38.1978 217.082 38.9039 217.082 39.772 cv
217.082 40.6412 216.379 41.3482 215.516 41.3482 cv
214.645 41.3482 213.936 40.6412 213.936 39.772 cv
213.936 38.9039 214.645 38.1978 215.516 38.1978 cv
cp
222.705 36.5064 mo
223.393 36.5064 223.953 37.0699 223.953 37.7623 cv
223.953 38.4571 223.393 39.022 222.705 39.022 cv
222.009 39.022 221.443 38.4571 221.443 37.7623 cv
221.443 37.0699 222.009 36.5064 222.705 36.5064 cv
cp
231.611 33.8931 mo
231.051 34.4781 230.702 35.2662 230.702 36.1373 cv
230.702 36.3755 230.731 36.6065 230.78 36.8306 cv
230.261 36.8443 229.745 36.8589 229.242 36.8799 cv
228.788 36.1426 228.504 35.2935 228.442 34.3819 cv
228.687 34.2525 229.597 34.0059 231.611 33.8931 cv
cp
231.37 29.1368 mo
231.791 29.4112 232.333 29.6026 232.946 29.7066 cv
232.946 31.6436 li
231.1 31.6749 229.766 31.8028 228.808 31.9991 cv
229.293 30.7666 230.208 29.75 231.37 29.1368 cv
cp
229.259 20.5792 mo
229.146 20.4439 228.922 19.9942 228.922 19.1968 cv
228.922 18.4048 229.145 17.9585 229.257 17.8243 cv
229.581 17.8243 232.553 17.8243 232.553 17.8243 cv
232.553 17.8243 232.553 14.8545 232.553 14.5264 cv
232.689 14.4141 233.138 14.1934 233.934 14.1934 cv
234.725 14.1934 235.171 14.4141 235.309 14.5259 cv
235.309 14.8536 235.309 17.8243 235.309 17.8243 cv
235.309 17.8243 238.281 17.8243 238.607 17.8243 cv
238.72 17.959 238.943 18.4058 238.943 19.1968 cv
238.943 19.9937 238.718 20.4429 238.605 20.5792 cv
238.279 20.5792 235.309 20.5792 235.309 20.5792 cv
235.309 20.5792 235.309 26.8946 235.309 27.2593 cv
235.171 27.3726 234.724 27.5967 233.934 27.5967 cv
233.139 27.5967 232.689 27.3726 232.553 27.2588 cv
232.553 26.8936 232.553 20.5792 232.553 20.5792 cv
232.553 20.5792 229.584 20.5792 229.259 20.5792 cv
cp
239.089 32.1148 mo
237.84 31.8057 236.272 31.6783 234.746 31.6451 cv
234.746 29.7398 li
235.432 29.6465 236.029 29.4385 236.49 29.1387 cv
237.686 29.771 238.617 30.8316 239.089 32.1148 cv
cp
233.947 43.4107 mo
235.492 43.4107 236.738 44.6587 236.738 46.2017 cv
236.738 47.7369 235.492 48.9927 233.947 48.9927 cv
232.408 48.9927 231.158 47.7369 231.158 46.2017 cv
231.158 44.6587 232.408 43.4107 233.947 43.4107 cv
cp
232.702 36.1373 mo
232.702 35.4449 233.269 34.8814 233.965 34.8814 cv
234.654 34.8814 235.214 35.4449 235.214 36.1373 cv
235.214 36.8306 234.654 37.3951 233.965 37.3951 cv
233.269 37.3951 232.702 36.8306 232.702 36.1373 cv
cp
233.951 38.5884 mo
234.984 38.5884 235.824 39.4341 235.824 40.4693 cv
235.824 41.5084 234.984 42.3521 233.951 42.3521 cv
232.91 42.3521 232.064 41.5084 232.064 40.4693 cv
232.064 39.4341 232.91 38.5884 233.951 38.5884 cv
cp
233.947 57.3243 mo
231.971 57.3243 230.367 55.7247 230.367 53.7486 cv
230.367 51.772 231.971 50.1685 233.947 50.1685 cv
235.928 50.1685 237.533 51.772 237.533 53.7486 cv
237.533 55.7247 235.928 57.3243 233.947 57.3243 cv
cp
237.259 66.1187 mo
236.333 65.4014 235.176 64.9698 233.918 64.9698 cv
232.677 64.9698 231.535 65.3897 230.615 66.0879 cv
229.928 65.3047 229.498 64.2896 229.498 63.1641 cv
229.498 60.7032 231.488 58.7129 233.947 58.7129 cv
236.408 58.7129 238.404 60.7032 238.404 63.1641 cv
238.404 64.3038 237.963 65.3316 237.259 66.1187 cv
cp
239.277 71.0264 mo
239.281 71.0264 li
239.28 71.0264 239.278 71.0274 239.277 71.0274 cv
239.277 71.0269 239.277 71.0269 239.277 71.0264 cv
cp
239.406 34.5132 mo
239.326 35.379 239.042 36.1851 238.607 36.8887 cv
238.125 36.8677 237.631 36.8521 237.135 36.8379 cv
237.184 36.6114 237.215 36.378 237.215 36.1373 cv
237.215 35.2881 236.881 34.5206 236.348 33.9405 cv
237.939 34.0792 238.99 34.3252 239.406 34.5132 cv
cp
239.427 34.0562 mo
239.427 34.1612 239.419 34.2647 239.412 34.3687 cv
239.376 34.2842 239.347 34.1827 239.347 34.0562 cv
239.427 34.0562 li
cp
244.959 36.5064 mo
245.655 36.5064 246.221 37.0699 246.221 37.7623 cv
246.221 38.4571 245.655 39.022 244.959 39.022 cv
244.27 39.022 243.711 38.4571 243.711 37.7623 cv
243.711 37.0699 244.27 36.5064 244.959 36.5064 cv
cp
252.149 38.1978 mo
253.02 38.1978 253.729 38.9039 253.729 39.772 cv
253.729 40.6412 253.02 41.3482 252.149 41.3482 cv
251.286 41.3482 250.583 40.6412 250.583 39.772 cv
250.583 38.9039 251.286 38.1978 252.149 38.1978 cv
cp
258.475 41.2974 mo
259.555 41.2974 260.434 42.1729 260.434 43.2486 cv
260.434 44.3223 259.555 45.1958 258.475 45.1958 cv
257.401 45.1958 256.528 44.3223 256.528 43.2486 cv
256.528 42.1729 257.401 41.2974 258.475 41.2974 cv
cp
264.301 45.6587 mo
265.782 45.6587 266.989 46.8633 266.989 48.3443 cv
266.989 49.8228 265.782 51.0259 264.301 51.0259 cv
262.825 51.0259 261.624 49.8228 261.624 48.3443 cv
261.624 46.8633 262.825 45.6587 264.301 45.6587 cv
cp
264.442 67.9268 mo
263.988 67.837 263.538 67.813 263.095 67.8365 cv
262.918 67.3633 262.807 66.857 262.807 66.3223 cv
262.807 63.9297 264.756 61.9825 267.153 61.9825 cv
269.547 61.9825 271.495 63.9297 271.495 66.3223 cv
271.495 68.3858 270.045 70.1094 268.114 70.5489 cv
267.348 69.2339 266.047 68.2393 264.442 67.9268 cv
cp
268.538 74.897 mo
268.559 74.9014 li
268.551 74.9014 268.543 74.9024 268.536 74.9024 cv
268.537 74.9004 268.537 74.899 268.538 74.897 cv
cp
270.958 56.25 mo
270.958 58.0694 269.479 59.5489 267.661 59.5489 cv
265.842 59.5489 264.364 58.0694 264.364 56.25 cv
264.364 54.4327 265.842 52.9537 267.661 52.9537 cv
269.479 52.9537 270.958 54.4327 270.958 56.25 cv
cp
272.848 46.4712 mo
273.598 46.4712 274.208 47.0821 274.208 47.8326 cv
274.208 48.5821 273.598 49.1919 272.848 49.1919 cv
272.1 49.1919 271.491 48.5821 271.491 47.8326 cv
271.491 47.0821 272.1 46.4712 272.848 46.4712 cv
cp
280.368 49.5689 mo
281.311 49.5689 282.079 50.334 282.079 51.274 cv
282.079 52.2139 281.311 52.9786 280.368 52.9786 cv
279.428 52.9786 278.666 52.2139 278.666 51.274 cv
278.666 50.334 279.428 49.5689 280.368 49.5689 cv
cp
287.383 54.1778 mo
288.526 54.1778 289.456 55.1065 289.456 56.2481 cv
289.456 57.3887 288.526 58.3165 287.383 58.3165 cv
286.243 58.3165 285.315 57.3887 285.315 56.2481 cv
285.315 55.1065 286.243 54.1778 287.383 54.1778 cv
cp
293.127 60.959 mo
294.745 60.959 296.061 62.2764 296.061 63.8965 cv
296.061 65.5176 294.745 66.836 293.127 66.836 cv
291.504 66.836 290.184 65.5176 290.184 63.8965 cv
290.184 62.2764 291.504 60.959 293.127 60.959 cv
cp
296.276 70.7149 mo
298.424 70.7149 300.172 72.4639 300.172 74.6133 cv
300.172 76.1221 299.3 77.419 298.042 78.065 cv
297.071 77.6871 295.987 77.2647 295.229 76.9678 cv
294.478 76.6753 293.703 76.565 292.947 76.6065 cv
292.594 76.0215 292.379 75.3443 292.379 74.6133 cv
292.379 72.4639 294.127 70.7149 296.276 70.7149 cv
cp
300.295 78.9424 mo
300.295 78.9424 300.282 78.9371 300.271 78.9332 cv
301.437 77.856 302.172 76.3204 302.172 74.6133 cv
302.172 71.3614 299.526 68.7149 296.276 68.7149 cv
296.016 68.7149 295.76 68.7374 295.508 68.7706 cv
295.467 68.6055 295.415 68.4376 295.368 68.2715 cv
296.96 67.4512 298.061 65.8086 298.061 63.8965 cv
298.061 61.1739 295.848 58.959 293.127 58.959 cv
292.215 58.959 291.37 59.2247 290.635 59.6573 cv
290.495 59.4922 290.36 59.3282 290.211 59.1641 cv
290.975 58.4239 291.456 57.3926 291.456 56.2481 cv
291.456 54.004 289.627 52.1783 287.383 52.1783 cv
286.004 52.1783 284.788 52.8711 284.051 53.9239 cv
283.821 53.7691 283.584 53.6153 283.344 53.4624 cv
283.799 52.8477 284.079 52.0953 284.079 51.274 cv
284.079 49.231 282.413 47.5689 280.368 47.5689 cv
278.764 47.5689 277.409 48.6006 276.895 50.0308 cv
276.516 49.8628 276.122 49.6998 275.727 49.5357 cv
276.024 49.0342 276.208 48.4566 276.208 47.8326 cv
276.208 45.9791 274.7 44.4712 272.848 44.4712 cv
271.172 44.4712 269.793 45.7081 269.543 47.3145 cv
269.29 47.2364 269.049 47.1543 268.792 47.0777 cv
268.235 45.1119 266.444 43.6587 264.301 43.6587 cv
263.825 43.6587 263.368 43.7413 262.936 43.878 cv
262.768 43.7398 262.596 43.6026 262.42 43.4668 cv
262.424 43.3941 262.434 43.3228 262.434 43.2486 cv
262.434 41.0699 260.657 39.2974 258.475 39.2974 cv
257.618 39.2974 256.829 39.5796 256.182 40.0469 cv
256.028 39.9874 255.876 39.9268 255.719 39.8687 cv
255.719 39.836 255.729 39.8052 255.729 39.772 cv
255.729 37.8013 254.122 36.1978 252.149 36.1978 cv
250.811 36.1978 249.657 36.9488 249.045 38.0435 cv
248.772 37.9903 248.491 37.94 248.208 37.8897 cv
248.209 37.8467 248.221 37.8057 248.221 37.7623 cv
248.221 35.9668 246.758 34.5064 244.959 34.5064 cv
243.401 34.5064 242.098 35.6128 241.786 37.0821 cv
241.532 37.0621 241.27 37.045 241.011 37.0269 cv
241.409 36.0992 241.629 35.0787 241.629 34.0074 cv
241.629 31.0513 239.955 28.482 237.508 27.19 cv
237.508 26.3946 237.508 23.9742 237.508 22.7793 cv
238.15 22.7793 238.8 22.7793 238.8 22.7793 cv
240.158 22.7793 241.142 21.2725 241.142 19.1968 cv
241.142 17.1265 240.158 15.6241 238.8 15.6241 cv
238.8 15.6241 238.15 15.6241 237.508 15.6241 cv
237.508 14.982 237.508 14.3316 237.508 14.3316 cv
237.508 12.9766 236.004 11.9932 233.934 11.9932 cv
231.859 11.9932 230.353 12.9766 230.353 14.3316 cv
230.353 14.3316 230.353 14.982 230.353 15.6241 cv
229.714 15.6241 229.066 15.6241 229.066 15.6241 cv
227.708 15.6241 226.722 17.1265 226.722 19.1968 cv
226.722 21.2725 227.708 22.7793 229.066 22.7793 cv
229.066 22.7793 229.714 22.7793 230.353 22.7793 cv
230.353 23.9727 230.353 26.3897 230.353 27.1876 cv
227.901 28.4786 226.223 31.0494 226.223 34.0074 cv
226.223 35.0733 226.441 36.0894 226.835 37.0137 cv
226.515 37.0357 226.193 37.0572 225.879 37.0821 cv
225.566 35.6128 224.263 34.5064 222.705 34.5064 cv
220.907 34.5064 219.443 35.9668 219.443 37.7623 cv
219.443 37.8057 219.455 37.8467 219.456 37.8897 cv
219.174 37.94 218.893 37.9903 218.618 38.044 cv
218.007 36.9488 216.854 36.1978 215.516 36.1978 cv
213.542 36.1978 211.936 37.8013 211.936 39.772 cv
211.936 39.8052 211.944 39.836 211.945 39.8687 cv
211.788 39.9268 211.636 39.9874 211.482 40.0469 cv
210.835 39.5796 210.047 39.2974 209.189 39.2974 cv
207.006 39.2974 205.23 41.0699 205.23 43.2486 cv
205.23 43.3228 205.239 43.3946 205.244 43.4673 cv
205.068 43.6031 204.896 43.7398 204.728 43.878 cv
204.296 43.7413 203.84 43.6587 203.363 43.6587 cv
201.221 43.6587 199.429 45.1119 198.872 47.0777 cv
198.614 47.1543 198.375 47.2369 198.122 47.3145 cv
197.871 45.7081 196.49 44.4712 194.816 44.4712 cv
192.964 44.4712 191.457 45.9791 191.457 47.8326 cv
191.457 48.4566 191.639 49.0342 191.937 49.5357 cv
191.543 49.6998 191.147 49.8628 190.768 50.0308 cv
190.255 48.6006 188.9 47.5689 187.297 47.5689 cv
185.25 47.5689 183.586 49.231 183.586 51.274 cv
183.586 52.0953 183.864 52.8477 184.319 53.4629 cv
184.08 53.6158 183.843 53.7691 183.612 53.9239 cv
182.876 52.8711 181.66 52.1783 180.281 52.1783 cv
178.036 52.1783 176.209 54.004 176.209 56.2481 cv
176.209 57.3926 176.688 58.4239 177.453 59.1641 cv
177.305 59.3282 177.17 59.4932 177.029 59.6573 cv
176.294 59.2247 175.45 58.959 174.537 58.959 cv
171.817 58.959 169.604 61.1739 169.604 63.8965 cv
169.604 65.8086 170.706 67.4512 172.296 68.2715 cv
172.25 68.4376 172.196 68.6055 172.155 68.7706 cv
171.903 68.7374 171.649 68.7149 171.389 68.7149 cv
168.137 68.7149 165.492 71.3614 165.492 74.6133 cv
165.492 76.3184 166.224 77.8516 167.386 78.9288 cv
167.362 78.9385 167.349 78.9434 167.349 78.9434 cv
167.349 78.9434 169.182 80.8887 171.606 84.0147 cv
170.913 85.3907 170.775 87.0411 171.372 88.587 cv
172.336 91.0489 174.845 92.4493 177.35 92.1221 cv
179.647 95.0342 183.506 98.5215 186.653 97.6231 cv
186.653 97.6231 206.35 88.4434 233.812 88.4063 cv
261.27 88.4434 280.969 97.6231 280.969 97.6231 cv
284.127 98.5254 288.002 95.0079 290.295 92.0899 cv
292.879 92.5469 295.526 91.1329 296.52 88.5918 cv
297.149 86.9629 296.971 85.2168 296.182 83.7999 cv
298.019 81.4449 299.478 79.8111 300.026 79.21 cv
300.116 79.1216 300.204 79.0401 300.295 78.9424 cv
f
258.609 100.38 mo
259.787 100.623 260.945 99.8643 261.177 98.6885 cv
261.427 97.5069 260.673 96.3506 259.486 96.1084 cv
255.187 95.2217 li
254.007 94.9776 252.851 95.7413 252.609 96.921 cv
252.373 98.1026 253.13 99.253 254.312 99.4991 cv
258.609 100.38 li
cp
274.072 102.606 mo
275.119 103.848 276.271 105.216 276.848 105.901 cv
277.577 105.497 278.553 104.955 279.308 104.537 cv
279.006 103.729 278.616 102.684 278.325 101.904 cv
277.44 102.05 275.675 102.341 274.072 102.606 cv
cp
229.512 95.7349 mo
231.129 96.6544 233.395 97.9429 234.026 98.3018 cv
234.657 97.9424 236.921 96.6544 238.536 95.7349 cv
236.921 94.815 234.658 93.5254 234.026 93.1656 cv
233.395 93.525 231.128 94.8145 229.512 95.7349 cv
cp
213.642 99.4991 mo
214.825 99.253 215.581 98.1026 215.345 96.921 cv
215.103 95.7413 213.946 94.9776 212.765 95.2217 cv
208.468 96.1084 li
207.28 96.3506 206.528 97.5069 206.774 98.6885 cv
207.011 99.8643 208.167 100.623 209.347 100.38 cv
213.642 99.4991 li
cp
188.646 104.537 mo
189.4 104.955 190.377 105.498 191.105 105.901 cv
191.683 105.216 192.835 103.848 193.882 102.606 cv
192.279 102.341 190.515 102.05 189.631 101.904 cv
189.339 102.684 188.948 103.729 188.646 104.537 cv
cp
274.492 106.146 mo
262.423 101.688 249.755 99.2994 236.775 99.0386 cv
234.026 100.603 li
231.282 99.042 li
218.199 99.3365 205.435 101.795 193.287 106.354 cv
191.564 108.398 li
186.219 105.431 li
188.077 100.463 li
188.359 99.7076 li
190.756 100.104 li
203.85 95.0772 217.63 92.4087 231.754 92.1573 cv
233.532 91.1456 li
234.026 90.8638 li
236.291 92.1539 li
250.475 92.3721 264.314 95.0269 277.469 100.059 cv
278.801 99.8389 li
279.596 99.7076 li
281.734 105.431 li
276.389 108.398 li
274.492 106.146 li
f
2.8346 lw
0 lc
119.463 128.607 mo
119.571 127.592 119.462 126.456 119.105 125.31 cv
118.191 122.404 115.484 120.216 113.973 120.685 cv
113.781 120.75 113.506 120.234 113.301 120.302 cv
113.105 120.363 113.176 120.941 112.98 121.001 cv
111.465 121.47 110.49 124.816 111.402 127.726 cv
111.758 128.867 112.314 129.86 112.98 130.632 cv
@
1 lj
117.625 134.064 mo
120.566 133.148 122.398 130.621 121.572 127.978 cv
121.27 126.998 120.449 126.945 120.449 126.945 cv
120.707 127.718 118.971 129.449 116.428 130.251 cv
113.891 131.041 111.477 130.609 111.25 129.82 cv
111.25 129.82 110.605 130.337 110.914 131.324 cv
111.734 133.966 114.684 134.988 117.625 134.064 cv
cp
@
1 lc
0 lj
118.464 133.878 mo
118.636 134.392 118.707 134.5 119.051 134.966 cv
119.4 135.441 119.801 135.824 120.238 136.128 cv
@
0 lc
132.85 138.199 mo
133.777 137.772 134.888 137.51 136.087 137.482 cv
139.134 137.418 142.073 139.281 142.113 140.864 cv
142.113 141.066 142.69 141.162 142.69 141.377 cv
142.696 141.582 142.126 141.701 142.131 141.905 cv
142.172 143.491 139.314 145.485 136.266 145.553 cv
135.071 145.582 133.952 145.373 133.007 144.989 cv
@
1 lj
128.269 141.688 mo
128.194 138.608 130.002 136.063 132.771 136 cv
133.796 135.972 134.108 136.732 134.108 136.732 cv
133.293 136.736 132.21 138.935 132.264 141.601 cv
132.329 144.257 133.511 146.406 134.331 146.368 cv
134.331 146.368 134.047 147.144 133.014 147.168 cv
130.248 147.237 128.335 144.77 128.269 141.688 cv
cp
@
1 lc
0 lj
128.176 140.833 mo
127.634 140.834 127.51 140.802 126.957 140.626 cv
126.396 140.447 125.905 140.19 125.477 139.874 cv
@
0 lc
111.243 195.954 mo
111.836 195.125 112.671 194.345 113.698 193.724 cv
116.311 192.157 119.787 192.315 120.608 193.671 cv
120.708 193.845 121.256 193.642 121.365 193.83 cv
121.47 194.003 121.034 194.39 121.14 194.565 cv
121.963 195.922 120.472 199.072 117.86 200.644 cv
116.836 201.261 115.761 201.634 114.75 201.771 cv
@
1 lj
108.999 201.257 mo
107.406 198.621 107.711 195.514 110.083 194.084 cv
110.959 193.551 111.608 194.056 111.608 194.056 cv
110.903 194.464 111.053 196.911 112.423 199.199 cv
113.798 201.472 115.89 202.75 116.584 202.311 cv
116.584 202.311 116.722 203.126 115.837 203.658 cv
113.471 205.092 110.586 203.9 108.999 201.257 cv
cp
@
1 lc
0 lj
108.494 200.561 mo
108.024 200.832 107.9 200.865 107.333 200.986 cv
106.756 201.109 106.203 201.13 105.674 201.068 cv
@
0 lc
95.4576 194.721 mo
95.0533 193.784 94.4 192.847 93.5269 192.025 cv
91.3033 189.942 87.8707 189.367 86.7837 190.518 cv
86.649 190.668 86.1558 190.355 86.0103 190.515 cv
85.8697 190.664 86.2154 191.132 86.0748 191.281 cv
84.9849 192.434 85.7798 195.827 88.0044 197.914 cv
88.8746 198.733 89.8472 199.324 90.8062 199.669 cv
@
1 lj
96.5376 200.376 mo
98.65 198.134 99.0035 195.033 96.9859 193.137 cv
96.2408 192.432 95.5005 192.789 95.5005 192.789 cv
96.105 193.335 95.4429 195.696 93.6216 197.644 cv
91.7994 199.579 89.4849 200.388 88.9 199.812 cv
88.9 199.812 88.5933 200.58 89.3462 201.288 cv
91.3589 203.186 94.4292 202.626 96.5376 200.376 cv
cp
@
1 lc
0 lj
97.1783 199.803 mo
97.5796 200.166 97.6949 200.225 98.2232 200.462 cv
98.7603 200.705 99.2974 200.841 99.8277 200.891 cv
@
0 lc
120.885 257.391 mo
121.002 256.376 121.357 255.291 121.955 254.25 cv
123.483 251.615 126.601 250.072 127.976 250.861 cv
128.147 250.964 128.529 250.521 128.714 250.632 cv
128.891 250.734 128.697 251.284 128.874 251.385 cv
130.25 252.173 130.47 255.653 128.945 258.292 cv
128.348 259.328 127.588 260.174 126.77 260.783 cv
@
1 lj
121.487 263.118 mo
118.818 261.581 117.582 258.713 118.965 256.316 cv
119.474 255.425 120.286 255.552 120.286 255.552 cv
119.867 256.251 121.182 258.319 123.488 259.659 cv
125.792 260.983 128.241 261.089 128.635 260.369 cv
128.635 260.369 129.15 261.015 128.633 261.909 cv
127.257 264.309 124.156 264.662 121.487 263.118 cv
cp
@
1 lc
0 lj
120.709 262.752 mo
120.428 263.216 120.335 263.305 119.898 263.686 cv
119.454 264.073 118.979 264.359 118.487 264.56 cv
@
0 lc
106.402 263.736 mo
105.593 263.115 104.565 262.615 103.402 262.322 cv
100.446 261.585 97.1685 262.756 96.7789 264.291 cv
96.7349 264.488 96.1519 264.454 96.1021 264.664 cv
96.0513 264.863 96.5826 265.104 96.5318 265.302 cv
96.1412 266.839 98.4888 269.416 101.448 270.155 cv
102.607 270.447 103.744 270.489 104.75 270.324 cv
@
1 lj
110.101 268.149 mo
110.853 265.162 109.651 262.281 106.966 261.609 cv
105.972 261.356 105.498 262.027 105.498 262.027 cv
106.293 262.21 106.864 264.594 106.223 267.183 cv
105.573 269.76 103.946 271.595 103.155 271.376 cv
103.155 271.376 103.261 272.196 104.264 272.448 cv
106.946 273.126 109.354 271.141 110.101 268.149 cv
cp
@
1 lc
0 lj
110.381 267.336 mo
110.907 267.458 111.037 267.453 111.614 267.404 cv
112.201 267.353 112.737 267.21 113.225 266.996 cv
@
0 lc
159.33 305.008 mo
158.936 304.065 158.715 302.944 158.729 301.746 cv
158.776 298.699 160.744 295.83 162.329 295.846 cv
162.529 295.853 162.646 295.281 162.862 295.287 cv
163.066 295.289 163.165 295.864 163.369 295.867 cv
164.955 295.881 166.845 298.811 166.803 301.859 cv
166.788 303.054 166.539 304.164 166.122 305.094 cv
@
1 lj
162.651 309.712 mo
159.571 309.673 157.092 307.775 157.129 305.007 cv
157.138 303.981 157.909 303.696 157.909 303.696 cv
157.884 304.511 160.042 305.672 162.708 305.716 cv
165.365 305.747 167.554 304.644 167.546 303.822 cv
167.546 303.822 168.311 304.135 168.296 305.168 cv
168.268 307.934 165.734 309.755 162.651 309.712 cv
cp
@
1 lc
0 lj
161.793 309.773 mo
161.775 310.315 161.737 310.437 161.542 310.983 cv
161.342 311.539 161.068 312.019 160.737 312.435 cv
@
0 lc
150.101 318.377 mo
149.09 318.232 147.95 318.298 146.792 318.612 cv
143.854 319.416 141.568 322.041 141.979 323.569 cv
142.037 323.762 141.511 324.017 141.571 324.225 cv
141.624 324.423 142.206 324.375 142.258 324.572 cv
142.669 326.103 145.977 327.203 148.919 326.4 cv
150.073 326.087 151.085 325.568 151.881 324.932 cv
@
1 lj
155.485 320.418 mo
154.679 317.445 152.222 315.519 149.551 316.248 cv
148.561 316.513 148.476 317.33 148.476 317.33 cv
149.259 317.101 150.923 318.901 151.63 321.472 cv
152.325 324.039 151.802 326.434 151.005 326.63 cv
151.005 326.63 151.499 327.293 152.497 327.023 cv
155.168 326.301 156.297 323.392 155.485 320.418 cv
cp
@
1 lc
0 lj
155.332 319.572 mo
155.85 319.42 155.961 319.353 156.44 319.028 cv
156.927 318.697 157.326 318.31 157.646 317.884 cv
@
0 lc
346.963 257.345 mo
346.846 256.331 346.491 255.245 345.893 254.205 cv
344.366 251.569 341.247 250.026 339.872 250.815 cv
339.702 250.918 339.319 250.475 339.133 250.586 cv
338.958 250.688 339.151 251.238 338.975 251.339 cv
337.598 252.127 337.377 255.607 338.903 258.247 cv
339.5 259.282 340.26 260.128 341.079 260.737 cv
@
1 lj
346.362 263.072 mo
349.03 261.535 350.266 258.668 348.883 256.27 cv
348.374 255.379 347.563 255.506 347.563 255.506 cv
347.981 256.206 346.666 258.273 344.36 259.613 cv
342.057 260.937 339.608 261.043 339.213 260.323 cv
339.213 260.323 338.698 260.969 339.215 261.863 cv
340.59 264.263 343.692 264.616 346.362 263.072 cv
cp
@
1 lc
0 lj
347.139 262.707 mo
347.42 263.17 347.512 263.259 347.95 263.64 cv
348.395 264.027 348.87 264.313 349.362 264.514 cv
@
0 lc
308.491 305.008 mo
308.885 304.065 309.106 302.944 309.092 301.746 cv
309.045 298.699 307.077 295.83 305.493 295.846 cv
305.292 295.853 305.174 295.281 304.96 295.287 cv
304.754 295.289 304.657 295.864 304.452 295.867 cv
302.866 295.881 300.975 298.811 301.018 301.859 cv
301.034 303.054 301.282 304.164 301.7 305.094 cv
@
1 lj
305.17 309.712 mo
308.25 309.673 310.729 307.775 310.692 305.007 cv
310.682 303.981 309.913 303.696 309.913 303.696 cv
309.936 304.511 307.78 305.672 305.112 305.716 cv
302.456 305.747 300.266 304.644 300.274 303.822 cv
300.274 303.822 299.51 304.135 299.524 305.168 cv
299.553 307.934 302.086 309.755 305.17 309.712 cv
cp
@
1 lc
0 lj
306.028 309.773 mo
306.045 310.315 306.084 310.437 306.28 310.983 cv
306.479 311.539 306.752 312.019 307.084 312.435 cv
@
0 lc
317.812 318.435 mo
318.822 318.289 319.962 318.355 321.121 318.669 cv
324.058 319.472 326.345 322.097 325.933 323.626 cv
325.876 323.82 326.402 324.074 326.341 324.283 cv
326.289 324.48 325.707 324.431 325.654 324.628 cv
325.244 326.16 321.935 327.259 318.994 326.457 cv
317.839 326.144 316.828 325.625 316.031 324.99 cv
@
1 lj
312.427 320.474 mo
313.234 317.501 315.691 315.576 318.361 316.304 cv
319.351 316.57 319.437 317.386 319.437 317.386 cv
318.654 317.158 316.99 318.958 316.283 321.529 cv
315.587 324.095 316.111 326.492 316.908 326.687 cv
316.908 326.687 316.414 327.351 315.416 327.08 cv
312.746 326.359 311.615 323.449 312.427 320.474 cv
cp
@
1 lc
0 lj
312.582 319.628 mo
312.062 319.478 311.951 319.41 311.472 319.085 cv
310.986 318.753 310.587 318.367 310.267 317.941 cv
@
0 lc
361.51 263.685 mo
362.32 263.064 363.347 262.564 364.51 262.271 cv
367.466 261.535 370.744 262.707 371.133 264.24 cv
371.177 264.437 371.76 264.404 371.81 264.613 cv
371.861 264.812 371.33 265.054 371.38 265.251 cv
371.771 266.789 369.423 269.365 366.464 270.105 cv
365.305 270.396 364.168 270.439 363.163 270.273 cv
@
1 lj
357.812 268.099 mo
357.06 265.111 358.261 262.23 360.947 261.558 cv
361.941 261.306 362.415 261.976 362.415 261.976 cv
361.62 262.16 361.048 264.544 361.69 267.132 cv
362.339 269.71 363.966 271.544 364.757 271.326 cv
364.757 271.326 364.652 272.146 363.649 272.398 cv
360.966 273.076 358.558 271.091 357.812 268.099 cv
cp
@
1 lc
0 lj
357.532 267.287 mo
357.005 267.408 356.876 267.402 356.298 267.353 cv
355.711 267.302 355.175 267.16 354.688 266.945 cv
@
0 lc
334.985 138.199 mo
334.057 137.772 332.946 137.51 331.747 137.482 cv
328.701 137.418 325.762 139.281 325.721 140.864 cv
325.721 141.066 325.145 141.162 325.144 141.377 cv
325.139 141.582 325.71 141.701 325.704 141.905 cv
325.663 143.491 328.52 145.485 331.569 145.553 cv
332.764 145.582 333.882 145.373 334.828 144.989 cv
@
1 lj
339.566 141.688 mo
339.64 138.608 337.833 136.063 335.064 136 cv
334.039 135.972 333.726 136.732 333.726 136.732 cv
334.542 136.736 335.625 138.935 335.571 141.601 cv
335.506 144.257 334.324 146.406 333.504 146.368 cv
333.504 146.368 333.788 147.144 334.821 147.168 cv
337.586 147.237 339.499 144.77 339.566 141.688 cv
cp
@
1 lc
0 lj
339.659 140.833 mo
340.2 140.834 340.325 140.802 340.877 140.626 cv
341.438 140.447 341.93 140.19 342.358 139.874 cv
@
0 lc
356.7 196.013 mo
356.106 195.183 355.27 194.404 354.245 193.783 cv
351.631 192.215 348.155 192.374 347.334 193.73 cv
347.235 193.904 346.686 193.7 346.577 193.888 cv
346.471 194.062 346.909 194.449 346.801 194.624 cv
345.979 195.98 347.469 199.13 350.083 200.703 cv
351.106 201.32 352.18 201.693 353.192 201.83 cv
@
1 lj
358.944 201.316 mo
360.536 198.679 360.231 195.572 357.86 194.143 cv
356.983 193.61 356.334 194.115 356.334 194.115 cv
357.04 194.522 356.889 196.969 355.518 199.257 cv
354.143 201.531 352.051 202.809 351.358 202.37 cv
351.358 202.37 351.219 203.184 352.104 203.716 cv
354.471 205.151 357.356 203.958 358.944 201.316 cv
cp
@
1 lc
0 lj
359.448 200.62 mo
359.918 200.89 360.042 200.923 360.61 201.044 cv
361.186 201.168 361.739 201.189 362.268 201.126 cv
@
0 lc
348.42 128.635 mo
348.312 127.62 348.421 126.483 348.778 125.338 cv
349.692 122.432 352.399 120.244 353.911 120.713 cv
354.102 120.777 354.377 120.262 354.583 120.33 cv
354.778 120.391 354.708 120.969 354.903 121.029 cv
356.418 121.498 357.393 124.844 356.481 127.754 cv
356.125 128.895 355.569 129.888 354.903 130.66 cv
@
1 lj
350.258 134.092 mo
347.317 133.176 345.485 130.648 346.311 128.006 cv
346.614 127.025 347.434 126.973 347.434 126.973 cv
347.176 127.746 348.913 129.477 351.456 130.279 cv
353.993 131.068 356.407 130.637 356.633 129.848 cv
356.633 129.848 357.278 130.365 356.969 131.352 cv
356.149 133.994 353.2 135.016 350.258 134.092 cv
cp
@
1 lc
0 lj
349.419 133.906 mo
349.248 134.419 349.176 134.527 348.833 134.994 cv
348.483 135.469 348.083 135.852 347.645 136.156 cv
@
0 lc
372.376 194.72 mo
372.781 193.782 373.434 192.846 374.307 192.023 cv
376.531 189.941 379.963 189.366 381.05 190.517 cv
381.185 190.667 381.678 190.354 381.824 190.513 cv
381.964 190.662 381.619 191.131 381.759 191.28 cv
382.849 192.433 382.054 195.825 379.83 197.912 cv
378.96 198.732 377.987 199.322 377.028 199.668 cv
@
1 lj
371.296 200.375 mo
369.184 198.132 368.831 195.031 370.848 193.136 cv
371.593 192.43 372.334 192.787 372.334 192.787 cv
371.729 193.334 372.391 195.694 374.212 197.642 cv
376.035 199.578 378.349 200.386 378.934 199.81 cv
378.934 199.81 379.241 200.578 378.488 201.287 cv
376.475 203.185 373.405 202.625 371.296 200.375 cv
cp
@
1 lc
0 lj
370.656 199.802 mo
370.254 200.164 370.139 200.224 369.611 200.46 cv
369.074 200.703 368.537 200.839 368.006 200.89 cv
@
206.398 335.752 mo
219.935 337.909 218.106 336.762 218.11 336.764 cv
218.115 336.766 220.074 336.225 206.734 334.108 cv
193.358 331.762 175.528 324.128 175.528 324.243 cv
175.39 324.399 192.751 333.344 206.398 335.752 cv
f
1.4 lw
0 lc
206.398 335.752 mo
219.935 337.909 218.106 336.762 218.11 336.764 cv
218.115 336.766 220.074 336.225 206.734 334.108 cv
193.358 331.762 175.528 324.128 175.528 324.243 cv
175.39 324.399 192.751 333.344 206.398 335.752 cv
cp
@
143.138 302.942 mo
153.235 312.194 152.69 309.797 152.553 309.963 cv
152.696 309.803 154.242 310.838 144.294 301.717 cv
134.165 292.725 122.937 277.014 122.832 277.014 cv
122.534 277.127 132.817 293.75 143.138 302.942 cv
f
143.138 302.942 mo
153.235 312.194 152.69 309.797 152.553 309.963 cv
152.696 309.803 154.242 310.838 144.294 301.717 cv
134.165 292.725 122.937 277.014 122.832 277.014 cv
122.534 277.127 132.817 293.75 143.138 302.942 cv
cp
@
108.002 246.895 mo
112.688 259.776 112.868 257.59 112.847 257.604 cv
112.869 257.6 114.222 259.075 109.604 246.383 cv
105.133 233.567 103.162 214.343 102.931 214.343 cv
102.68 214.304 103.456 233.815 108.002 246.895 cv
f
108.002 246.895 mo
112.688 259.776 112.868 257.59 112.847 257.604 cv
112.869 257.6 114.222 259.075 109.604 246.383 cv
105.133 233.567 103.162 214.343 102.931 214.343 cv
102.68 214.304 103.456 233.815 108.002 246.895 cv
cp
@
104.732 180.414 mo
102.201 193.885 103.914 192.145 103.72 192.122 cv
103.91 192.155 103.881 194.036 106.379 180.756 cv
108.696 167.392 116.551 149.791 116.343 149.583 cv
116.091 149.383 107.117 166.778 104.732 180.414 cv
f
104.732 180.414 mo
102.201 193.885 103.914 192.145 103.72 192.122 cv
103.91 192.155 103.881 194.036 106.379 180.756 cv
108.696 167.392 116.551 149.791 116.343 149.583 cv
116.091 149.383 107.117 166.778 104.732 180.414 cv
cp
@
134.495 121.219 mo
125.841 131.848 128.039 131.043 127.937 130.974 cv
128.031 131.051 127.237 132.793 135.769 122.318 cv
144.354 111.816 159.413 99.6426 159.565 99.8379 cv
159.722 99.9947 143.269 110.516 134.495 121.219 cv
f
134.495 121.219 mo
125.841 131.848 128.039 131.043 127.937 130.974 cv
128.031 131.051 127.237 132.793 135.769 122.318 cv
144.354 111.816 159.413 99.6426 159.565 99.8379 cv
159.722 99.9947 143.269 110.516 134.495 121.219 cv
cp
@
3.4016 lw
210.617 335.643 mo
210.588 335.133 211.246 328.473 208.33 326.6 cv
205.766 324.969 205.432 329.542 203.837 329.206 cv
201.994 328.792 201.945 327.182 201.56 324.569 cv
201.305 323.006 201.076 319.452 197.791 318.518 cv
193.347 317.262 194.902 324.086 192.149 324.299 cv
189.688 324.506 189.964 320.59 189.948 317.916 cv
189.929 313.385 188.003 310.622 183.571 311.233 cv
178.536 311.657 183.019 319.657 180.737 320.596 cv
178.594 321.483 177.144 320.084 175.866 317.741 cv
173.116 312.792 167.641 312.907 164.472 317.665 cv
161.222 322.555 164.224 328.184 170.55 327.745 cv
173.41 327.565 175.286 328.159 176.117 330.368 cv
177.135 333.114 166.939 333.413 170.349 338.29 cv
173.613 342.545 178.171 342.241 181.483 339.202 cv
183.57 337.292 185.877 334.647 187.926 336.184 cv
190.348 338.032 184.135 342.407 189.514 344.245 cv
193.585 345.631 195.85 342.858 196.915 341.711 cv
198.676 339.848 199.559 338.268 201.549 338.715 cv
203.259 339.081 201.497 343.352 204.938 342.991 cv
208.854 342.579 210.414 336.104 210.617 335.643 cv
cp
@
150.081 307.545 mo
150.298 307.1 154.044 301.743 152.354 298.858 cv
150.918 296.266 148.509 299.936 147.336 298.854 cv
146.007 297.567 146.808 296.092 147.668 293.733 cv
148.198 292.28 149.594 289.237 147.2 286.895 cv
144.172 283.534 142.105 290.239 139.74 289.022 cv
137.649 287.92 139.569 284.862 140.836 282.565 cv
142.79 278.827 142.731 275.334 138.653 273.737 cv
133.984 271.799 134.263 280.612 131.777 280.383 cv
129.555 280.092 128.834 278.307 128.79 275.737 cv
129.069 270.034 124.197 267.588 119.141 270.192 cv
114.104 272.782 114.123 278.963 119.47 281.76 cv
122.072 282.924 123.542 284.225 123.164 286.54 cv
122.81 289.313 113.69 284.879 114.437 290.573 cv
115.192 295.774 118.958 297.885 123.432 296.719 cv
126.125 296.084 129.544 294.768 130.448 297.161 cv
131.542 299.979 124.281 300.627 127.819 304.924 cv
130.658 308.018 134.032 306.627 135.491 306.157 cv
137.948 305.346 139.389 304.491 140.823 305.881 cv
142.082 307.04 138.463 309.922 141.598 311.227 cv
145.233 312.639 149.685 307.846 150.081 307.545 cv
cp
@
111.584 254.268 mo
111.995 253.983 117.896 251.126 117.979 247.731 cv
118.038 244.75 114.045 246.811 113.516 245.307 cv
112.927 243.551 114.245 242.69 116.21 241.038 cv
117.387 240.024 120.242 238.016 119.351 234.792 cv
118.14 230.434 113.226 235.227 111.646 233.036 cv
110.195 231.088 113.597 229.317 115.834 227.934 cv
119.587 225.6 121.021 222.563 118.128 219.183 cv
115.171 215.191 110.869 223.032 108.918 221.604 cv
106.974 220.279 107.48 218.343 108.785 216.072 cv
111.642 211.233 108.499 206.718 102.951 206.518 cv
97.1568 206.317 94.2359 211.704 97.7085 216.762 cv
99.3228 219.056 99.7066 220.93 98.3931 222.747 cv
96.6216 224.999 91.0699 216.655 88.7671 221.99 cv
86.9966 226.881 89.4752 230.54 93.7261 231.75 cv
96.3785 232.518 99.774 233.09 99.5582 235.583 cv
99.2466 238.551 92.4253 235.598 93.6265 241.034 cv
94.5435 245.143 98.0142 245.62 99.5162 245.924 cv
101.993 246.434 103.768 246.362 104.401 248.258 cv
104.968 249.874 100.501 250.586 102.552 253.28 cv
104.892 256.344 111.097 254.334 111.584 254.268 cv
cp
@
104.212 189 mo
104.766 188.959 111.08 189.307 112.882 186.392 cv
114.425 183.827 109.924 183.679 110.217 182.11 cv
110.565 180.292 112.195 180.193 114.66 179.694 cv
116.175 179.382 119.637 179.015 120.396 175.756 cv
121.442 171.357 114.772 173.133 114.545 170.476 cv
114.434 168.132 118.065 168.179 120.706 168.066 cv
124.985 167.808 127.754 165.873 127.053 161.586 cv
126.261 156.593 118.9 161.429 117.796 159.191 cv
116.913 157.159 117.952 155.561 120.265 154.251 cv
125.181 151.458 124.69 146.014 119.932 143.113 cv
114.997 140.112 109.766 143.363 110.264 149.443 cv
110.487 152.202 110.252 154.185 108.05 155.056 cv
105.501 156.205 104.515 146.102 100.053 149.714 cv
95.9439 153.055 96.2857 157.441 99.5416 160.624 cv
101.471 162.582 104.357 164.805 102.748 166.813 cv
100.944 169.227 96.4703 163.338 94.8902 168.674 cv
93.7203 172.719 96.5308 174.829 97.7007 175.827 cv
99.6724 177.494 101.198 178.284 100.82 180.246 cv
100.506 181.928 96.2662 180.376 96.7076 183.718 cv
97.1822 187.52 103.81 188.827 104.212 189 cv
cp
@
129.689 128.253 mo
130.144 128.451 135.587 131.936 138.561 130.254 cv
141.14 128.751 137.292 126.422 138.305 125.188 cv
139.457 123.737 141.003 124.515 143.411 125.297 cv
144.879 125.761 148.065 127.123 150.29 124.614 cv
153.426 121.349 146.716 119.626 147.82 117.196 cv
148.845 115.071 151.98 116.871 154.332 118.048 cv
158.157 119.872 161.675 119.704 163.036 115.469 cv
164.776 110.719 156 111.371 156.135 108.888 cv
156.292 106.598 158.063 105.827 160.729 105.816 cv
166.297 105.641 168.643 100.839 165.85 95.9092 cv
163.047 90.9649 156.772 91.0645 154.336 96.7452 cv
153.179 99.2569 151.925 100.756 149.64 100.527 cv
146.849 100.276 150.891 90.9659 145.242 91.9463 cv
140.15 93.003 138.163 96.8194 139.49 101.224 cv
140.23 103.885 141.677 107.247 139.315 108.238 cv
136.562 109.46 135.55 102.159 131.502 105.968 cv
128.544 108.954 129.976 112.178 130.514 113.626 cv
131.404 116.032 132.272 117.401 131.023 118.961 cv
129.938 120.285 126.997 116.851 125.77 120 cv
124.35 123.569 129.374 127.868 129.689 128.253 cv
cp
@
257.237 335.643 mo
257.266 335.133 256.608 328.473 259.524 326.6 cv
262.088 324.969 262.422 329.542 264.017 329.206 cv
265.86 328.792 265.909 327.182 266.294 324.569 cv
266.549 323.006 266.778 319.452 270.063 318.518 cv
274.507 317.262 272.952 324.086 275.705 324.299 cv
278.166 324.506 277.89 320.59 277.906 317.916 cv
277.925 313.385 279.851 310.622 284.283 311.233 cv
289.318 311.657 284.835 319.657 287.117 320.596 cv
289.26 321.483 290.71 320.084 291.988 317.741 cv
294.738 312.792 300.213 312.907 303.382 317.665 cv
306.632 322.555 303.63 328.184 297.304 327.745 cv
294.444 327.565 292.568 328.159 291.737 330.368 cv
290.719 333.114 300.915 333.413 297.505 338.29 cv
294.241 342.545 289.683 342.241 286.371 339.202 cv
284.284 337.292 281.977 334.647 279.928 336.184 cv
277.506 338.032 283.719 342.407 278.34 344.245 cv
274.269 345.631 272.004 342.858 270.939 341.711 cv
269.178 339.848 268.295 338.268 266.305 338.715 cv
264.595 339.081 266.357 343.352 262.916 342.991 cv
259 342.579 257.44 336.104 257.237 335.643 cv
cp
@
317.773 307.545 mo
317.556 307.1 313.81 301.743 315.5 298.858 cv
316.936 296.266 319.345 299.936 320.518 298.854 cv
321.847 297.567 321.046 296.092 320.186 293.733 cv
319.656 292.28 318.26 289.237 320.654 286.895 cv
323.682 283.534 325.749 290.239 328.114 289.022 cv
330.205 287.92 328.285 284.862 327.018 282.565 cv
325.064 278.827 325.123 275.334 329.201 273.737 cv
333.87 271.799 333.591 280.612 336.077 280.383 cv
338.299 280.092 339.02 278.307 339.064 275.737 cv
338.785 270.034 343.657 267.588 348.713 270.192 cv
353.75 272.782 353.731 278.963 348.384 281.76 cv
345.782 282.924 344.312 284.225 344.69 286.54 cv
345.044 289.313 354.164 284.879 353.418 290.573 cv
352.662 295.774 348.896 297.885 344.422 296.719 cv
341.729 296.084 338.31 294.768 337.406 297.161 cv
336.312 299.979 343.573 300.627 340.035 304.924 cv
337.196 308.018 333.822 306.627 332.363 306.157 cv
329.906 305.346 328.465 304.491 327.031 305.881 cv
325.772 307.04 329.391 309.922 326.256 311.227 cv
322.621 312.639 318.169 307.846 317.773 307.545 cv
cp
@
356.27 254.268 mo
355.859 253.983 349.958 251.126 349.876 247.731 cv
349.816 244.75 353.809 246.811 354.338 245.307 cv
354.927 243.551 353.609 242.69 351.644 241.038 cv
350.467 240.024 347.612 238.016 348.503 234.792 cv
349.714 230.434 354.628 235.227 356.208 233.036 cv
357.659 231.088 354.257 229.317 352.02 227.934 cv
348.267 225.6 346.834 222.563 349.726 219.183 cv
352.683 215.191 356.985 223.032 358.936 221.604 cv
360.88 220.279 360.375 218.343 359.069 216.072 cv
356.212 211.233 359.355 206.718 364.903 206.518 cv
370.697 206.317 373.618 211.704 370.145 216.762 cv
368.531 219.056 368.147 220.93 369.46 222.747 cv
371.232 224.999 376.784 216.655 379.086 221.99 cv
380.857 226.881 378.378 230.54 374.127 231.75 cv
371.475 232.518 368.08 233.09 368.295 235.583 cv
368.607 238.551 375.428 235.598 374.227 241.034 cv
373.31 245.143 369.839 245.62 368.337 245.924 cv
365.861 246.434 364.086 246.362 363.453 248.258 cv
362.886 249.874 367.353 250.586 365.302 253.28 cv
362.962 256.344 356.757 254.334 356.27 254.268 cv
cp
@
363.642 189 mo
363.088 188.959 356.774 189.307 354.972 186.392 cv
353.429 183.827 357.93 183.679 357.637 182.11 cv
357.289 180.292 355.659 180.193 353.194 179.694 cv
351.679 179.382 348.217 179.015 347.458 175.756 cv
346.412 171.357 353.082 173.133 353.309 170.476 cv
353.42 168.132 349.789 168.179 347.148 168.066 cv
342.869 167.808 340.1 165.873 340.801 161.586 cv
341.593 156.593 348.954 161.429 350.058 159.191 cv
350.941 157.159 349.902 155.561 347.589 154.251 cv
342.673 151.458 343.164 146.014 347.922 143.113 cv
352.857 140.112 358.088 143.363 357.59 149.443 cv
357.367 152.202 357.602 154.185 359.804 155.056 cv
362.353 156.205 363.339 146.102 367.801 149.714 cv
371.91 153.055 371.568 157.441 368.312 160.624 cv
366.383 162.582 363.497 164.805 365.106 166.813 cv
366.91 169.227 371.383 163.338 372.963 168.674 cv
374.133 172.719 371.323 174.829 370.153 175.827 cv
368.181 177.494 366.656 178.284 367.034 180.246 cv
367.348 181.928 371.587 180.376 371.146 183.718 cv
370.671 187.52 364.044 188.827 363.642 189 cv
cp
@
338.165 128.253 mo
337.71 128.451 332.267 131.936 329.293 130.254 cv
326.714 128.751 330.562 126.422 329.549 125.188 cv
328.397 123.737 326.851 124.515 324.443 125.297 cv
322.975 125.761 319.789 127.123 317.564 124.614 cv
314.428 121.349 321.138 119.626 320.034 117.196 cv
319.009 115.071 315.874 116.871 313.522 118.048 cv
309.697 119.872 306.179 119.704 304.818 115.469 cv
303.078 110.719 311.854 111.371 311.719 108.888 cv
311.562 106.598 309.791 105.827 307.126 105.816 cv
301.557 105.641 299.211 100.839 302.004 95.9092 cv
304.807 90.9649 311.082 91.0645 313.518 96.7452 cv
314.675 99.2569 315.929 100.756 318.214 100.527 cv
321.005 100.276 316.963 90.9659 322.612 91.9463 cv
327.704 93.003 329.691 96.8194 328.364 101.224 cv
327.625 103.885 326.177 107.247 328.539 108.238 cv
331.292 109.46 332.304 102.159 336.352 105.968 cv
339.31 108.954 337.878 112.178 337.34 113.626 cv
336.45 116.032 335.583 117.401 336.831 118.961 cv
337.916 120.285 340.857 116.851 342.084 120 cv
343.504 123.569 338.48 127.868 338.165 128.253 cv
cp
@
261.456 335.752 mo
247.919 337.909 249.748 336.762 249.744 336.764 cv
249.739 336.766 247.78 336.225 261.12 334.108 cv
274.496 331.762 292.326 324.128 292.326 324.243 cv
292.464 324.399 275.103 333.344 261.456 335.752 cv
f
1.4 lw
261.456 335.752 mo
247.919 337.909 249.748 336.762 249.744 336.764 cv
249.739 336.766 247.78 336.225 261.12 334.108 cv
274.496 331.762 292.326 324.128 292.326 324.243 cv
292.464 324.399 275.103 333.344 261.456 335.752 cv
cp
@
324.716 302.942 mo
314.619 312.194 315.164 309.797 315.301 309.963 cv
315.158 309.803 313.612 310.838 323.56 301.717 cv
333.689 292.725 344.918 277.014 345.022 277.014 cv
345.32 277.127 335.037 293.75 324.716 302.942 cv
f
324.716 302.942 mo
314.619 312.194 315.164 309.797 315.301 309.963 cv
315.158 309.803 313.612 310.838 323.56 301.717 cv
333.689 292.725 344.918 277.014 345.022 277.014 cv
345.32 277.127 335.037 293.75 324.716 302.942 cv
cp
@
359.852 246.895 mo
355.166 259.776 354.986 257.59 355.007 257.604 cv
354.985 257.6 353.632 259.075 358.25 246.383 cv
362.721 233.567 364.692 214.343 364.923 214.343 cv
365.174 214.304 364.398 233.815 359.852 246.895 cv
f
359.852 246.895 mo
355.166 259.776 354.986 257.59 355.007 257.604 cv
354.985 257.6 353.632 259.075 358.25 246.383 cv
362.721 233.567 364.692 214.343 364.923 214.343 cv
365.174 214.304 364.398 233.815 359.852 246.895 cv
cp
@
363.122 180.414 mo
365.653 193.885 363.94 192.145 364.134 192.122 cv
363.944 192.155 363.973 194.036 361.475 180.756 cv
359.158 167.392 351.303 149.791 351.511 149.583 cv
351.763 149.383 360.737 166.778 363.122 180.414 cv
f
363.122 180.414 mo
365.653 193.885 363.94 192.145 364.134 192.122 cv
363.944 192.155 363.973 194.036 361.475 180.756 cv
359.158 167.392 351.303 149.791 351.511 149.583 cv
351.763 149.383 360.737 166.778 363.122 180.414 cv
cp
@
333.359 121.219 mo
342.013 131.848 339.815 131.043 339.918 130.974 cv
339.823 131.051 340.617 132.793 332.085 122.318 cv
323.5 111.816 308.441 99.6426 308.289 99.8379 cv
308.131 99.9947 324.585 110.516 333.359 121.219 cv
f
333.359 121.219 mo
342.013 131.848 339.815 131.043 339.918 130.974 cv
339.823 131.051 340.617 132.793 332.085 122.318 cv
323.5 111.816 308.441 99.6426 308.289 99.8379 cv
308.131 99.9947 324.585 110.516 333.359 121.219 cv
cp
@
12.4986 409.969 mo
19.3716 409.969 li
12.1509 419.191 li
19.9517 430.907 li
12.7598 430.907 li
5.85792 419.771 li
5.79981 419.771 li
5.79981 430.907 li
0 430.907 li
0 409.969 li
5.79981 409.969 li
5.79981 419.162 li
5.85792 419.162 li
12.4986 409.969 li
0 0 0 1 cmyk
f
29.8697 414.029 mo
23.461 414.029 li
23.461 409.969 li
42.2237 409.969 li
42.2237 414.029 li
35.67 414.029 li
35.67 430.907 li
29.8697 430.907 li
29.8697 414.029 li
f
47.3277 430.907 mo
47.3277 409.969 li
53.1568 409.969 li
53.1568 418.263 li
60.2618 418.263 li
60.2618 409.969 li
66.0616 409.969 li
66.0616 430.907 li
60.2618 430.907 li
60.2618 422.323 li
53.1275 422.323 li
53.1275 430.907 li
47.3277 430.907 li
f
85.4336 430.907 mo
85.4336 409.969 li
101.384 409.969 li
101.384 414.029 li
91.2334 414.029 li
91.2334 418.35 li
100.572 418.35 li
100.572 422.41 li
91.2334 422.41 li
91.2334 426.847 li
101.384 426.847 li
101.384 430.907 li
85.4336 430.907 li
f
113.1 417.944 mo
114.347 416.494 115.796 415.914 117.652 415.914 cv
120.785 415.914 123.104 417.944 123.104 421.163 cv
123.104 430.907 li
117.595 430.907 li
117.595 422.352 li
117.537 420.931 117.188 419.394 115.478 419.394 cv
112.751 419.394 113.1 422.38 113.1 422.555 cv
113.1 430.907 li
107.59 430.907 li
107.59 420.089 li
107.59 418.785 107.561 417.915 107.416 416.349 cv
113.013 416.349 li
113.1 417.944 li
f
137.024 419.104 mo
134.762 419.104 134.27 421.366 134.27 423.164 cv
134.27 424.961 134.762 427.224 137.024 427.224 cv
139.286 427.224 139.779 424.961 139.779 423.164 cv
139.779 421.366 139.286 419.104 137.024 419.104 cv
cp
145.289 428.876 mo
145.202 431.371 144.97 432.995 143.259 434.619 cv
141.78 436.04 138.764 436.649 136.938 436.649 cv
133.718 436.649 129.456 435.866 129.456 431.661 cv
134.588 431.661 li
134.617 432.385 134.907 432.792 135.313 433.082 cv
135.749 433.342 136.328 433.458 136.908 433.458 cv
139.344 433.458 139.779 431.893 139.779 429.747 cv
139.779 428.094 li
139.721 428.094 li
138.822 429.717 136.851 430.414 134.994 430.414 cv
130.818 430.414 128.614 427.049 128.614 423.164 cv
128.614 418.93 131.08 415.914 135.284 415.914 cv
137.314 415.914 138.88 416.754 139.721 418.465 cv
139.779 418.465 li
139.924 416.349 li
145.289 416.349 li
145.289 428.876 li
f
151.785 430.907 mo
151.785 416.349 li
157.295 416.349 li
157.295 430.907 li
151.785 430.907 li
cp
151.756 413.855 mo
151.756 409.969 li
157.324 409.969 li
157.324 413.855 li
151.756 413.855 li
f
169.678 417.944 mo
170.925 416.494 172.375 415.914 174.231 415.914 cv
177.363 415.914 179.683 417.944 179.683 421.163 cv
179.683 430.907 li
174.173 430.907 li
174.173 422.352 li
174.115 420.931 173.767 419.394 172.056 419.394 cv
169.33 419.394 169.678 422.38 169.678 422.555 cv
169.678 430.907 li
164.168 430.907 li
164.168 420.089 li
164.168 418.785 164.139 417.915 163.994 416.349 cv
169.591 416.349 li
169.678 417.944 li
f
195.778 421.772 mo
195.778 420.989 195.546 420.206 195.111 419.597 cv
194.676 418.988 194.038 418.611 193.197 418.668 cv
191.283 418.755 190.819 420.119 190.674 421.772 cv
195.778 421.772 li
cp
190.558 424.73 mo
190.529 426.615 191.022 428.239 193.081 428.239 cv
194.618 428.239 195.575 427.514 195.778 426.151 cv
200.882 426.151 li
200.708 428.036 199.519 429.399 198.126 430.21 cv
196.851 431.023 195.227 431.341 193.516 431.341 cv
187.687 431.341 185.367 428.848 185.367 423.135 cv
185.367 418.524 188.818 415.914 193.197 415.914 cv
199.113 415.914 200.998 419.307 200.998 424.73 cv
190.558 424.73 li
f
216.338 421.772 mo
216.338 420.989 216.106 420.206 215.671 419.597 cv
215.236 418.988 214.599 418.611 213.757 418.668 cv
211.843 418.755 211.379 420.119 211.234 421.772 cv
216.338 421.772 li
cp
211.119 424.73 mo
211.089 426.615 211.583 428.239 213.642 428.239 cv
215.179 428.239 216.135 427.514 216.338 426.151 cv
221.442 426.151 li
221.269 428.036 220.08 429.399 218.688 430.21 cv
217.412 431.023 215.788 431.341 214.077 431.341 cv
208.248 431.341 205.928 428.848 205.928 423.135 cv
205.928 418.524 209.378 415.914 213.757 415.914 cv
219.673 415.914 221.559 419.307 221.559 424.73 cv
211.119 424.73 li
f
232.984 419.075 mo
233.042 419.075 li
233.68 416.668 235.478 415.856 237.916 415.914 cv
237.916 420.583 li
237.509 420.554 237.131 420.554 236.754 420.554 cv
233.883 420.583 232.897 422.293 232.984 425.078 cv
232.984 430.907 li
227.474 430.907 li
227.474 420.089 li
227.474 418.785 227.445 417.915 227.3 416.349 cv
232.897 416.349 li
232.984 419.075 li
f
243.427 430.907 mo
243.427 416.349 li
248.937 416.349 li
248.937 430.907 li
243.427 430.907 li
cp
243.398 413.855 mo
243.398 409.969 li
248.966 409.969 li
248.966 413.855 li
243.398 413.855 li
f
261.32 417.944 mo
262.567 416.494 264.017 415.914 265.873 415.914 cv
269.005 415.914 271.325 417.944 271.325 421.163 cv
271.325 430.907 li
265.815 430.907 li
265.815 422.352 li
265.757 420.931 265.409 419.394 263.698 419.394 cv
260.972 419.394 261.32 422.38 261.32 422.555 cv
261.32 430.907 li
255.81 430.907 li
255.81 420.089 li
255.81 418.785 255.781 417.915 255.636 416.349 cv
261.233 416.349 li
261.32 417.944 li
f
285.303 419.104 mo
283.041 419.104 282.547 421.366 282.547 423.164 cv
282.547 424.961 283.041 427.224 285.303 427.224 cv
287.565 427.224 288.058 424.961 288.058 423.164 cv
288.058 421.366 287.565 419.104 285.303 419.104 cv
cp
293.568 428.876 mo
293.481 431.371 293.249 432.995 291.538 434.619 cv
290.059 436.04 287.042 436.649 285.215 436.649 cv
281.997 436.649 277.734 435.866 277.734 431.661 cv
282.867 431.661 li
282.896 432.385 283.186 432.792 283.592 433.082 cv
284.027 433.342 284.607 433.458 285.187 433.458 cv
287.623 433.458 288.058 431.893 288.058 429.747 cv
288.058 428.094 li
288 428.094 li
287.101 429.717 285.128 430.414 283.273 430.414 cv
279.097 430.414 276.893 427.049 276.893 423.164 cv
276.893 418.93 279.358 415.914 283.563 415.914 cv
285.593 415.914 287.159 416.754 288 418.465 cv
288.058 418.465 li
288.203 416.349 li
293.568 416.349 li
293.568 428.876 li
f
323.699 416.117 mo
323.727 415.305 323.466 414.696 322.944 414.261 cv
322.452 413.826 321.698 413.594 320.711 413.594 cv
319.377 413.594 318.217 414.463 318.217 415.508 cv
318.217 417.044 320.074 417.538 321.61 417.944 cv
325.12 418.843 330.223 419.191 330.223 424.846 cv
330.223 429.253 325.874 431.341 321.031 431.341 cv
316.159 431.341 311.867 429.92 311.78 424.237 cv
317.58 424.237 li
317.55 426.208 319 427.282 321.088 427.282 cv
322.422 427.282 324.133 426.585 324.133 425.194 cv
324.133 422.352 319.841 422.96 315.289 420.96 cv
313.171 420.032 312.127 418.118 312.127 415.856 cv
312.36 410.897 316.71 409.534 321.088 409.534 cv
325.41 409.534 329.846 411.071 329.499 416.117 cv
323.699 416.117 li
f
345.506 421.453 mo
345.506 420.728 345.39 420.148 345.071 419.742 cv
344.751 419.335 344.201 419.104 343.36 419.104 cv
341.359 419.104 341.243 422.12 341.243 423.627 cv
341.243 425.136 341.359 428.152 343.36 428.152 cv
345.274 428.006 345.506 426.528 345.506 425.223 cv
351.016 425.223 li
351.016 427.282 350.117 428.79 348.753 429.805 cv
347.362 430.791 345.506 431.284 343.592 431.341 cv
338.082 431.341 335.588 428.673 335.588 423.627 cv
335.588 418.35 339.213 415.914 343.592 415.914 cv
347.275 415.856 350.754 417.306 351.016 421.453 cv
345.506 421.453 li
f
357.077 430.907 mo
357.077 416.349 li
362.586 416.349 li
362.586 430.907 li
357.077 430.907 li
cp
357.047 413.855 mo
357.047 409.969 li
362.616 409.969 li
362.616 413.855 li
357.047 413.855 li
f
378.943 421.772 mo
378.943 420.989 378.71 420.206 378.276 419.597 cv
377.84 418.988 377.203 418.611 376.362 418.668 cv
374.448 418.755 373.984 420.119 373.838 421.772 cv
378.943 421.772 li
cp
373.722 424.73 mo
373.694 426.615 374.186 428.239 376.246 428.239 cv
377.783 428.239 378.74 427.514 378.943 426.151 cv
384.046 426.151 li
383.873 428.036 382.683 429.399 381.292 430.21 cv
380.015 431.023 378.391 431.341 376.68 431.341 cv
370.851 431.341 368.532 428.848 368.532 423.135 cv
368.532 418.524 371.983 415.914 376.362 415.914 cv
382.278 415.914 384.163 419.307 384.163 424.73 cv
373.722 424.73 li
f
395.356 417.944 mo
396.603 416.494 398.053 415.914 399.91 415.914 cv
403.042 415.914 405.361 417.944 405.361 421.163 cv
405.361 430.907 li
399.851 430.907 li
399.851 422.352 li
399.793 420.931 399.445 419.394 397.734 419.394 cv
395.008 419.394 395.356 422.38 395.356 422.555 cv
395.356 430.907 li
389.846 430.907 li
389.846 420.089 li
389.846 418.785 389.817 417.915 389.672 416.349 cv
395.269 416.349 li
395.356 417.944 li
f
421.253 421.453 mo
421.253 420.728 421.137 420.148 420.818 419.742 cv
420.5 419.335 419.948 419.104 419.107 419.104 cv
417.106 419.104 416.99 422.12 416.99 423.627 cv
416.99 425.136 417.106 428.152 419.107 428.152 cv
421.021 428.006 421.253 426.528 421.253 425.223 cv
426.763 425.223 li
426.763 427.282 425.864 428.79 424.501 429.805 cv
423.109 430.791 421.253 431.284 419.339 431.341 cv
413.829 431.341 411.335 428.673 411.335 423.627 cv
411.335 418.35 414.96 415.914 419.339 415.914 cv
423.022 415.856 426.502 417.306 426.763 421.453 cv
421.253 421.453 li
f
442.132 421.772 mo
442.132 420.989 441.901 420.206 441.465 419.597 cv
441.031 418.988 440.393 418.611 439.552 418.668 cv
437.638 418.755 437.174 420.119 437.029 421.772 cv
442.132 421.772 li
cp
436.913 424.73 mo
436.884 426.615 437.376 428.239 439.436 428.239 cv
440.973 428.239 441.93 427.514 442.132 426.151 cv
447.237 426.151 li
447.063 428.036 445.874 429.399 444.482 430.21 cv
443.206 431.023 441.582 431.341 439.871 431.341 cv
434.042 431.341 431.722 428.848 431.722 423.135 cv
431.722 418.524 435.172 415.914 439.552 415.914 cv
445.467 415.914 447.353 419.307 447.353 424.73 cv
436.913 424.73 li
f
460.954 420.844 mo
460.954 420.351 460.867 419.916 460.606 419.626 cv
460.316 419.307 459.852 419.104 459.097 419.104 cv
458.286 419.104 457.792 419.568 457.792 420.409 cv
457.792 421.482 460.026 421.423 463.477 422.497 cv
465.216 423.047 466.406 424.121 466.406 426.499 cv
466.406 430.356 462.781 431.341 459.446 431.341 cv
455.878 431.341 452.399 430.617 452.427 426.18 cv
457.648 426.18 li
457.561 426.615 457.706 427.108 458.025 427.485 cv
458.343 427.862 458.807 428.152 459.33 428.152 cv
460.403 428.152 461.186 427.746 461.186 426.818 cv
461.186 424.237 452.573 425.774 452.573 420.496 cv
452.573 416.9 456.401 415.914 459.3 415.914 cv
462.751 415.914 465.942 416.813 466.173 420.844 cv
460.954 420.844 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 11.0
%%AI8_CreatorVersion: 11.0.0
%%For: (oscard) (Intellecta)
%%Title: (kth_pms_enginee_sciences.eps)
%%CreationDate: 05-02-27 22.45
%AI9_DataStream
%Gb!Q;l!!Ap''O`Eh>pRi'G/+i%Ko+g:dK%AR73NSfOs[Ej$*A-l:R6O'%.2kZbO-'-VDhOTrMn2l8Y@!hRHd*FdqXPh[+WhDAW3_
%HWZ*V,GC4Dkr`h=e;(U^^0i&pL3C:M1a8%$@:(i&M300;5!]HCaCA,O3ptM0U\pcdXUg2T?Fr-5-LBu?\b^/aMJ(ml\^dk+]g8PY
%Z:B=l\/'Iic#/<uAj'S#J)fXsDRDX1eaqk\HL7e$D@b\qoUYteXH,h]DP[#WB&LmX39kY=\?<Jh<P#oeg4ac*CsUnm\k1Apjl;&l
%)0t*,pP#>b5P]6oJ9F6J"TEU.hpe-tiFl%0OK#n(ESdO<Vr'+fl4e&$4R*=/6\:qXCAq7;&n''eJUfBbN(318_&%o^A+jk8n-OYZ
%bT7GW^1]2?_Y,I(l[Q>-s%1l7)$F:19U6:)ia>`%rO3:3$N#Ki3+@r&!kqbf*lIk6j*#iigMMo]E8k"?HarFml>8<48M>+r%)DPb
%rrM4?q2YtWj[$4:,($-;*fjL<DSdId/%;\$SQtu_qEQ(Z\mOolH?XJNhI%Vq$cV>X6MQ>n(D@&WJh_UO+Ae%pcpe>3-:?6(llGqS
%T%FTOJtP6Z%bH>6ZdhbQ8Ac#,P*824VJ_Qq@#s7O?&LA5q2)F"S1[t?BN4FMduV5050'3d\(i1c#mfU;_/C^:FJ]B0]2EoR-;Y'`
%'\Q:JJ(rHPN*r"KahM3p4sL[7N5sm5P@7OF622H/_VJT2mKS;g(\#M;MF=+;,QcjI&SMo95c[FDQ<BjM34+O_ThV'TK;[aLBGHRq
%/,0K9TiEEAXYLc=16[8NR1-HbA[j86OU+'$bA^gSnJRiOc55Yr,N<!RP2-WQD,0kZ<j3qGKN><([SjaC.tUQ1""St!=>tj84pu.X
%:\Y,EJktS:iIjA3MVo0!%DUjOX9lm7B]Ag6$J#BQcpj>[)T**0*+=e&6n#l!5)Cf1g#Lk-DE']$SDf:3^jj]<ed%ho'4MMSNV<uo
%n/GQIqA=r!.ekQr%mJqkX:Fb2T/^o%!h[gHed%h'7GK0p<u`;OA:";gcLqdd)9rbd%]p:[$nf&1S3>(9kCqr*cO=15K)L<[YWB3K
%@<M&rXr?cGqVW#jiVnT)+\_B.pk1Q03h)?#CdpJl3?/'D2qu5dYHZge1WQ&<H\'QJ_^WGCB89=(E=m(BF+t:82Olk9@\[H%pcRER
%IlMMF9\dmKF+b"r+ObhMIoU7(B5C=4XX[m:32q6HG;n:NlMcF6eNLi!?,\ROZAJmS&VD>kX[7ZbQ-GYTMuDY!JUjBlKAX`b"3Nho
%^cUh"r"f_!GP*ooZT5p3]V>DFJ'fZn=+B8F=:Dsb@VkCunkTtiNqs^pV:53FrJghn:.`;Ql>QTec/Ns?2u`DErZOK2gqbAt'u.(n
%pm\?\#\?>2=n54k*6ehr5>'9ROWTV@A.6bL7_d'o90UH^[O_SM=cS46;88q*J[),V/FrDIIp.qRA^N'1'CPAgAh`Ct6Mh^0^>+qM
%A,f\j7C061m.ikrDb5klhkcK<=H(3c@dK.PB]Mru9I*7EA5O[5qh$a!qc"2e^eTQFI\/t,/<(6X`PiZsfcQkA'k>!3a$^W7E`i8>
%7ZJ)U$"Q2.$ns"@.#(*2r',e<hiK/R6haq-ECC(pr#t@3OHG_X6Y43u>?Zp#e'#Xf4Y74iiL1%4a=>9R@N`^AkJQ1dgmC=/@I,;:
%(k\8[$R2e\pOh._q8ZncqP.RK`a`F<&q)el+q=pW$r=lM_q=RWf^_iH#D%oNHBBXg`7X-G*3l=18Dk`&8"o$*0t+.tUGQS%-S2R:
%LY.dO#o,m=Ts,C+MfBKoIOQ$6N/BCgL=JSJA]Nqs@`q%hRRMOSVdYl*&!OWd>9'l%j22Do<jL9n@Sau*3\e(1'Eb;YhEeZ,7JO#^
%:g>6aikRk$g-gZM6(YHXglk=?A]Ekt@Z*S_ZmGLnSgG9^!]HFQ&h&8(8'/o*lm^_:#ZZT@iipRJ@Vg0iK)6+))ls]m+<Zq@YTh'T
%iFaqOMM$?#\3AoB_W"oIa!fPqW>#MGWt_J5K'F>+'uV6_4Y6l3&(n)c*]YPq&i^Yu[#jLA77K.j/$N/Q<s3?U\9+PklNuK:0M'dm
%DinO[&)9T%NJYpp7r4#;p5dil/><o3I"q#`e@d1io%Ibn&c+8I,sYs>%g;5TSHH8HQo!Y%jpZ#,r>amh.dNH;Jp_Z?4`qg"/Z`AR
%a9=!lTU#b_!B!5H&_iSd#8+<$+Aa$=Ll2*t$XegrB4elj'SDeea@FSu_(22MJKBmG#tS^;qge\(#?F9CLHuh4W<HHO4:NlNrNK1m
%3pgkafZQoB/#\Rj&@g1HaCl53AcPWjNC@_O^'EU8bT>A*J&cP!L4cGf;ou0*qESbJ6E(_e3N]-5A0/`+P@D>^JAsi)(F_J7*(J0Y
%<s8975t6-A&(85N5%"f'6[_$!b6582X933-q?%e\FK@oEC`^%I@17;glk,m%TEsg1PZ2A:/4mVllu<2I,'"7'(7E8u;=,<G!*VM#
%;mEe8.?$kPYUgQP?Qc1Q4fIDWfO7BEC(&ZY3*Wg0UaYk0`?7ba_E4u>eE\!+U=U"N.?T;s>,^qtd7d5^*cn-D3Q=;p'P52uPH.lZ
%/mO+\e%%b4LTV!9_)OVBM)/a!?/#J;T0],)pkJ@Vg2G2a(hE_ro@"Gj9E[4tJ-X%qN)>>`P2$Mm[AiA=JYuq)WZJ.f0$J%(@n*Hj
%`_BsooOWt9d-4q6#q4+GeCM$E<9PqZM3.`<(SuM=ITmRtf('4-%ic)H&k+aB'ooprcQMKp^u&"iPSI=&pW5#tn]3G6N1nGu.hQ>@
%eII2PitoNj0?gD+N8r-E;o/7MQ`T89(1S-P,lpc68"aVHM?'A)dP")",)T`-)%XI!.bVP.2`<n?0^]#a,jIsYo1G>!ICU%b0kLa-
%Y-c\DUhPe4UBY=#^j"knX8)+.W'i/$R.l6X@_HdjFoh(L^__%25D:hb2T@h?qt&:('f@Cd>@Mn?;R.U6=T5b+:t/i;7T5j*V"O;^
%6]M2,+ZI?\<\-)")m0]]0H+sCcp`1mN),HgD&)^MO<^L>j!VnVC9.Y7:Qj,ul&g'e@e^(PPu1GsHt$MMM$#:^a&&'E[SViUdh[6f
%:]mNbL_0@q6ESV<kY029K0.R0$S'pZW]j!+Aqe:+4X+fAa$Y3ClDej+mscCubk=#2h.5n]e603R@=0ei;$U7WrQL1XqD_[T0GERZ
%?ljaW!mrRqH9d*+]7B1>Yhtg"':dJ].1_91mXohUb1H9l\&'!IkD24l(G]p2q?-=cHU.Oe4\b=jaW4N0;P;Dlr#8_]Sks`lYo^:i
%6SB"p8AU0DGN=osk[R-=8W]@"U88K;CPmp8^kbT'ka>o:7HRlC]7e9\J`0)IVqRnl*PES/%7+o+lWH];U%\W%(4[jrSXFALE)\5@
%VL9BHOhi##Uag!+?K<!VX$(2PL;%)H'`=i""VY$R/]Wql+ZDg(-aR@6FpqlZ[2MuD#%IjXCt;7?4mIBE>tB+<381C,]W<)?$rC)Y
%&_7h91&*M\0\_MCZ!#;TlhVug0o#>E/9bZK9?T'JBUI+W6sh@__A"nC7*N.gL9^"/LbW!NC23MG]46"8i6HjCk#Y[(*^b=MANB-L
%RYEJs?J/1K?qd05/b$F\'M?@^A,^I_CTJf%cpMT]k8BO=*_&:kPI9XYC:W?24XTFloOpN0H;(&4V@k9jgFU(/*(0`5H:6.RA>U;$
%M@a<WZP[1G/'"N:_"YiAA!G8J3"FB)U#%b1NhP<]>QOem5`%s0U6Rd(?=F+\2MEmY2oD#j*5h++Gt#Hn4Q$FMRNokG4[9K+1b?e,
%T?nQfarZXI/4tu.Gr3Nr1"\^X4b>HmcP=gK@WDmjmje"'c(Ntc!qfI514$u;X-gmF[`#63qPPcAQ;p/(\u-EIA5@`:!+Rs<,>lie
%NP,,Z\KYW:+N@6%S`P_W1N=IPDTLA\GJlH%R5/ANWVQZcVqH3g(<fQ`4mH_iG6D@]rPa5"G342G)#E&BRP='HTBL&'IT,^6Se4t0
%SGo#U7!)3p9j1?4ACRd!HoX3A:_POW+#Rgkmq;UpWIerO;9U3(,[%Ag+Uc*DIe:rsc;2nQmQ]W@X4UqO1g$mLZY2aHr><Gn%#]r\
%d22bdYfAGdO.I<U-'e.M?;NBmQp-0;!#Q3$VIP"<1K#/#]n1ipFq?cq:LN&nb)B_(7^?$[1"&YT=PPTN2Fie$/Vr(7Co>QnpYcZu
%[NLE'qEVIug@3H>[JaU"Mb,`e!,*USaqA;B0\K/XQRLSH!7;\O?AUTq$PBMd`T7s)4cH46*QGn;Jt362RTWLlG/ZAg`7],6jR3Z"
%b0dY-(,V4b'GFFR&`nk9<#7Iq(h%S;lr4nt>Z?a&0gC964H?a'U+r)A)a_l1iXq;P>7!%(1)nToTX7!2TI;V<KMT^R$nGSn+OAIQ
%b%JL?bqFkjc.lK_$&XcMA$$TMRaq,Y)l(60UdTYG#om!s%=9&eVc['SIhBbV_Rs"t.MbOFf[q6Dr2,@bJNIul3<mh6W%ie$Z%c%T
%*CMHPLCX>R/Odd*Lgg8hXq,``ii/a-(?II(hh\KJPWT'N$Ta"X1t&R1Pg`fr@H8%Iil"$PQ")/HAFeLAIWTQi`p?(R!<@3$QI]@l
%i2NrM=[_k2/'!a,TsnK+A<Y3?Lq#cI0LT.;RC]V?n>8"d&pON4ptA7WIYW?i]^I8VBI9%;r/]bgA1^V&eBB55`XS0C6s#;-@>5-O
%Xl5kAeu3:HOiSaDoRECmqeE6Wbl!&m,EKYgOI%BCm21/R;&V]k[h`JXB#_a8k@9NbhY7rY+W<S>5"<4*UH\SmjO'W48Zeg+6A)^X
%p.5[b5^tDfT@UHh0jb@'WU`AoqdI2Yn56d.i-YmnLlY-+.jC%KG*Y8Xm?Nt7&ss9R/h15-CsuQepal?&>_qqsWln3[*lP]$(.2MR
%Z&195WsFSn@=3,V3<kaTkQ=<RaumRFI1gZLQMh0$"LL'0N]:Fp#U<2s;;=ZT[3E=p@ItnNHk*thNZl^KHB]/%Qre]JXkdJ.(]"p^
%&&X>G6]'lj&CO[I6ZnBu.Lhd=&bMj:_^Fq'mQZ8&I_bV!E0Jsg$g-cM]ku%0q=6Y4php;G,P*WcicI;'ClVb!?lklPUY:Cb*CE#O
%S-_4/)Y-!9Ua,XKA<p##^;nhUa,ncE^E0/=.LaN\"+QmIk-Ip&(8I*,Ai0#3Goj1&Ue-rM/8KYXlcN9sr>d?H:M(&DhA4:<Y^U>l
%HptCZd/HGY"Hr(po/n_H"E]>03e_eB.<HFfVL^bk!mI9l[P\TH<l#X&$_jg.odc!">$"KQQEQ+QLQ\2qAW8+E4:db8YW/0k;[Lm7
%TL;TW=3U+]:<Btfj=?sh'q#5`RYHdSZh&2i(<9NZWC0%aKR29J#?*Aa(S`]kW^-"W8kIeS?qKA'>_^O_W!)]9dJ&9U98).G'Y8Na
%0\'`d=GmFt1E8nZa:+5i@SDk<G7(a'J/[_FC/"`LcU)YG[Ek5sNZ&5IXjP+[-,(EX<$EJkZ',Gq<#2f(<K#1l65PtuH:hRk+m_Xn
%D9PrM93+h-onFHC<n2nkk6*;'(8]I@o'Y&cW0L,`>N6R6Ju`QRo?&dg_oZp'RE$1.O,Hp"i`o@\UI;D$*[1.Na>1rU@lg1#h_Ka1
%nnVi7@f7$FHg%:l9c%u_67"-iCr*\;`Ch$Uabk;&A^t8('?90RLSFMP4XM`3#I2JG)R]:VXEK9V5E7W\HBbrgF9O\%LC.uQqCImk
%C=SfH<!J91f8B,<of]ZEQu>hbKd@^*9*fm[bW)tq!9Vk$`]E25oM/G(,4o?#EV*kKH>P,B6mdTf^KO3b^-/=0N(,55+m)G;0iWS@
%S3i5(X?pDQ(o6jDc3HL^R%MNG-cVc]:'!t2<q"6f:A&l=959ngaY>SS_D:%O4pO\^XNa/IVe"i,=gT2McaX)P4cg#YH1f?pR]FOb
%",nZVW?>ilp`.IQ'rZlpp`/n<0cECfU'FHEA=frUYuTo<N%C*Q3g^G?euq^`nIm61"PVkf)QIQ"D^?l^2=MD82>.sM(uGilf9f!\
%Zpo9+<(,KRp0i*&/RJHn/PDsjlgsWuW+<lPrrg@@r6q^h1&V!Jo0!#Z*;`f#]iI/e]+hj7fHA5_Qk'80Wfh/!qi+I.GqJ1W`]2AO
%4Y/P#/BMjG0>TUHep_5JlA8F"[hOe\D[H^u.cDb"TAe#JW"^$*P@tDWP*%-5P!=o-i#_hLi>pWJ'\eeUV*KQ7R8M[jKJ=GD3rj?<
%^WCnKJpbSr5E%1XVsu6a`tJI2D]oI9Z13Jq*A<"odpB"T'V;28`n764?-H6C=7AELTmbCp&KYIX1s^f57b`[M/247d.`!*<IrnYW
%&%O=q/8-Rc$;cou(/!m@NIo"Sl&7K$nN5UD^Bolkn2/FXSt.&K<3R/Y;c"VtR>$T^q^@J"F%@TZ(]LNY*EpR,[5\N/!jb;YWl*;)
%='Ea=h_Bj)Ol!o7@Wng#;SaQJWH)?s\'0<=27b-G56,28VMIg^9N^*eX<l)^@Y2$hee\FeiHR=4r0sj=C<lCG%E07Z8i+QA%_uA,
%Zd[p+;%//5nqk[8^*c^tD!a2l(^FZ3X$o-ZHaZjm+5lM<1WlVIJ(RE(/!PH4,Mm!(TaZOq5/WpHR0g=@[GpCd#NO9h6"P0nF^E);
%VsXWACN=7>H@f'8)10B2iI,hb5Tfd.(n9@eU1U$3ku5F:Ud*K`%+!Z$ljB3ej!dH-:O!=Nn<.fQOg64)4hH@D&8)QN;.NP_"peLG
%T5".1G?GHX:\Yn!4["u)SNW#jTT0I36LKA"Ykb<6Ol+BC*>[9UlI_:A-l8a2M_I7;:DH3Tne@Z:`-%90C#t1&;N<QfXhdXcn?5Nh
%"7Il\ZI`aM#JG;aM>&?HdlYPFB\^X0IaIQP=$>!CeV2V#fWOG/fR(=q-FZ_S]lF(RgZ[<q@]`_2gG@r7]@@mcqk(!j4ZsVm5OG:R
%YO/bKpFhd.NRmURhQM-YFgu(+Fm^r/GYQ8PHefutHl@ucq'#rqmZ98Wmb6b'N7&pe\h?B8(m*.T`XrG#o.d->/)+,D8L@5rFjZ\S
%#Ps_`IM)M:^ZpI1BL$kO[CZPFoD9t;.;4\&>O2l(2<\I.!W:0<q0i:lWV"oH@7T]_F%-&^$?ZK?m<Z6"S91O-Z3b=52CSoE0$Wc_
%W],6VNX@srF_L6mn)"&:7lFGhIbc1BBp.6GLV6b8&-=D*^Wa9Eff!$i)M)RAg`"_nQ&j)D@C^!*EQQ0tX5/N%RSE[8r+Srn]:\1;
%5m0J`f8[^:#Ydra?LN7[>PNb/hLX8iNW*YDLUR/>DXTeqqSf&1\Xm6T[IU!alF-.gPrj-#a0o>kFo(JdCZDm2gXthH^<'_@2YIcX
%$_-uBU5+6>QZM`<(V0/[HcUYMIt%(FCZOcuN=B2;oMDm]kK@CZp8#sI:U!38di";pWUmH$AA6j%PMJn[Og!E]hYdRU)VSf+k,X[n
%^<,2YGrY.eRf'>Kh0!('+m6FPNNa;tK>E]*/,iNiN0NT&IGll,-4N$bABu5"r-nP)@5pA`A,;'6Eq+(;_.E1B5!=HM"61T;-V#:>
%[:Nt>7p@ON:BQ'YKa\'pq*3#5dZNsl8a"6,fh8kPb.[8Mmpmf`[oO7#O&[8!KARb'F'$%YSUPQqes*Ur(5a?h0m;1+ST^>VnA7\^
%d"e)%M"BHtra4d\=D8>Un"5^sVf%RpkppuP`PJ3`1kSPO<3D@?Y<INQEYB9Jrq!lD]A9L<LOX:<UtV^BfkT,h/RoaU2UO?,P'#'N
%N(5R!&&%'Z?:_=[*`VItSULO\2,-mB+3Q*ZUX:KX`D+&$2P$]6B-@elSq[1$*(u.-U\KSYJ(K#G2HnFV>.)bUjdH75?n=Xq'`#5?
%8X]SE\j#G^k,1);%7EP^\1cbN7/ga*A+Q<u=f"%qofBX0@t_$OZsKMU5>ANUJ'HDR(Z;QE`j<bM3eA[(=L1QMG'E^V`)G*[jo:K[
%E<0;uRU/&&qHDuQ)r@1_-\[6<,lZtJpfE?q7?O#UQGJ(Q%J1/Up@g#?8mg-Gmj:AR`?kNC>9;IQ_gh"3?k'lmLWS8lG.jUMZ%>uP
%7:/J(q"K>3]8G:dd-aoKlS\#$FaICM./XV-`b,6(OiIE5@TbXOr_QBo*s>j=/$K]5!Wi2:PsN+Rp0>/_*1*.;HbS)RpN;oMI3:bQ
%&*nk_lLn-Smu]b;CQ6K%<kC4em&!<5*"5UILtg+*;5I>8eEg1["h?d(+0a"%fs3W:Zh7M1X\<n-=9o3fo;7+#!R$dt$!=X<bQueQ
%B%'s#mZ.S6m][59gZh"6\5pj<D#Lh,5na?Igtj^YlN;161N&N[n^o,NpG2mU)I8CorUIsX;hfNblbBg#?%%:91;32,1RIdnVo9>K
%.K$NcA8dT2j\_SM]MA:rgrA5W_Ie+)E_Z%K/+igg=g-B1j*n`P;3YK*h5M(92qjnHMq\OhkWU!>2,%.C'5YDpcmt3=1=4YL/Y?pl
%j`YF<]@88?^D/_(m)4@`VXd@LbV"oG]a=Jd#4QCVb\qDnVECO=]RSJ4,I1r3j`\1=SON8%,6VQE<jurg&Rsd93?/KShi.=4-B5(n
%<hJ_Mcm\o@"OSK&ZZr4jaM.CMIF&3Hl-L:6e%E.lDkE=c"GsZq[G1ss%I&9c5!<V,"p']>8_[-i]*(_hN66#Mgf/WQ>.lgU+oD7=
%Dm[T&Fo1R,S906W)[q.nVWu^tR:bPu[l9`U'=Z4[,6leo]'8F=R;FqO<\9aO&P<%$j!-&@dsq+?Wq816Si#[(CL`8,6`V9.]kPcj
%CB0iDIY1snCq:5Hm($UT/QHPZgs2iEiU,*!0'G6.3RG6oL5d-I&[W_HqhY%CBIAcFA".A6@J'DnTB07):nQWP3rlWo*mJOi?oOeu
%lJ+9<?j&j!CbTVUXZ)(fq.kFl7,K@[W%?;+iq:&/IVdS,UHA#Ua-GVRKgCo+]0C!$-613BQXR31;4nVW_[tVJcF9uU*deKFNJ7ra
%>27@-Wb7Bfor-L*DVM<Q;ui:B-4HVTe'FJX\RsD4XXCI;BKJ*;=klAKW\d_36"&)XJFV:_B`>GnVL>2n[^qHie]7j;8rT7dKd^ec
%6J-Cr[<_r9ZGpHmb`$8rY?kei)RX4*33s9oZDc/ccQb/X3.qjC7@P_,@aqD=W;/nNa_+5;&HtIi@C=g[7uZ)thlcsRd?J8%L<[m.
%]'h;tG+Wia*OP)@R]N^'D3TL.(d'Y>pP,gGRg`I4I.ojPKE'58eJklO>&1BUX6kIVU2X,djm)U<[S0TmH_WSh""dMRB=uF/::*h-
%TLG\7lBM0l!GU,RY+e%sLH(ark3qb1]8@44S_()H+1@VD.rb7["!=qmk3WmsoLW0;YWe+(dUrO<CShR<biqf4+YGK[U=2Cq'lPfM
%mYf$mGnXoDl4@hm,n\#!T[.Q(?6^'aJhJOrD`n[=!K2]44G\\bRq_s=NZ0e1Bh0*s4jo"fjmooE:BHYJef+R-e5fcGq_`HW#gJSG
%-gf,>,Y`eOgIC&tRC5?\otaV_Dsm,ISf%pi<%XjgL^7nMWP,)Gg<#1!#SO=/f%@-oA/7(h)3)L@jcK_c&*f7S=GP`;jsu1P_s^Wu
%nBC=0'qYT)J.R.XE.-o_$Dcm"<i8!'8>C"8BYW,d`)COkV+hG9F)`n>'6p;<Cp%8;H0Sp:Y(;t5:SFi/bSZa1KAMF_47k;(c+FJ-
%e.o/Q8[XpZgD%mp$eR!45)"sT;n16O'Y#,Gd)@!n:-e+Slh4::KY>p4SdZ1T'*QTs3AiC-3gU5/`Z-X^!4umuL[3YEY`6V2k3OW7
%Q:SbJaD#ba*C[VFWM02t6b57\2Iq"t&5tgX2co5<qVruM+8"0Jon9YE^F%9_Z7^Xf`]LJ9n(FnV[Wd+#g%PmA;-:I[ae_t2ru-q\
%7644&kCN@pma9>$GfcX]*8e?GDP]?mSiQZ3L_og=c,&>:gc]B/I9"];QN^7YF9A_gj1nqog8p:?;WdW5Q$0QZFP(elL;C"/hXTbW
%81.kfE_L%qM&]Pa:]K]BFV,]:`D-s3I<+d*FD#Z,#;8l%kt-=TabSkaeS%-:IJ6%"$ukLV#[<'+P&Hl%'r*GNO-.J3+>7XL*nnb]
%<H25Xo\BPQF?UVDf5+3pHL]o7OabTrP4/8=?n_jX/\_kMkbmilMHe^qi6Ra$pLq1/ot4VuV^!6k6g<d/QPp9q_\/B@kKG%;IO.s$
%-.=f@]$36oaeLrVXnTLL.F`S9_N'TP3cn1hPkGT*,+jKhs7!f?bf,:LUD([kBIF9Ba_^BS^AVL,,S^,IIZ^gO\%fBM-qt6K13gK[
%.F:B&*h+4:4<&\V-dLRrL4d3W?0+`bNO1<5S48.bS:eY/__i88S-,Oo%V,=M95$[`ll$<oh!nWq9a2&V]#m*q=ZWM+3O@:uqdo4]
%BGM!]h2pM\S%&?>c=g%hSA%N3%;KsI@3_7Gh1>IM(r2ic2o".X.N/hDi],R#SA1C!#<b'^8p!n&rE0+.:Ih5l3bVo&XCS66H9ZWl
%+6?nWj=F&3O2:"&^eG%+HIP7&.(GO_rj8u^r6C=?cu?MdhDZDGIIR*d/X[$9.S$6(<l!kI%BF<Aj,Y.c5u4tAY2kN2TEgM/iT=eO
%7Q2aS0K<klj$*=mlK!m.h+P0i7j`kC5Bi0\;V/p@L)qH8Enl.5p6a622rnRml_Yn3)\))!?XIB.5pMlEn*XaV2^fPt%9rOuGWtPS
%#<hU84*=Wsd1Esc:!^("kbHb+"7Pb[kjZQGZl7$"I*5H(I6-l\U>>kYH8%/=BtY=n.=24RW8FX_C$terX;dCaU9$6K?'F0i#*o+Q
%]<?576-jumWNX.gNT$PLjA(e5V=@_6Rhta,cu1]'Ze&Q3GAe</H?!-'H@BnHe3RqHc*2CRh59G0`QuCk`GEm7s4p-D^j+42ctRRX
%b,L"\_mS@ocSnN&]mDus(mthZmCtm"OOQS<=u=-'*bF6d$EpXfK>(ZAT:$2cobajR-A0#DDWuWk[_9[r^&%#<Y2cd[iLoXPhQH+9
%"(uW"TahE-9M;FqrbSWVDE)=rb.HV']m@"qd%F011un>o]/"%Gkgg?*c09]"Q$;Js_Tn;0FF(&Ls2T"DKL(Z@K9C,eIMgOpm-=ls
%p9kKs5tAtB">A5>FhEs2h)K*E0lT%q$9a%#m?%JT:!N7)1G;ts5sR@WJQVJb,D*fS#;3YM<p8e'Y#*OL[h>*eks;c_K6!drK;S;l
%*JjA0gV%=,a7Q)gr0:)(c#KK9dfF]g=8s\B9WaZ=,L]RP^"n/'-&h7iM&\^-/-J"XAl!pQ:Ht@Ze%:;+9%t\:#mRj41/<O-qWhM]
%W:#*[(3jK`*e)0%GIsId&#OQGq6S"tH?TSj0k'h=_t<3GBDHDboWBTY5?3^2.QU7@YBqgf5+S`Z2j1%^Y;`JH;j4hue*YV:gED2O
%A*55BHhqoh`RN@+?mDA[><+?[:%-q1Hf"qumL7&%SX"VYl-oA[;W?'qmYCBc\n,tbJ_8R&h`iuHqYO#Y(JO:@^?)+KZb$?>Kk,E0
%Z.]$;6KmXLoPV'@.H\kBDEG;Q??XR:[[e-d.s9==c\:D=JD"5U+`+\&V@X--qQkshCt/hn;Ff2_V8D_(\XW+0kjFa#:3K(nh2pe(
%(eOgg\Vt_k6ZgLKs6V\mr%,OZgNE&U."8`246tb"=Neb8KSeA@Hq<'NDMqu'jLhBA8h=9!6J:qfft!I;%Bn8s`3(X%SouNS9*A^a
%/'?'U],/S>_^"!m4$7_*7>L'><cY^Ah.-41:U]2*`o4UU&'l/JO%lkj/B5c41OI&$m<qL5U@AFiik'epfp/`qq0hm5:*odg%I&7Y
%1X)/nh%>"^)qh*XnI8pi0Rk@uGI(%:G@8]Y1FO0NZXHM2[c6m_dWS-;bk%T@4(<qE[Vih0FuH74b?a:^UM&7iA<V3h`"n9f\6h7B
%h!,*-mi:_bf<*4Oa''[V+OmG34mnh?Hqi10ZQj*$kHY!/o6QXKh;&d?:[K:YaDN1A)[ElKr'R/0QGfrm57`NmESH$@K36<*5o%%p
%NQ9CWp8Ro;fP_d2gl\L*mSpH\UYCEX!7$D6T3F6nQs#Z`?,t:Yq9oFMqNY]6)fjW0odZ>(cS&WFjE8p-`(&r_qCn?Xjd,3(*oFN*
%GHqtBRG:ABo1>_KRnYPZ3ji*a@J>"&Ir](\+_n25mWbUqc/-SVfL]Q"o=[RR-p6q,2A;[]!VR#qHRtkY8mj%E-8eCn&>gG!V&cKb
%%<uam??OW23105W$qbX@l!^Q7]]>`4M;BWgKD$`rr5(GdRJ@9).sN5;k##L.<qE-nF"9/hg$3)G!O"4AINb94%Z.&.O5&&miAqL`
%7:C62#6#f9pilXpbhDY?B9!WoMKXtj1#+iOb3kAE(3a2I5.^$S^8j.k>W't?7U0ZVfbSKb%m_`8DhuB@@j#Do2u?4F=4NqVU\o:r
%MupjI13*OnPR"[4&us2eB'K9?]&^d?Z4H@pBDI?mD3=?8.&"hG^r[]p01404($IECRL^5qnaVf=BLM19oR7RE*2Ufge#NUINM^>B
%\R!\+_-3)f%=+g@G:;:48rr-iZfR4trYY?'(JI#1E4P2E0j$%_Y&a-#CKgo\3u^h1'nn$]@,iNiJPFo&6J=i1'02t*ls8s+IWCo*
%QIE:+IL&$Ur\Kq_fqbYMj*^Y.C&ABp^C^S4NYB/IS$*X\9n1:a5Wnt0$DsC[KA1QDHl")YNF:<$A07LNKcmA<?n)5?p_XDi"AMH@
%0*#j:e9:ERZO-\4D-R)bkfHUN'8Qu\+oN*>#J]@7#T!Q8!CsaVib0"*I.[((;"jY@1<X[E/Bm6EKnpq8NF?jJYmhr8(h,`,E]qk0
%.brpBkB4;/m+pe\AaiV]hDmQA<'JG8&ch.F'`2h%i)]Cm2he<W*CF)^o=f&F0*VtL:)#>4"#4MN'9h0/Kc_6)L:8]n$LW'-Fn$p6
%S1lB6n"_M36u:FEUF@)%8h2msXesV&4&f2capO5:cK@kSj*R@*Z#*JUd8DW??F";!S-JUiS>23GKGfnj9t_5oL@cu8.96Y/=*:QV
%g7o9_S*J>^`#atFfaFsbU_,AKEFU%]QA^]I6?Q7_dF"L8Auti'JQfB)ar?\aHmf'09^N./l/_*Va^jXa[I743Hfssqo^Z#R#LY8"
%a`hgl;8`?SACB#q5ikRpX>H)3o@;Km*Zp..AXq"*[1TP6XRFeTEP9WZSD3(K4dt:sMLEMc>Wj-/G#^RWg9o<&"MFWpHCh4%loaFL
%'OEs^f8Z-lf"1AakH\t@_+STpZIDLC!@*g1<DgA'9K6nV7+GK"386H.(Cu^-d!]rd1IVf4aife)h2IG`$VHo;RLBFPo%)+N.\P;U
%0Edbj)XJZ@X:.CP=_cUt)s4Uj0fZH4.<J$L>fJ(^)LJKaYnh[[<UC6\%3b]>WE2-?J76nD*QH_R*HPAIF%K:8Z"#E[_.Pm&WlFY1
%&:<3b?4Xu7L4$(8@SP*^kbuC\m;Pti/n?u2:2+,Ug":+k.6[A@RM&)7N@2]a=#d)L52`16Ba`ZhWG\:G.+ND:@hT6^R%+XLh6:c-
%>[m?Mi=fOQQ#u.EHJ4]</q25"=@3>l3qLsHb#o&[S!2_8VqFB@g\H!E[9rtmVZBId9jmO7[NMa*jD=ZL:H#nKKj(dDgp9"pf9)8D
%$Q,;b]&h3UffVGE;f%EdG'GBIj1tr\+P\U7!Rb.1;`sm.-&mj#`:BDd;jbL0(QjV&>lJQR$VdZNnS[O/?"d2i2),XCJCKFa$32N-
%S+r0^mGm'Y#X8fhc^6MY/i5pkn%$`#[\WXD\<V#M;-X\sB'i"HTPi2Q:G83frarBQ8_os/`Ed.(&=[j;/Ieu[O+3I%QLS%!c8f-C
%2Vq"/=)jo_;')6lR1jFG3/)KR,#XA0cVO@/VKP'V)`X@o[X"m*P&bTF#pLE<nftI`iW\]?/>l"cg4)nAi9!@>dd6&Z^!jaCq7',>
%K$.]%<(VC`*N(Q8#Rru[99nH*D8N-e(""Um?0Ucoap$!3k$AkB%-6n5)uKE])4Z]U0#I\1PSuVJ&#N9oMBlA#8l'<:;ps@r0W>q0
%C[-m:eu,G8k:hcqRI2V9T=9BN&)1_QWRK3o55%f0-/E,6D^Y?U+T"2^dHUR%"EQ>/hBBR]AB`)=AM.fcI;\F]g.jSkPq^6GT$Wo0
%o`Ecta*4@Q53uL)c0_h1_"5nnh&A0,4Poa*HUu3bk7]R'#m1grWo:DW*coX1`XR*ENE>u)*dON&qYi<ubTQWLp+n(>F].Ss$9FZ?
%6du/19<3`8-8tGE*#E%O:(*?or=O@\N"oOhB].A?IFG=`3]?0.[Z_jS+i-_c*9e[Y\(!sB4F'r\(k,[C\B.M.NJnDQYdhOPCGA\3
%@#c!76;Hrj$hU_7>6Un22s]@#('t_!$a:>d[IGf^^55?W[kVJXP=s#a],ih2f!NKkApKBe00h<:VZXu*HkX;-)<I7n)r(-^(P&5o
%i#'Cq3PpmO(Q*HJaGmOB6<H&8-^/hZgO=FX>AFuTRA%pr@$F*q7lf7h(VKq$'Po\j]^8J@]bVgsj9sW]Z[Th=f4UVh_s/`gi-ff=
%hSZ2afM]8(`aY?:E'o[5d=tY1%D]jSW*$JgNA?n.F3/F=KL[TBSDJC5%q4;q4q>I`Q=#(V'$E0@:B\lr['Ee'%WfB3YtV%U2%n(Z
%0oPkG=5LGl/:5[l6UKA50!Y?F!utnnIRFMo;mEFh0T1g"UO4[MYm_85jnSA&jnHS2Z(,e'F%[RZ9IBLMAZXKR\,1n\P$)2ciP?YC
%Ir;]h9&%=\.8PC7XBk6YXB4i)%i19(B)\fEF@XnsM*p,2O);)bccjuG8@E\p9_JsW_[kf)f!Nbel"];P'@IDP,5(fcS?n@RLWB(6
%r?+m-p%t.nfEG2F6&![l*eVN>=":1m>GN@T2s+UJM2ZDc(!/jhS]Vk[,(Z+QBGfkkdKfcR'cB@SKs^m$09LOgDIobFYNKNOcV%+:
%f^2nCf?2C,G^?K+5Q1(hl"$/U9W(^WQMZQl;K[k=U@mYo&<!-8Sp8_d>bo'<hXq;I->.#V:WjB*9o$2^Gdf],H91B]MSV6,pH5$I
%$E)51Nt0M!<s_'<E(u'blO9o)L(bgB`8Z!=OfdI^=(*[`W5s@Nb/L-GllM[KHZa*oQG1$O:dlC&1aO]WcC^EnftCg5>EuRX_lq3c
%[c1$+(>E.9hl+&Rdk8E(T;m5qDcoWl3SFq^+$Ql*4.C<"AKnoGnqR'Sf]-e[g-4Ct2WQO:Oo%GI[D2fG@BLYI]Q$Y-ZV&oe0X3Rd
%S3pala;]I#bY?A10Iu3IfPm5onj:PeK9CbG@sWJ,aj,n-j<C(_5EYJo)L49F1OeJedI(*NO=M]2q;kq^`%esm>lD!@>m+Hb9o`>Z
%L@sq8Ka/+?q6O/K-QIrM3N!5ac)4WF\hJI)E*orl\EgDn)EYLVTJi][rG^W?14t>:GoTe'/`[sN$/&H^k('_48@Mr"*OJ9Hd._C#
%Dn"jBY62i>jP"iGVddmWa2m:lV7j($"6LN7OjTENm[0hZ8?,^'OZC(t=[kDMcT#e=Bd/DfJ>mhEk_qTWB6%Tb;LWrsb1;7rVNV)l
%1K1Nc8clb<?uS^6b5)98Y5AcR>n13Nn#T9ofN+E#nE.3,Ho^2>l1(#imk'W>ag:ef.oW;[6M%3qK7LB6!,91/]W,nQKOcS5_C,`s
%B;0r-&;VsDCef]?)upmsZq!pDN2'tS6r4@dQ&h\'H41\_iZ@m(m,AKnXQ2-p\!%lbP$#`.T7)!lY]I@&P`K.g<4lcb[WkKc37AoM
%.D25mb=ZG7_J=sb_N[#)mlZf>b*"IQ$CO9*49@7p*]Ba!`'0sRMU4/S?[3CO296r?#[HWQggQF>E.^5BOe["kVLCZQW`.2q2=M;`
%qj>P^Dah=`@-Nsl4@J(%R8i\*:=KWBq)'Dp25ca/)+mt&1kD](P"Vo6eCtE'qG'"GlesJXjOPo\l+js?fW]mGMC8"_(K5RHPs-_Y
%`VL.=7Ie6mZ7^eH^6='_WE.T*Xh[<0b2H#jX__:bA6Y!$3L*Z/-mtq;)\EP:R6Vab<-/rWVIfC>;,F8M:%N-5(H0K-7mBIP:p#)p
%$c;!7o?i\,%%?RgM/$tA&"9C(R2hDH<G&Ibb/rR(W*OcVD]bjPaWP2'4tgb8O,imBIVFVc9^T5QN0!Y1qO#rJ(]m^_b3:pPU\U,i
%[ZO932&d+fRZb[c311Hs?f@B8C9u0_rFlYo,X;Z%VO<YdA,hqA_R;MfVVa'lk2pg=e0d!'SCU1)S0DWA1tak3A:O5Pk<bB]7Gbf)
%k,4Y#Wd^-15gA7N(XB%096_JfbYM=ppF4@dd9_L:=QN^RdIK%6+9Up6H1KX9#-mrDF]sU[ks,GnEDFV2LHMofP5$!s>*-6C!"Cg<
%1Sa6Z"T^TZHe=i\F_9QZBP)piYO"TFY,i.=ba9Kqeb*sQ5IM,GP9-i3BK#kTbcO8uJ&K0$eP?<W(+!,]Q-fGS(KP+fgf53_:H4#"
%k]IS_fpjaqeT4QP.@I]m(-(\LMnelRlqn%0Enr(q[T7ZW&*?/G-jf":jl,df?S%VhXNcQ/7C3)elm2"o&<:\(4#:O*/9IJ^XtnW$
%."oQSGqPE,@lAq+e'e3;=U@5O$:,?a?*ZS^LXp9hjk2/]0Iui\9St2(PVWL8_Dl#4?m_FQic;bCWhI=5d,fJSC4&4^Kpko3?KkYY
%PQ7*F6=DB=NKn4GBQ<.HigEEt[@@F0?qZK)Z#9e(hUn*QX*f3CH6UkYBsBDe3Q7;LhD7XpdX,f(P7_W^KtbnYJ!mL61riI*$[oeT
%0%2a(phSW>4EZ%OTUX#Ndh<#$lBVZ%>DAVDl^Q*qi3,(@HShj3-iNFRTA*l0UJ_!d^e!(FS8JZ[W\Zgi,I66"*s"*q#n\s'ZWs%U
%mm57SOV+O8c&J&hGYBT@B4EMd(AA$bF(u@??Cp\*)J@dqPV65_!G/i+L%DA,bEet3gm-a1p$FJt^p,M.XGQLMkNP@a[oFHG@4D:K
%1!:1CU9>OWR08OaJZ>!]_6uVIj5dJ[,hDVejNKsZ6f>!Ef_H-1R732lc/"f1,2f2ca8W/1EN+$<1(1c0_6S=]Y/b>J=flUJB1$+(
%pPeickriYWAd!QUL@uEcl?u6i@X5=>mjr.H's:Id'17mh]9p?kmQ&5VUl(@7/=/<P3HO>i@X2:Vn9W#.!F'e3B;s;<jZ-dQGOhP0
%q=9\XH,`3<bEpg+QHL56CH?a(!m=1eK>#$%jX1)`_IAqfUR7[?cUA4EkD3]=er&H"bO:)&lTU<[10k:#=LOr$h<,2B-7p`1D_9t8
%q[$>;X`C&Xn9^'pmW4op%5m#Ne9u@>ipR!K,[Q\G:W:pUlhbrX5Ip)DG7O'Cf!N1WVX'JuY;4UQrMD+R-tQ\Zf2"q%eAdee%PO2A
%$AI@a`t`83,N]4HQu%]'OOpVUIJVaZ\kes!%(Y2O4NA1II*i+2T<DdNiU\\GOhBmt"WXmFG5nS_'e")E`KnXcNZs1MGgf<Ne*Z?f
%k?uUh]bupNj@.V*YG??tCdk%,\d0&"3LeLVNHsCj?W=^C&gL&`W*8qaC7Ffr?<"%R9f;&1l[Md>Y+<i5.kdpR]r$,T>*aV7[HUlG
%qP%`\CT?>=MI1U*[F(JXfDhR[h;iCt?[5NAhXkT`a]a/R7Feuk;'50$?W=.S9f8u">P!cQFg%d!/@Ai0;71:<GWYUP]Vlb2TQs9)
%`2g-!(KF7(+0>csSM.!L1iq<DN7-cUeHV.(NFoNVMlP#KVmhh6?W>9S5X+80iEbk?e[k`lcg%ko\ThF[]hf.khi"M:[gK9lqaK&j
%--Oc@WA`)3jP>3<0<2J+[p8SpeHQ"1IFIqBalDsn#\S=#*L=f?+?cKDlkiaTE<C1"F^fJcJ;)Z<Y<70V;'(qlC_"59bT!D1G^c5f
%SB^qS#-5trq8M$Fpg?h=Z^66qHB-5"'ka]_'iiD_f8t-m;4c#e-&S&>b-O*cZcsW$UsmJ^31ITYHC]gAbSFi\]ZFiLnnd_6`KeTP
%3BV&R;',`-Cl[LkPq&+QcfX/+VJG-DcfT[lq+Bc%#"[5[B:J3@$hS+8]4`J/(+de_lrpaTloB=L/^I`'0.W9")a\O*f!#q&=DGSY
%T%.OST"Xt>fQkWG3Kt!GX\;BSB6+c"CSM3:<k=b:B.nJ/q,DVt#:RjfP8>Xnjs\M]3%?snT$:,ICm<P\@!OY#EONisE'378*6$U[
%=Z9!=B.j_!"Y1uQMmKPLKqn"%6V?)m-ad@TV/AnhCtn'pZY-1HO>jmoGrB;HrJK^if#?=r>\dGW?(X*t]i(VhG:)e(2EIU;qt=k*
%>4m10cK9GF3-X&c).V+F=Rf.)_09NrA_O?Nh:\er2L^#Hdb'q5G;f1eH7QZjgIQsf=%CN3d`a8oo\J`'Hj@2a(8B8-C232jiR_<#
%h:[NqF`ISG:QaU#=5e4t1628,&u#kMr;7AG=#"T5;X9c%`]:\NCT&)BXVLeoMK*]nXg;Ja%4<-9</gF?E4B)j\2NO8pF=1.hIs->
%`OO/:iFk@hj0KUk^JQ^LWN\002I9J(\6:=$jWq3E.`Rg'LYZDSj7=G&Y)75?:L:bYMRR&"++*sWMK-PVqR'C`o:JIU9#^RI<SD@k
%N6fZf?!kSG6>$f]>qp6n[]Hl;N3B-3af8ftJ\%Wl.`Q+Ai.%S4HjtF]ULN#u07?p#(n]Ml^K*)'a?/^SY8B3DBDn8L`p&>Q!cN1'
%fnsd=F7u0fl`V.4;iR&2`OKM-o9Z=+>VV8Q4u8I:>nuCu>m/a_2NuRr`TpisW>ISf?*(YII!p?X2O6LQp>CP!Ba[t#gD2PMQE;"U
%T@rm!($"F([B?iFHrBpM_gVO<&f'H-S9;_V0lH#riUuKY#((,G7nLl2(#ropj]QN@q#!95>;<j*IJ;7U5_^q?=C9$,]S"re?[BC#
%j7nYaeT84^=,cH*bjSMigT3OMCT&)BE1"EFmorAMW#/n4Co@Lf`ohS;elXY%[.-`4podYU;mC0<#*<t.N2pjs=l<T%$Wi:.6q5a(
%0lCAFrBeI_`P-%Hn[^3i2-%u8%dPDj`g8dGE7'R5Ke2bj/&i%DM"l[]EEY)=\'B1B9mQ]%MK,-7p_EPhXV`F$RFI2q?H'E_A7Y'B
%j(`+XgT@tR`Al-.1O[7@\gk]I[%HkWJ$3>:,1D!8(#o[m5IP[Q\B4PVo..gniA@HA*,<CM*SeD0*NmtJ'AEJol>X-O5jYt[_prog
%kO2E+cX4l,Wl*A12WsO/LTAD&ZZ#\H?Zik^)m33NXM6f$S_V_!R+GR`c<"/`C3@%hZMp2j__!D)f2<WlQ>%#'s4=9ge_4sh?[eb2
%>S.;0k*SF#f;c_g`DEh&I\f*\/-gX;e_rP0k*N*coff50W=E:mS+>]ALG)LX[R>95gp`WQXZB^h%::<WQb,:`?*<-j1Y,MGDNN9E
%$e=3j);T)3%TgR#(3LBC<JMMr8Sb@:B<X1lZhT7>E"s3JbPeeqFneW>n#o]GoAu%8=rjcj,5Ak:nCai)hl%$WQ_V()l>Wd0ms;"O
%e_4u#Ctk5T_p'=4hWf'f2Ol.9GhMA$PO-+C=,3i^?E*)^Q0N<'d(495elj)s-6q36^K2Fn\sBa)LT@iAqE;:4l>UebAt@K27T+($
%e_tT=ZGu0K[5NEGGVOPfpBl.Ji76Y)/A@CM_c:4dkko4s%Tec%1%F/$%_&It>YfM;PV)TEe_scr.ejsnd*#ZjCA\:Y_R4Ao9nJ&C
%a\jBFFn6FEVB=Y1If\c$.IB&if2]o8H)cTKm0tp8ZG(7[2ZS=5DrA0@jW=O>>:KO?UH]K?Ti0/RLb2`OBa-<Ko.I*f2LG#`!bZ[N
%/^;du?YE%gP5*=fNb&+&FAld_T%@T^VZhuLVlWtUUm=!Zbq.41hn[NAn&_9p_b+Q^G@77G3kp6BDQ`4G];1"GVLPJLdoUu+F*=Dh
%c%P][<VnE1F>Q,eS4mk@-sjmW8G[B[n7EG/VrO2EdrBgXX>r1^(*XY)/*Ul\,:VeUef1E<XnE+kM*SF.f5YiJk=g4!1]U8,_`J*R
%EtYrV!GJLN5k2EcEYp_8@2(+r\$@@qfGR4NK8e2dF&)+,E%Bf.WGLMa_04+`YeNS,i;)*aqKK[12]<5[0gjU:Ps28EhQ&uenqDR@
%IS6W2?ILu6cY:Dnl?VE38d;9O7OPTa^rb$N1nCq-[6/%M>#;lGip0GhhU/<3\);7?,ainDqA2e:GoQWgK?(HJq@d8&5uXMnU7t[K
%FhH]s;(sB(,u0uE=?OFS'Oljc[6VsPlGZdtUqYbX,3+%1-VS9?ghoiFn&!/TYp>i];5<qa*\/NY9%S@:!H!`2B_:I5/3mpN!T>YZ
%i\\T-\;P`N:90gm5++K>i_I0/q=Go*GIK,Q:^!#c1[<LYGaEa*DY]jdJ-R$+.5mON2;R9W>F;+%I3#4S@+G*1#qpY*#-D)'XDa.O
%.Xd:eYA1i!*\6#mCk:[;@Ma9pM'!<L4^;RReq-Z9I^*[7*7EhTCma1aatbPk921IZAKJ5!\]=!fS/a[1eu%kmiBspqQs2ogamu]5
%+so=gRuN1]aLl)Uc"H=OT<5FB%"S*=)6V]C>qnQjp>Aj1@s>W^[Ad*W[k,MT?.+,Kq31(2=ANc`P[?4Zl)O:XWn+:f;gJ+>E[F(=
%mmNV2JRJ&oH3:m\GD'oLb"VrtPUEeY3X?^L9p8!Jfp<,.;/#$30O2fW6:YV3XXN=ZG:e$gN0q@q4l[%7\Cc';k3kgS>Ni`$q1[J&
%\p!1&)U)*D$nX[/2k;V^I5#ts-.K%MF_I'QY`-k)1ie_!^'k[$1^edMmBHhTN$rV7*1MfHHW;V$E(`s2r:2XN/2&,Qar:jR?;2ZL
%CiU!l_*0O.nVCa[pKC^PcNV*r.[F_PDu&sADG=Ia4[Yfg^G`>*jjumOYMg0iXBM5HQ5A7bQ^.k=R#'jLn#Tlg=J#%26J0gu.[J0r
%Dg>#4SQIdWbCd3)k,qrhXeb]BV.)=Rc?&=JF^a*Hs*_+`\Y!j2*[p!;MBpIrYOAW=eDdh]rignt7-W)5FuhPf8(FrRR"Y<YCYIsN
%?oRTO]fYA%r@48&&BqW%q7M09N6f@1"@%jeOULbQRQmna>aWgP[;h^Nn@5c.ETS60UR\+pgkq/Iq3F[G5"nW$q'@fRld#78eSA4/
%@j8>i;i?r$E+,4/+*me^Mcc1Cd"6Yg>f^P1[U+_`MrVX<A^#KS`3f2`S(KY?O!A+O3o8pc*Q@%EE6OTQQ2PGflrLe_1#*gWl=9l8
%.c%6tr2G>;lPFhjqjK7+WjjW<qX/lYEW;8mi0d\=C?<,q7Jc-g=))fa1"L(g0ZdUugG)2@F*1igb6Q]:+'IL796M*S1%g`ZF$X@E
%RKJbSa&O"'bbpW#_AMR5:Ld_Op,IDk^3<6a='hmRb-c'Y,F]b`KV@V^D%6pM?>!_/G^gSH_i_XkkLk<&>dcY::@#1[md]o"dtZn!
%jE?@Mc2P`C>9pIR]\esDhq_aZVuGBD7Z+aKpZQfQf1^UB>^]r.Mt-SmbN[>Y1!m[K'L)u-p?g!$jnS9B`9hl#cg83W*lD@:Sbug"
%@<;/:Sl2>7Zfp*\%"_]DNF'<-n+:OH-J_J.lJ5con'Z@NZdm/DKTDTid=6,>0c1lXnrDPXP=p[m^2EBcX.bbbp)bCPjjLj/5M>C/
%q+n/s4pQ_kZ$.o$4<iR$\Dt-"pk$&$67d"4GA%:C=l2m')pN5L`M1D@Mf_$afV?F?A>Q+8R7"ZrB5ld\6(S0fdcNAKEl$RH`uTNo
%:]Z:]W`qD*P]mJ6"7Kq0$efgQ5<$S9D?iMIceGRo6)km7Z8is"<u63!+<#b)[W]-N&,E>0ZCQ1$M^R[L+2tS(:ji-q6<9@pLo('m
%0bh]qp($i1pFs-k.f&qlQHid=A,:B8a+?O&(O[A6S*-8iU%#?:7UK):l)\t(O@o.P%s4Cj_BU^`ZC]^q(XJ]i=qg2OluO?enem]@
%CedG8YEu86pC$B9609tDrCClbHkQf=m\fo,FrL%UL\pM?4Ebs5^E2=GMn?I"_fPWmn(<e4+-+%7mhj?c3.XFM/ncJGiY@*D!/[q)
%;gR-=<rC&fm5B84o[i<#(\FnAr@S%@)"5.r/84VtF`?&Z-#9Ij"s1%ub72RFmXO/0:!TOT)l^#8Z(5TopB,mEn7,\&>eaX&0i,Qn
%Qb@`*-&j!)aEW%R!;SG0rNt_W#MqA0l-As;9[8ISEiM>4<7o<#8!0f!>HMf2VNU-"K]4X;7atc8$ffWHC9Uh[UqO&,Ps;M5DMlEu
%c<)Xa`pUcOc^+_SFY!$-dCi'sXtsG<%rZNR3]IU0V0)..$>YL@+7Ig0i+(3!5^'a%:hobIiC&`OJ?BX$I\[GtNWDt0HZH60i(iBk
%l#q9k$_?)T'#Wu&T7f"+&@WkJctMlNG4e$#;T&BZ9c!72Jm+btg'IP#PT$b"d<%J#%RQ45']d>_5$,d]bIugiCk2sTH*XchkAp:e
%/g`YB2mWALI_LVsqJUY2X()[.Lr4?jHLFqVWZFK9l$U-6[(^(r!CuGCDFt]]Vc!$WVJiIVf+(0.1k:8jj\4M-S.:7bDRoug:*6!o
%:[_HRFOTE3Wd)gT5L)0':,;W??r->Qa0P%'ln!.A*^<;1B;ob@>-]S>I]#t[]0A9H0RiYW7FjBH-BY4If<]_NBF^iXrmlG)](pb:
%);Yh#!WTeXjB]6-0=%!j-t]NO"#!q,>ND&7##0<@f1;HBqYThqTBq2s!?=IgTkmG<V!hg!'Rg\97XE;#=i%dEJRNULe(]9M:'K,D
%?hcM*N:t>/1Rjg:>s+\M1m:.gInhHD#YLZrWPM]n+e.H\c6%.E`$F75VaQZ7CikhE"T&ACA!8GgH7kb<%(D(l4+-]/SpEI=8_sDC
%dHV87*nu>u4cI>FJ@DI"Vq*LDI^)JU;GZ++DXRlbh8uK$O!fA\N!=i8[W9hGatK['\p0c;5=u`)N]VP[H_]giVpp.Ynp3JDO1F#0
%r)V^$Pg8!0=&PeP3's2O9GY+dc)8EaZ8'X;@,nstdU_e`U>0P4kg21&5#)UaY-Rua:.Pq1]2n(h]_e8UCH[Y$S!iU:R41R>,D)9B
%/^jAr([)%j^(:cqpj/(YQ^V5^7>s[05$<1_GmN&sc[K;e']XIOo-&CNY27@B_iqb2EVCjo4fT1tP"LX$n()(4o!"T\\4&869G\&f
%\*7XOr'p2hlS`+%!3sBCW.>c!aDp;",a5nJNKc#6n^u.:mQL;BUG.'#rd-/."+r2I;uV>.5'a"'o"fLDg"j1bo*W+*qX?J?^s3OL
%;uO`Y'QPG(PM\NI$.*&f>)U5</LBKGalZ::!.Xfu7V6:W9TQm.aE$E!HD*<2JYNf@/XJ`t`?VjIM2Z\kSbsW&!fc+TOaD?84Pb1H
%8ss:4kTKK2N5>-qfkU<"*PH7O:/lOrhA)VTjJ,Y>%o/]l-o7XM&m*=g/(&[$29:c-MZP!u0Ot5_^"%HnELsgjALjTn=RD&d[.J4r
%U"mDXk_@>bPj/eIi8j2oqHGq$TVLp'Ek2@N^=:SJhp!2sJ6q'm=r&CS=Z_k5?1m5ZZ1iOWWu,4)Q?&boopdV#_ssMsRF"=B?Cp#%
%VZnLhU,ogA$BjkT.aYfVl@&s4oP:?"=aC<j=VhSXeC]Go,>OWU#%=[D>H)/:o9d65Q&!J-_V%B<lYP3ha<.t_Ng_)`?CQ2BNda%]
%PT$8P7X#L"4X!48ih*j4rb,Arj,WIrG4:fB4)*Rm(,KZ3mmO5m5'!_r3_.`#kacqX;Z=2]N[h3O^?AM['6G(UBYl`5I6+0EnV.=R
%K)q'G$c%6]e::qgH7XU!99e/)am+L[f.O\E)eh\M^FEmLMDo[TE6H^YYUlsUrCbdQGVq8E"=jW25:(V>$pBN,0S"oe<FZ>lLKoM!
%r`#kgET$eWHg7#)Z$:3%+VmTHZ$>g"NmW8FYJJo#E:p+*rK=:!n%PD8^'*n%$,6CY=4>d]*>e4M;lT;qnU7uoF5eDQroG2]"8\-c
%k?fhCR%@Y&?sK@oO3jucZQC="4sF:O"i=^A>0TdY_KX93C4E[K%eJlsDqb0GD"[ZQ:6ZjJ$U_>#F<YhbGp8bC[6Z_W4]LXlID=C.
%J>(/_[NE-ra[\o^E:W//C@pkIS<_l,>t_kh,#E$baHZUp6n@!d9R@H$(@oPg#;HDJ%ar2<L01scIu0l]\4X41d4Q9"L/S._4m@@g
%H&HcAmqWWOC75EE!.R-'rd8eFH'2KEaV3@VLsG%MK6u:ZrS#CpMAP=>?HrfTgU'nj8:M2B/AK]CRM>X<2*bh>3?kKl[3OOoX"VTk
%Xh0k$rbMuWah>):Phl.9@db^kGFJ@&:@CgJO7AG355K)n'!ei+\ZnGFam0OM*qYu'jpP&*/i8FoZ$@Nj=_`:["p.Ms,GU1EU&<d(
%GGGl)A6t3B0>%_.SfU`jRU]Le,WtG;UZV5k(;V37K(e[qmoF2eIb9`7cC[9UJ_SIHG3g!X;`>UhK(3fEE0uG/n,PVCVnW>qW[,>a
%2R@b&DbiWL+4SW$BmiGDM7RdnNXgZ=X`X!1pHWCHnNpd]k8%Ke=.rUQl8tTOcM(O2Rn7G:^BT^2AL!?1dQQ1NVq[cV(J.]YXe2V9
%s'TfU%h*?>-nUF:!8[0[B5"/YLO8<[=H>kch/(1#a#m4D1>X6E[fjX-@'4jm3:X'@SfMaRVu!V-?0u0\^pE8rrJ6rBe:FMuUIT`0
%&&IC(A:1@kOhbDXLm.B"RWGs^@"Kb4A[[W*<\&S2c8?Y3_mN6/hR$O%DqB*-n7EH\>)>]:9Q*K@NHo][!q/`%_6`;72&4J1!e%FY
%d(qU_5F_j'cDG\MW9h"/>UtHon3ob`jTk-Aj[(?YkhTduiV]DtK7+$ipA'/m=G01Qn2$s#Pl`uA,LHn@Y'@mUp$VMLWd2#0ng&`$
%TAljIJoej!fsaG:BR6M5BVLcS4pcuF?453<"mj^%Cj6.[RG-KqV./d4ANaG/`JG=L6D.HNDb5pX+ZM2bh3-*.k"5E1)\1;,s%O6O
%na!gL[J]aHlN+]7Wiu?fpW3+VGYbF=ZPr'U+/V453+\5Nhu2^snN(mj"Bp4>rXd"%m]hCTkJf0F?B:qH;7)o)9AVbTh.63TP/s=Z
%)21VUGaWO1l4E,G21Y3e5]ar;3[lOCc):1r+EH%@8n9M5.;;nS1TC*8'qNj+;p'$&k`c?KSs^:a*dM<(Vs,uEYDE#H^6qS%]feXY
%Bm/sF=!BQIeZP;.'Us-?HBUX5cP)D1OD,`4pC%;?km24O74\nEo=`u)FQd%%K@T3&Mo0FpCo[I(eG<'/En<H$1?JE71o70[_>El!
%Tf]CDf.%n>APoJQliR5J!qiYmTGs,sAc.Yr(kZsQoWpNSPsL+95m8`_'c:'3IE"8lYd3qi!gO1_]&,*g.1n?,]]nk<S8^gZ$Vm_+
%RsZsE?:L;/]$U2Jfp(?8;Zci-()!L.Js/-#(S?l8$"Ytq]TZN>9&N]O?r@R'F>(q"-FD+>O;=X?89oe^$,%n&q\dKV6&t"B_a,/+
%2Q9#9+?"q07h^K%/^L256?!T!2o+j^bmF/.!piucO.Nr_TOQde^MO)(Et%43SZ>se^Qt.@c]n&=p.[JG,NJAJc"<>&+kU/"5WSW[
%)_ohk.5kg;*==-6lD;hCVa2LGG&,*qoC"o%Z[[RTX4c'ZVVV+1FQD-i"N(\ZkuV?RZeb<p9+!2>Wr]c2CRH>J5'$U8RZcuUj5`$k
%3sCIW8?e.\PA[GiF1RXO%(QB!-n=%&LG=E?-ou&;o9meOZU7SD8&ou74Y%/AeA"Rsro6)>;0q'?1lb>>#S">iQqr3R#6]5X;2:o<
%r8G]Y6k-Uh8qG#Wkf@=RpcJ)XpU&&t_=ZI#7Oi]Rd*S0:e#jAHZHI-]&eD-Gg)Ctfd5r7^>nMMOoVhJHd>)%[_P<SKd,Al>EVPq,
%ZPPd\#G/2B:D\lEQ\g>W=YI2O-[m.sNKLm+HE:kgENh.+G%Bj<nWBsA3f<!6E1>LjO^co-nD:IS_&M'MiHIn,?U%\:mHKA*p.ACo
%:Gb,X?7,Df]9TKfgk>CMQQLEG:!=sJmVWZ,k&sBYCHoJt_DRNbc%FY3h>Na85+V\uI1=OfVAKF0]l^keF,QkVLfk9oh?\i:([<m#
%1gU^S[o`=1VB6O5Wm-hoDHs/LSOpK3,DL!Q+4+F_+'\)Hcjcj]QY_Vm6T'1RX_`2p1ru_P<)-=]"cXVd^pA1S7JFVDGQPRK\nEc"
%,]YVHOo/FU5rR4kN7`5=*3aphR]DlG$E&)Y[\]HGA1&ZMHZ>R9Lljh=$Ge]V:jDMB4f.EeN?tu&RJP,&4!B>1\&QN/9"pjr?Xoq!
%oR6Sj*Lqd'+'aIKeMZ6.-DA#oFSiW&=#L/cG\g.:kl1IW-hL8JIpO>@Ml6"PfqI":[.oLs,$J#;G#>=sIQit@3h9!I62_QZU=dF-
%.8bLa09PEZ(4Wlu,hrZc8U(@Yeka]L$:]KADa])`Np42/=i_jD8/3os2r\tqIn^"pMWO="Hk7f")m_!N+_a80%^j&!@3$fq/bo$u
%UFrsV+X+a,<n`$O7!2Fcof^0Ri8n1sq.'NTmhZmb3B2.%B2?ItfDA82Y]Q[kN<%pFB39Y9W68EAqf6U*Z6?t!jBZs\5[D0i_hc#*
%@8W$!d+Af$rSuiERG$`=-EKFsDH>N<l"\P8pC##^5$Q]ilK_mbOf(b;.Jm(+pL((R1`9](K$Z,2Z_"](/X>tcD:'IS;2:/EMA/u/
%_Z\'dj[Q!Tb]Tui#c:C/ct2rH+r^&C[Mb+=ilKk!YrLUo6B=@iB]!3U'h<PdWE]>j.)/bHH$tQ-Ti$`l/FTLdQMDNXgnte`2`LT#
%=Y/Zh`b@8l;Ma/)gFr*8KUL5'7"[@S]"eHgR9VsR&PJPH7_0VpN(mu*"6_A(8p64M/:o'1VV>PB)>i.`TY=>N+rAqi#+nfUlquKo
%E(:"qgmQnMG[2QaqI4]@^:Y!>$(!l5A%J(S,NjK$8fb:YGebMWXT*?_e<9+/2]HHsB]fu?/AJ+h<2gP:)u1;E]\\*hM_mXMBlahW
%4;>DmnqS\f0Pi%]1Gpo%<P?=1,L3>Q,4_ScrhAr]a%[o"r**Xom3t!EZ8k\YUrEY^.k%XX'6UoUQ,E:bRWh8:Lc]knH$;q)[`VQ7
%'<:]EHERmFOH_:'GJD0<kd9I;cQqGQ_o-n,QsBO.BS)t4*;r.<iBS(2&.1iJTutm>o3`128J7_9mnF8I*Ueh`%^p%`Z=DM\j:C)p
%JtORC;/9!</_B6IS8NOc)amO`hO88a+V&X<p94_sfRCC`(-T2LJWo+mWSrXiU(E?!B]9]giBo8V:IJ'TMW_GZ)J&`X25f0m;k45$
%1109cGUb+.A"aJ3A._Y2heb&2?H<<_?Y6_HJWlN[2'JU#r:-B9MVN\g<N0mVdYn7:olTE>58Hn$DjQ<q*ET[ShAi@ZiFZGV:;t-J
%nVU<G3r^PM/YfX+*]](*AobH9:HG*S4Cs2JgLi:<4D%tt4o)pf,g>)1$e"i:cVI)'gdlp$'s$TMq;ipd@qiRfa>e[T[DYpt&7=?b
%g+R*6;tG=k:6g39*B%(=!uDNr+JW=<A,Q6);>kh;[,h5)31LTgnVsOGSA[rPmeM?nCsc?IA<0.\JpmZ2go_0j#H_U=C\QJE[XIZs
%&@h,YHLd_80@g(D8\OE!;t#b5$2_G=bRaeNGZ;(PX-;\kWA$iMU#lHW)+k9j8+lE=Vb#tWPQHFF-/C#5*'t^DMr;9/<1ZqhW^l1=
%8c.qVP5_sBLn^ddGYK4amUFUVD4HkHV_>4^YC1h)O3Pd$Pm&LT=:m^pX7Oh0I!?>e4h17.]r)F?*eTe,^[rd9QK1F'Y\H!:(29XL
%SDorDIumfnD\@,bE?!5]VifCf=-37;H\A@=n/#Lt@_95QDO>VV*oF]RjiC=!q+@Ch^bnP,gl@BHQI[h7Zo=CHd!2a/n,tku-4S21
%W*!^R8/E'I43@=o,S/ouK+a=l<^Fb.\Lr.b(CeG38m%(R%Z+u:D7<`,("+]JD-f9r,NfC.V,ntsP'O3_3LGiq@\A=9&2h6i+5U(H
%eHt/=M/9MO44S:JY9be&qtj;M$KrS.K2#M>]S7TGj@ChkkESc27L(=.UW72IG=q4\Vr$OBR-dSkNjo^pNaMd]#$#oQ/QL=M8"%U<
%USbqmn)X/\Q,qI5q:f'D72%=))VI?3bAuPYe%R"E9]'4NcfjGfm0j7t+9-#XF^.#6X8:hFn2Hsjje)6(!G\jTLc0a=.;\BAcj/Q/
%$;PUlh6*XXWQoY$TL?F2QZ8!f74`t+9\@prV7?i*%JmhR[N#9S-4469#2uZKAcu(o>@JZa4fL`Jl=SKY#L]%<[)'Htpo(<t>u:47
%H.(Sro.#rrj>^K/+pB92cMNPR:<0i+WEKVhPih7o]^7>I_fpeHZN)fl7A,8XU+P`gs2_@LLRSTj/sV)dDsE:]1,Of)F#(Y-<1/9S
%bNota4-_P,\R5!KiG!JYqg!+A;Kg=o&=WBrVQd`<ZYaFq1"(Gq&pB:?V]$N:ofh5oRX5i^bZP&8H=H^jA?/5(Rq22`LRBSSonaRj
%=bXT^\*Knaklme"KueZil\g^?iq6IGjlQ1)jXP="Mq)DS'$7:up('kfMeiUqp\U;rDfA>+'.K4WNRJ&*)Hrg.F%XD3C_95gT:b#<
%P/lUFC*s\>rTmiJ*2q$+'`P;LFPGF&(%]sF%d$cep'A<[$8%Fm,>\LD6rd<c2*;/k6A"HJ;;Jc3BgnleI:(;B'V*EH_lbb.jQJLD
%-2J.l6_,5$`QJ(I_h5YWj8^,f?Y_:jN06@/.:n\cXHG"+G*1=<3)/-HGb1R]iDa5oE37t)<O;.B:^P6!2SuIiK,Sr'BkWCW5u^tj
%a^dcYHKWs_odeLQ2W"M4)9@j-O;l4NA<.aA1S%*()DUV(]//:hG2mu@19;N!C72#;c_V]p>E@]?)<0K:1iupX]h!$tO=NWlrf`/:
%rarHBqR@]c[bT9^DGV!]2K^%tI!@i0o[\Z25T"?"g]pn(LNe72%UQ%]3P;*UiUFk"D[p]p:rL$<]lke_Bp*Q(rbN&M8hOHc%iJue
%*;aBIP578>H&@]U:+8gog*]TTeP*YiXK4[uni>0ZW;be!I!Da*88ZKj)][3m#3G)obE:WFDAUBi!mg`@FeT)M1qllHbGXFg@QTXS
%K6^^iC,#aZIlb1l;]h@B\u8QRXcS!Vb[i<=>+HR1(]u-`HDm3-K=_dCM*%8O&3Jo#`H'C3gN<$-D&3j;i;AX!a910Z@YWG3(t=C`
%RYuZApibhm2$--?l/XR!&\H)D*nb%c9rnU/*k4OG\9;n^qIqdub5&pc,9K"=WoZh=JPFZ.9D;Z&foJ\=WbFIlQ6+^';j'G\7(tp!
%)CTp]j9*Uc(5mLA!U"[X.XK*.i$>R"%C]!2k'_SO%dt@)P[E)@DIhRAjX(SEV.'(s52'TMZf+RuKYL^+q-V6[%[6Nu\kS=;*+caH
%_pE0e)%hJ"6oijnIstY:Ug)j%8%)<?S>[)nI[YZaEC<LBNNPt(d>5p,Y!Ut^8>uiNhQT#8#PX@)8Bu->,&\Xj.5gfV1P9o4Oo>0P
%jE/dKl9JVP80+44I*c"o8RGK%RikaPWgd_18gC?F!2%!T*[-%;-,b0Mb3m:N/IUdb#BDDh=6%[Pck_A,8p*Y]"#NtOh3H:.E]-ss
%!satQ%7l[&Q^WGG++;6[(8Ss'>FAUi)b!#4NJ8gbLg8seD&1tT8SGTqa^ae9d4;"a%YNLLmPR49.V5#$<S]RUQa/W2El6i.Q%cdE
%;Kppl;N?lT87-6p.B]&_Qh$c^G^M'X4"m:F>fm#5Y*?YDdOI1L2tFu.dIG?6Q/:e,$MKD">5d-,l`A&tlPnf2Ng2q':3urg.])QT
%qc$cZFaUJBq0\;Po]9"KL?/HYNI.4hUCnI4G;b7_,(3lhfHfKm2n5E+%a[&>8J9aD`hYX+qi\O,1B"OIX+eFV5rGo!MhTGq&oFWQ
%:>VFg,'2TFT])GQh7%#ae7sj&Gm!$m3`O/MBe38dp4:/h%p=8i3/IK'^SrO:@#7YqO-msuKk=c`R&l`_jRXu=PC:.*%20DfXI@bW
%0dZ*Iqm]fi,X)kQJ+Rj5r!-MRdIPt+jc,H[e+=eW0U\-jTm_Ku`o>22B!7ULQl'8CIC";f5U)jaRSErcGaH5b;^][.><,dL3,h'O
%TBQEN3QkZoPqu]^:@4hiq9d@L2b$^iGZd*+k,ubJNf7Y$%RXE_*DtO?rE*b-)eA<'Aop16EeI?-7<?'&d^`dU(YE1Ik&aa;F<t0[
%lhfeVA\+_Z>51$V`B9]J,>!(W!X6#3?/8DU;J]+&TNO=>q+arA@c"4)TDk4Ie7b8_Cc^>9]I^&9^?JlW&c:7_gVsT]qPo]/G^<'i
%G%#DcR:c-O=uu8=b(1T5(j%9[M3g*Y!fn6P@%8>Mp</4hB6<J+M8^j_-nTgOISndW2&TJ`rAX!pT<?Ia2(JQ+$5ZBos4:3GDfa2W
%rngpQks*S8k8+*$Vt;'oA`aa-YG_"7NX_IZr4eiOIge*%(]U\:oUhH,bpiX!:[(*'N6EaM?VfoN=FB^ts4:3G:QGgS;uFD%df2lN
%\Ol>kH:n2b#8NU?s0&?mhr^G9r4eiOJ*L#f.fLe"YXJTl!`f8B-Zbe;Yh5WFJq$,a"ss<80),\-dO<\PhL^7B\XFuC?ZX&5)V1W!
%Xd]++S5-fHeB4c/8g6RBDB$[//pE5t+`fl57eRMuY7M\_1K?K.Pg6:aGLJ.CO"Map4l9IYRO^GR2BG5Pfr(:F8R9F@='\8A&\/\[
%1&+,T12,]#fBIa",JQC`R!>NHo819LW*tG6S?Dao(^[p``,JFa.XlrcbN;blUHkS:4+jdVp&IDJ5m5$545JTEI`0MaNr+q:h+L"r
%pSf9\TD,^tPZmZ@]/RrOB0K[S*moHoNiI7#2#e!Eqpd768<8;Y1KHi`L\Vl-K[E78Nj@M5<'kl$L#<h.@/G=I\'r+'bN?`HlDs=@
%a%7[)1HDpfRtX07iI]0;;t">-^ur$gn9Xnu%_Eqf?)Bf]eI"pm!m^@_QKm.Y*<H@$$2V@\J)koA@_-E(VHXk9U#HPm<Uh3)mfE<H
%jP#HO-n=)NltXJqTLce[/i`a?FAOAi!CC:!Ba=WVjl.+JadWmN%R25rGkaP":MJ$jpcW(8]A93,T2K1^1aosg7.pJNh,GT1:H3%!
%E_O@c1tDZS"H6mH=&Pla=AbC>[=X!;('%5&`$*d37QYtspW/XGO.QRWn(DSQRmCY-3m!XrI5H\rSBf"?l$B\dc'A=.%r;8.rqDWV
%n/75?"%(3aKYqcF&!q>PRk%QXed(o!gRd`bSF?@7?mN.[UK4R&*rKMD^nlh0h!LM?:Y;r>4)(1k]?#*ln"_hOjbCFUG;@-]S)5i]
%T83I!r6!+Ab<P(23Vh]n>l'LEAA>K9^\[=TBQmr"i^'2$&rL2e>Y"b\NCKZDHd:cbEnbeT?CG4K6pn[R,YFNE6F$=H.r,j'Mga%>
%2>P/Y$Us=DY.T!Z]"Z>@8]P7dk3gep0)f\q7AIS1,TNM+6j5gI)=Y[p!mG+o/Z2p5KRuBR#XuhBag4Ig1s\'rA)$Dg5gh#9C>)3W
%?R-VIgI'qM0,B@t@(G?%/5#mMKgK>+j:Aa5%grti"^:`>s0&nUgXTiVY4J6XhP"fm8:n77EK79,W$PTN<IbM"Coa`B]$sI'@Za!@
%h8Fbha#E.>_d@3P2UpQP&6dk)<;r;JOV'D3*:re_-@Ro-7%PLce+2\*T+71,I+;QcoA\5KBFhlU#[>'7=I<SmfDXmirMf<*6g-`s
%l02iVo8+E%rJ1$`k'++<pA2[*-FW?u\Yd^;f['$HLD!MF:)b-n9_i,r@Z!D"a?4j'Xl"U'FCo/M@F*jQ_k-$Kd^KbLrbprnM5AOR
%`F)L/U[U]1``$[&/=,H(Hd2A)V9]l3^\l/q:.>aYPVUio9_2EcRDW]LXos+!'Rgn,cKV9K'g7E8*-;!#5D?(r5<PY(7EZZUTE!+?
%./aHnP;8,3kd-OXk9m7nLL.P8EV.QT_:%*TI.360543g534F0.D16Es9^Y,upt,ojEA!Y=5Q$^,.q$(d)]EHB5Le*DHE)\n(n,r/
%Wd1,,\IKR-@7opF[lhXO*-)n,CV$*:k1hYXP5:S3An#1aU;)(0q0\?TnJCP[']KWX5>hICgG=QU6V%WjeK;epe%>q;4ad,5eL<2&
%k)R]?a^dOsXaa*l*-93?ekB`'@pWJ?4ieW&LiX'(OPJKT$S,pD`Uj5V(QW&5.ZcDT3#cU-ONm+!@1RNuc7(9`..q*:g9A9gn?gWH
%/N]**$gpl.`/"3^dt+Y\Rd9VQ.DB1ArfATkHd>LTEtS4Lef;]?/.*SGcSWg`Y1?S<rB[qGLSp^SpZ7$gq;m"f1tQ$qgDlW+YdqqL
%%\Eb?0:DG0gh@f;BeI;,@X=I$NLe`r@E`:gILgU635m>0@_?;T#hs/'`>%J:T5sZAM?c40nbdD6UiZ8V[*BMK=?P4JJ`iRf_N%_\
%1Gk`n9EB:uE"8VL*\Lt4p$4Kae(.2;lLkLKbZ=ZJ]3]Pgq[!q8K?75J.*/;A?J]^4f,M-VU]1V3hQf:faI[[Ia:q=7n-@&mpQsLe
%f_TW30Djl1^AI>F%I>fSX)):tMV@Ok&U(:^4[FE8mn$bWI08(F4'uN9p(Xi_E;sr#@.tNtpXro$)P@&_5QCYRs0#43,PM0:gYAfg
%UMG=U3;7okVp75XJm>0B,HOJWC@gWjR4%koNQ:5>8Vi='^`mDE1@U]-S?mg79>!0/>XokSKCc$4">UWh$U\CK4V8s-mIVC;Y52!s
%c'nrHo8BLA*t9BXF>$AWn"_9SB$uljS:(a47q7u<@K,j<q:qHN*_:+Ki5])l5:^e$Uj:f[3bdKr_N-)L/=u[*?fn4]D/X=YCMp_a
%7/,K\GACKOccuC\&!_3OcV8_kSH\cKK^_@#A%s@'^5,PDHZJ7KXmpFIEmcbiAd3KS%[3WNrlbjU[>f:QcJ2G@IH@&kq1dq$Rs23S
%gn^nTNmd?pRA]A@l?Y$$:>u#;m@G5&>@7822J=,=hofUQPGRnuC,j8rn^>b5`6K:Coq!(mG'r_aDNGi6aks9@WF(!e(mU03VhQYF
%XMAUd:d3=?rL'1"e"F7>Wbn-lr\?K0Z8%qn1\r*;<-Va#9puu-\E9Z`f7nUrc.mJjW\,rGdngLn[;=h:@j.TA?#tWqE\/1nD!b#G
%R@1U:VX@So(JXUWBPRg[.F"(>SsVOLU064ao55&*R3R?Uci8!R6iV''msk@"IlfO+ci5t9f6h6@l1<E[jtim=RhHU95Xr+T-"AED
%WS!P_*Y;YNQd7R,;c2DmS$l_N\sHpj3/fh&(n-=hj`cbaAB1A+q&%sPr?nr0rkg$@0kR=,4,k=]WG*8G*>Y[U*ArR3#r.Hm@3j)X
%mca48%+^&>F4U0q2GKD`eF<%`3#BY@k:]Y>3QsjDmDRU54)@YkHc<]@hGLJ]XErm%\;!2n_7:UoLVC%(fK0<j<^Gh0NkYggMtVFl
%<R)8[8$pDL0hr99LsBp'^ubktXnY`"4?nME>OONJ#lA!VniY3qXn4@^<>ot)R>Ho/D`nPsU6#6bG!1>DGC:P.+(No@pK0Vr4rF1H
%dehgC04UW;0l[c^A)Gp]hg*S8B5ZIbZ1Grs^?N'-5/PS]42:^o4.g=!V9"hq#Wf;uhs;TSK:/)F67_l#Fbli=7LYn`)<>-5S+=k/
%d/+2o4f_ATi5'C4#eO\l8t&USk\c@HY5LAiG#-YnP-Ci2(8oaTJt:dC9Lk$.A*b,W]D'!5kBXRrWCl;%[TcD1W$[hQ4A0qfnk<3)
%acdr1jci042"UdT7r7FDI+>b[lghW%N[>0=92[Z$U_sL/p!\U\(J+"6Acq,Y-pa@Q`T9Hs:;1J5i`Eo:BFiCMH%pC<GsJ0M!E6o"
%A+"fIY`4o*-s!`O>%jH#o=6$A".74gjo)\AR\*)BQu7S"!$[tF)RX/`gY7R9fpLI&TgEA\e_sf\(h2Hf=4XJ_TJ>I:E2*aB;Qjlu
%dlKR+DNBUFG9OllCU7R(I";ieVD@49"N2c931H0CU)EK02f2FYn[\3edN7cG27NJOGp:h:+YIH"`DaB>qV:(qjpgJKK&Y#'RFqb2
%.6B,Mq]c"A2*j/.XrS@bf'1ooC\M#ao2(0\@VO&MHAEsTDMp(T,A8^rn[rb?C!a8e9>+`^=NZ9FG/!n4R9YNanoD$V]2moA[%GJW
%[a2\npE$np)5k0pT(Fa\O3N1N!OU_UR[@@HUL1lVDK\remou$UnAP5c1Y(lLHUNQ"p$dj`"e$a5\%\"J78'g;=IsQ@]dbDua2ciM
%kC96=\X8bq$6/c0m,h1lL8N0%ES8c//Ba"VgO&h,?Tu!WRAG]%eS7=`B51r.XL)Ail3gWdob9;SoJrU5:BONgHEPeG+`&:"'DR0=
%-/V"jcBT2?iL)aNe<h31?oT)DRt&X^knj.7Ds3YEGAjkOp=peDq(^d75s(lH]M?A[(l<+e*9;F$NQll'_t)U)&(9chY#)cZ0S\3J
%0no'1'?Gc>lcaVpd\&ORBnD>bM=JffVlAu0(1E^H?5oME+V<:I\9Zd@f2^9bH_q36G<1OEO5DO*C,PV#:BP@hBn#W)OgH4n^t2@p
%9^A-1m!Y@I0DF!]9k7j/rU.'P2Ks%_YKW2gXf>3)a5P*@)%GiX@/![SoU^-%K3YUnZ"C<@gduU8/,(k^o(CHLe\:=-I,4&CqgEnk
%lu:PIK[VS0>+f"?Z#V29O#?Tn,Su@i[dtaa)"kN2i-&P^mYgR]N6&o;O^JuG?N4E'6C>^W7XH3Ne#qB\@ld\nER4+Arg*M+!@llR
%f:@(gQoTaff3Xnl;b0Kp*9&<rU,kZo$SOfef)s!+34Dq*iQ]&[!VbntbW#%%ce^9eG0d&>,<Ao.;3,*Oms6qmRVs9qiCd7E_L.qc
%7;jjp6$YaTL-j_.=\*5))UAZ@r4$g?<k$<8H/Cj+Y2<9i(0&qIYVd3rD.2cQ@6JJrfGVj;f_+!CmsE<5S7mKNia1"5.'/JU0XERt
%/RI=I<$rT&lp:HPq^'O6ZP?A3YO;QbRF)[$loZ(aIIr6HpccL]hn%;96gP`Krp<5.HJ_B'H(H+pM#!@$(Zo0I$OIhj02ee>(cU&E
%(.C7#Kh;.o3F+R)aPJr_>Cuh/ag^2RgtnoT8GeQ-k^AeAYI9Gr#g%Vjnab*IF.j'fST]pcCD^8`aZh8tF^GmYo_cbDdm:.GhO"]D
%F/L<uY?B`Apl+KC[7@t!o^;ZaO,']8baE20((cRc1<d8s1QiI=Lo7i<Ln7kl$[*:pRL7eKfAjp(=bnLn0'3t$""cO-CBl/=[]fth
%%9@&a+70!o]O1FN\jl8YD6N%c77ZQHh_?VDJ!b[I%JZSr/"<ff)h`1$MC@WLB=L.LPgZ>IleG7GR9tgj8NFDEDG,W>D%,hKFX@b6
%e#Etm9L8XE-Bt-;5:^P*(Lh+:?(7QCTL8;#X&e4GYeq4'E%kP>g6;,'ZKLp^b-4[Pgq,/u+F*I"c();Z,gEZ\SutE>>4uZj83`Ti
%(cV.W=P(>K:,<:Y-XI^XAtTacn=ge.NlZn1(I9CWZA\hjJW9<B%Rlj7a.c!S0Uk3C:^/Fg4tTcF8WPbU54XTgA.%"AouR"ZL>knq
%6-sb/:"7&Bl!:]1k1e.EA6`T+!Qb.`$."d*dQ^f-W>uhl]T^:o#1ct+qdBA/CO96V$4bbDj."_(3P?E[(H)HZndRfIMN=uWDcOY:
%lA*aZb;5<B0HZ.4>`LY"j'L3kP8jFdX\!"pN;Ng]br)'M@`gAK;W2D48;(\nE;e_(*l7POEf`tc%.=K":nD-5MOQ'(MC&^i3sZ3T
%;C9hiC]s!>$mFZ!Mc^7ko;:E)35;:DU3_LRa0-D%!O9B:cI5%,qd9PaiV9P0n`[]P)bdrKa!`r*L#\!F1#rL/Ns:P>56#(eo-7;2
%&9LlkO]Dsg`19#dj?gF0frq"X2@]?T+]s/S_fH]^Br[I(-Y>Z6\<3uS#H!^rY?*jr-dY8%7gqc/:D%,.Z'V(bCYc3E\H3DA!X3$<
%*\gpk^P%CCIhQT1gY>DTQn[_TjP.&4)1eC_#8lU<1EgEK`X*>._[LTE-^(%YRo2IHiHc'!5pc(>c;b/IW=Kain.[,m:R/[;1hm]_
%L+%C@'..'*88To=M+i&r#UqL^UEnaS`;NBK/I7PE5c4TDX0AmP/o@98g%b6hL#Kj9;<;'2HOPMSTHpCNX(-VSNL55le&]&&64)uL
%:34lZ3F`[cBg;5uSF`62>t@mo"3ZR(aDnpo.7-]ZB6g$7G7@KrIi$`Lgg*5`*M4o<JpCF)&D777?6)[V?,Jd">AGG%r7^b4nTD,K
%_Jio<VMN!i6CJCeR`gT714f3Si<2=Qq'Mdh]9`&Mo<^$f-`:V[-kYQf,0rC/KM9e^5F_]%Xi')HS3RCLbIO"@`sOiDnK!8&$9:#*
%$lKQ^LF'!:oVq5`]MW:J:)Ce9*oF'rWX+l\MsaPr_?T/r/OEk7*dr[^\bXkp,_A=Z`8FD@3)boaFV,7l`7rf$k+.5J(C57T-^:s5
%i,Pa[7<-TVPk@N8+g=qu$0S=u^=9AG!1=%1&<`-0Dt6%RD$7V2.7^jp=qiaD;\7@i@X'(+HMHlk@E#IB&@s!pfUXESp`7e_5/Y8"
%)=M`mR/],N3Y<gA;9k`PmbEWO0iK($ql2YhBs(Ku.]3T;ptWF\!Ug&J4H!dR)mF$F-M(a>.2RYr2M=2,IL_GgoDE5+l:?)[XM8fn
%q;q'S/E9&(Ajqjb7>lHVT0GHV0e,ZTqO?@Rlk%'Wc*U)j2A!UAO?"f&o2J5e\/ljDP+X5gQ8"aTF@/*4cI6UCK<S_XeV)p\$u3F9
%#YmLA3qVkQ[dMaC(Y6en^iB5#_#VEG-<Wbu.lQBfjO@].X6'gQ_sT?W__1#<0<FmW30W30,53'o%RQ.Ten4.i(t'*:1aQ@bacKqH
%Eak1mgc^`ITO=k&YL7DFh8#95Td>cc1(5NIoU#\Z'HrNU0,'O4`5^%FiV#puW\9a[0Pt@WTYOiN,Yg(GhXMp^,L8Fn/8DB7@sfN9
%1d>fiJ&s[H@omheM;^oZ1gp'eENF3!G\!)qWL6;gT'+2<W:j5<m#M#'HKQ`gip4f2"NPoZ0<_FRn;N6P.d"UOC"c18&p2EdfaS<4
%KR"V6;q8XcifpKBM:jiA^j=]Sq2O'p%WY$6HoFR<GsA#WVoF(F?cl$%kdiCHjs`:=H&t2R(Zq@Pgh;,ro<bh:cC"<*HfU4bid*hk
%Wd%gFKi_R]"_PL59qjP<eo2'6@Qi6F?fuah6I'JY0SiSS":h)lD-J=bc5j>+;KtRdoXd;@K5J]t&`*6ID&5-hqUULOm<&dMCI]L8
%R=tQe#n8)j'NfI6(8<GDJGXIhj*8lF#cS3bU?iWD0L<(tQV]N7KhHFfl#>G;'dPuB*YD)AWLm#.kslq,@L3Zs9Cpf'N;F;3\?3g*
%mW3s+P?q_/YJSsnlT&<)A=l/k=A[/f6qYSa,Vu7Q`uWMo$G\h=M8E2Ca?DOK)EC@?l)Ik!HqrT[:r4d'3M_LX.F1r\UHH]`fCF>i
%-@30AV-kO7lL9\9\V/0a[Zlm38;Tu>d4UoU!Wl)i+\!1[m]#:r4Wm\LXLDr?R&R!DUHjBD95Gn)<g9]`U5Hp('i"dWWFA7q[5?T7
%l9I\&VRnZLaS17EgZfqQmD[VucB<pT2[+IWRUBSR[Q5>sPWr9(94]DS/)Vhc'\b'.k*!sK^?RHOH)o"&Z5)U3F*/F4^ftZ@>Zj18
%Q)1m0NN:.'g4SJ7b>J;)VI[:%2A-9<di9u5!e61tc8IR)(>&K?D3?<UY(gt(L#pgED0(5E!8WaUTZU]?(GS8aT[!YiXf\6,LY2gt
%?oAlXKqFJ[[-]d>4G^&MX?/+MU>#m:&$%k\fSLjp9nVNGR`,$"-$iic@-k-jpYX_Gh1urXr&MbFa8X&O-6D?UP/6:;&s"UROujUJ
%p,7[.dAQecZ-'Vh@Kq_FQ`Lh+iD$;gS(@tj]ki0rc/o'Jf2Xf=&MBPA36:%s0$FTX3#..&9s?VcDJe/'0H4Do^,Q'8KHU6<OatY3
%Y2;n[=:@23^4ka0H5IP!SgmFGGoNJcF+ua0=-<.LUj*`LK,gKH_I/QW=)g4k+^pmcI&n*7DQHgb<Wd-=2,RH*63<BgBh4>7)7s$E
%V69T0?=iC*T1_Hh5k@8,MY#(cBju3B]D/nuR^V->]rqPV"B&tbDm3j0-sC!sM]d!$'SH^EZ.@KRc\Ve2J`#Ms+-Hp)A0jauOF_=/
%pN%P]OT`Bqq#[?(),EmR[,6eF)3VAMBiiudj@0*>_QdZ>m&LbuLn1rcme'4m+@]&dCpYu4Zf8$D,S(T/?@3o+:Kb+2YKDrP6\V\"
%M%cdWVPG2LaQ;J-W,i-#;QAB&b\'>6Li\3#/;,`,rNE_6b@erET@PPM]iY86(P=]n3"SjaA:.t:o/YRX,B%$KVqu".-,;c2C23bK
%oP?a=,t$QRrRr5qLQ[V)N5''L7KY28O"bVGZ&O6pMZQ%DZd6r*kT<s]iq2l+-p\u,j_L)klG4n#P!mJ/;cuA)Hk`pjD4.BbFE^XX
%eC=:i6m^iG+t!ad)hZHaV,>;rRIr+e&=BlZ/H$<Zl6B*CZ;1sN^"^EL%'2m?B'K3'`//`DU=#dp2j(RJQF;F&"u^oF,u'52jT?:,
%*3-G1[N=g*XZEAb+1DfV34l-3IFVTiH'IVa#<5N6fGW/Ld2D]QDl7g9Hn!&HDU<=mg=b%[Qicl<Gt!AFrWbI]m(nQjY?c@hZ(^(B
%k;d#LCaji.q,M)I0/m(Mos=ni+mn%N@=S;tHKE&<-<!Zaji>HNNPW:h)]RV8EKH*b]eH^Zf:B.6CUcB/7uXdF.VZJtRegZ4jgrp#
%XQLU?NU#:J^#Opt;TO=ckos30l'pR`NT\=N6p"-/2WBEqA8XGmDmcY>S^?G;#G:0>nl9+s).1j8eRQPNFf14(ceI(ne\4t17ip9Y
%A,f`IS-!mdS?+;j0EbTOSujL`W[a)lEcGatq5W(tWDobl.fKP;o\=((FZWe<`^AbKF!Ek3^7Y?\#JPXj"'Scr&c4`J]p;uJ.QUM7
%X-/5/&%sMrdnp:7U5(5.n'<^31(T&"USW=ZA*:q&hnL`oqsP#hI(&Lan>;<o3/f#g:rgO6@>][B999^HiV$Kg[NSa>?q0anC[>;V
%7ZZB\@cg4Bd3O6qB(\6&A3A"I^T_-\#mgeBS[f:uTTJl'3^>m]6L7ou<9\IhQD6kD]$isjo+$L%!kB8*;9=MSdSOcZUf.uHn.qem
%FXT^b2&)'>=GfRu$;GQ^qt^0TZg<^/AlbCT^-$G3/r][''?W43ZME6G[WD--V[H-u`o4KB\e[fbH(H6EbN9)`=3Vs=ja,fu,M2NF
%[R[aoeD<2lg9UED.,F<K@!m]?XRo]V_/OJ*j(!tu')Fn3pW11^IE-a`O=0aNg`mampP>dAl`+D9rOUHIY3.fgNN+VZ5.ksWKZ2pJ
%qU9V"'I0Qj.Hi7X&.XF&7!)e-4&K-;l(-;A&X#):"`sK&VI@tnhlc/;hrZaEjt^&j.$mD6gq(ftcEe"ha0Y56^2q\d7E,6%e)f;^
%`\gpbgV>f(Qu^$f8Q+BLFcae3Z8'R4o[e.38?#^0=,J50Q%\H5OF:+Q<O:J)g;rs"NU9T>j%B.(F]0*kqWgrP#S\$X2a"2`7608X
%P`"S/+n#%Ak#kN[#la6]/rjf]>Ijr%M\&3(FIO7W!Boc9KBI_eUC)/6^*3BPC2sAU;'I,,<(*?*NGGOG_*43E?$CO,20cVi?Ajqu
%&_9m'2@i@(rfn4bB3q2mZMgpUmWg#*9X3L>aL[K/r,*71DJZIBo*pDYgga-gOo`_W&0KeNoO5n-Uj:&#k$/U`k'.<(d+;EGo=7bj
%'s`6[_WZ&@R#$`MEU:4iqdj-LD!CP8pG-(J4063/W_\9DfCn>A8PZ)V@hD4'F;*(_s5tP;HqJrk0A3Y?7@5[Br'U%N?PhZM6o]33
%pOnL(o,:tiI5-H:&&XW=K.j)d=G2\'%>m#ZUd$@8nA<6Y%n2OpA!lYVE(Z+qoF(JpQYXF4?2U]O6%`W'p74*^T!pFD'id8F1chuE
%?4Uu+]=G9Z]a*MIK\nUfdkkhFPEVr=IZOk^s%3!i1$fhu_5-5(%5D>Q\t=a0`83JNhX@MFjTf.:>0-BLK5!mR2LE[:hX'QShs*OM
%mX/6kT'Ej@mNuie7mJ"h\Il]J9D5&@(>)"=o5uFtcntCn4@cL.dPS8hI8qC9\D2;^aS!3*m8<74m?)nuIeM@&_.#JmjkD:4*_=hO
%R\D"'PfUtVYc.iiK7)2X%P#V+=-8#5npRDDfg9LbA67Fhnf*ioggNFm&Xt<ne@oZ.I,4#`\,6$-ZA5/drBhMQl4Am;ahtb3k&*1M
%ZZ68Ye/Tu0)LF]`&LD,-\<jWKp:Y8uT<"p11ZEh\NEjfafH/SWdi/"*0=QsIjlobXkFSB3$6h1I1PD1FP"HR^@m(C;M@3g:#nnK+
%p"QAP9BPC5,"rRX?n-LKh`M<2M"Ee@q2]J8Msdu_DiAhBP5Iis[N'L31?%m(fHm)72j%)H8E'XH-B*Qq84ap(OkeKE;3k0*Ca5:9
%rPEjtp:FSV9d<f0eKh[<0L7Oa2j<<)nf-V!oU=5pIei6FE7HJ1j$G4Cj"G5laeO\q(465Ibc+;oXlT,\"ZJ!N[a('ndX;jC*e*d'
%-i"hKH=$3(\1u1N430;QAq$K?%:/!s^b<('oOOGm@d9E1EG\$hImqqq+,l7j+'Q5$pAOoB)kijAr8p@md_W);47^S\ouO_N+I\9(
%bNSfAV__?*.uLOWFI">Ni]0&`^(:r?3>3!HY$.IdghD1IH_+J`#HMHt>YF%7?-B6Q0DKFas$BrDUKD@p[Gf04U9E6F?.E-bBpV"%
%P4<`W(ne+@<C7:')of-jC:n1R5t.1q(`"Fh:ju@FK+sS!NcGsLUFG>)K-ZJ>%?-URJjTk_@ui/#o\ImOr.RV!(.:#mVg,`Z3H:mI
%&qU+h-+_km0??=SSoYH:&JaZ4**p=F2G29=e+[!R.c&T/P:Pduh2'l&;DA7J(a[jp;DoUY'sB18TrGsL;)2U[9e-a/LqT!q9ba&8
%dQg7BJskb\mOb$_!b]*8!O$QRZ>YN$CsrtigA])kRB,JnFM*\K\oKJ`poZ]h;0Y6BRuW_=RauAfYBj4\beDQt5#gZPHW9l;oj)7V
%D*"8EQ;%ickc#&QO7\6oC<+=Pa"QM2B\AcBp=Gkjr4ei48HLB<WQ*\8<EcX^qbHC.#b$b?;=-H1G7cnQ9lPftC`8+[(_:5!N0'Ht
%'tE=Xb=:nrQ\.;DZgY7-T)H<["sP3Ia!]bGeJ0pImo2LWXf3fNB8pZ^l&>Prqq53"a\8Jd`$tdA6W#=k/rVb)(!(9W@T3>dd97_8
%jjfl1M;JK7-Q+GKcQ8UmD#",jc$:Gp67n*1pVYu`H$lNim)>t[E:)G%'e[i_??b5i+Qm`'-E^FT6U`5=5$3MU8ZBC*A$E$c(#tU4
%@Y^g3C5[S%TANH,RUV=4g8q;D;%s2_<[8:tD%)37]TCBY?C5f-f:AEb]q2]9eQ@I#H_.;#S;po/IeH+Ro+&3![I;W%`DBjA._es(
%kjh#eZU(D>2l'f8E*O=uYh]p.k$F3lTB/X)%m0b+/YbV=r4-Rr&4(jtlV7[FcT@L)C>W\6qtjI$pY?urgHDD`>HJsff"-=pI]*Xb
%,.'8j5-8lNGC*UkgWhN/]bLNm>np/6Qes3?&.l:T4fEe,qCVd8EfOFf>MB`^L;#$#U_UEDhkdP2G<'!N't\TsEaN-sEYmp3]^5tN
%TVU.Dn#Q#>!qRAmpQ8nmg-aT'8ajOE/hcDpkW8-L_S032Qb/_"f<mf/Dtu^p:tNP=97>X<*SK'9[_&"g)em:C<UGHp.28_o$QsM$
%NT]),NVVD"g&!tj"`8\"YSA]SM*"jg4#Gk&&rS,.Cp*(>idK?^:#t;>G?W'&,^(l"?oU)K5n<'t-PYPKl<O"PBJ[9JpM[Otfjhg@
%TT"d'f`U5k'[&HXiX$8Ya;"f#0Fp/E8NlFEPU])`fG2'9$X%RaF`/<G.*md&5rG;^'62i0XGgJ!-o+9>1bfJE+WbP8/..Gs0EpRj
%ZNuk8FbT6Kkf:7Yf:(AQ(NRL(/Sr`u6t]Rb@sf(gG6Q-n)Ms,#-#KJ'\J(<KX$U]]9`[kNEj46M9L2]M(($I"Kr*^1BN%U*rWZG\
%XXf:%_J#`L6"lQIqUAbt;5jgNR"l5*p:GR$2-WE+h]A#N]X/`@&kAWY6]hZd8p=T,4Z-\,<h(++&PrN[WR@lhdI/Gn*MI=80PLTo
%p)Z7115oocA8t7!;obK1)S+?'FH<#_+5Psr8J"COf'iAf7/SkFW]b5fA3riW>uL;L(_&s+,GhRLSs+H#(g!PRP.R]N2^C'?q9obS
%bsGp>9G]:(Y16sSZ0C3Q/#o,0Kigkh`bLc-3sD?q((Cnk6Ctr1d>$I%js@,?P25<k'-K@o#c,>R3EsLT4j8iD8:ghdPbTr4R1dnH
%DY0nl`glBb.c##6nXnpWIR^F>&68>Ra32<!nrTLr,a$@K<Tg)kh@_r,Wm1j:'@L\SNU4W$RUnr=bNc-'fMT&sE<Q-s-JbGoF_6_#
%Wnj_ChQ]fk.XH[5i^L7*:f+Sud!+g%A%rDPXTr9Bg(_tPmJIPH"4G>r8jtohfjQE#PA#+^,68FspUWBNk*K+!l!^J&j<*mFYj0?1
%OE@cqaO@JWBd#[V_jHWErJ<E.SZ"a<UG0bIKgrB;B*f$cP@Do+GEaogU,%k_FbR_#?s,a4W[i'NR1#$0N=mcTUT?Q!?Y05>BpREt
%BWZoS>YV6)?k0B<RI?3p0"P%2\@Q@1;..8II32qC<3at/*d.[A>#V5*QnnZ*JY5P?l7@i7_#TDHY*&b#%'YhnH#6$9m[BIt486*2
%YPA9c2]p$6$,tClbAX8h:jbr:Y!`\>G\9VW]]jWtdDcA`@R*RI``uC+7!`e@/Vp,In4MoV;ue)1]$QX/knRg+\T"uKH)e`0*jsfa
%!4K;JEr=.UWB8)"f?`e&@/l*<#I/^>O\*=WS$+4fQ0fbNp?<XGUokEMZh>Hd2)]Nuk$]RYh2UpK(8,H+?#hDFdb!f=!m,dm3/T_$
%$gSE90%.H!/rI]N-6,Q'0cR9,M9o"3jX*&(6ETIE#l<9cN/EH6L>/iJ7MspMM8_I6Ou&gHW0c&9iki>R\t.VLY]KKBm%CkMCdi="
%+&HS<;T=:R:bhID)l6B&Clu2m*5gMB@DH\SGqs4.<:/[lVX-H0+H)\:j/1;=3`E1ubsnX&c!XEB?DWSk<18M9c[@lsd6k$J,ZH?8
%#n2h6;\0\.q5UuoDsnd+GQC8?<?a/pc9(K$:9WHR\`$/c]#%LN5GtauFZtpu/)HnN3lYm!\aY8=b-tcLF&AWMN:P5FITEQrX;EQ1
%e(X3?4Jo*XBsn[^?#WUmPE[Et'LsU0AC_BCXO*7(7Smf"ZGXb[WCodllOVG^jqQoj.:Z&$ot..X&'U=j_P.)NWnSVt@=m"2B\?!S
%8WZsG]4>h<*[NZd&!R,tNI'\Zk%k8FBcoh]p#Vq(^"7#I_U<>#oCsSp%$F+fNOcsE-4F6D4ckDGnalE"_c_6D2IPhl;j465.0:0^
%+f$TnJ`NDsPH67lUIqL[;63;E?O&nL([\MNE]4u!H2-HgV%!ZuXC`DEZn4Y%cnR7Z44&pRUQ6-h'eT:"(j#pk$e+FWWFu%?UW"?*
%*2'gV4?oFCb"?NBlQqULHL,mA&C7'^@IC*N9#%k3dlff?[`,;*Bog7?9$'(YZm65nhGs@^/5n=FmW1mmr'FKHmRDfiIWetn`U7<G
%)tanTBa6@b?2_O@WrcjWU6^_Zeq6q#;OgWDN5R,AlK_3pG"M6.Xlh:Si[^ml?`pHf(j`D<dT(].7h`gu:4QruEu`4L))a^a>rB2D
%BW@a%JuE;2$CD-3O_F+Xlm:4UXF)C@9H<T]Z^l`Kiq2WT=T@3jUTW./a<lr_rkWnL'"s\@Is?^hN]8L8(!dDk22et^^5t2T%i6t%
%Y"gOeE`neIj-:?@;8Y\9)Ig=]3Nop[oBq;a`0"#d=H:>s-L?$5@Zt%r+n-aEaCV9lLW_M:&lt8=Wf(<8+LRV6'p1gA%AIZ'XEGku
%[[l)PV2T`c8VWU\0G=A-^7Hu+B73A'=!$%0h498(OaFWDQnPIUrACa3Q`Zh+bOVG];6T^<Su5(Sm9]"WHICXZC+3cDlPOOjM7**.
%L$[W>@D57XSb>6RO1R=IE0^"*8C:f<1ED;Z,ufCJaCDc4.l^BMW!3'(HU;g?<QtQZ0pU+oO?"V4aY\hQ]+VdA;Q.!JbmN'./Yhcm
%TSUiC&_h'kaMcS61j="t2lhHY!KO95Uq-OZkRIq>M/C5`.U5Y%k8"[+R/3nI//1\-$'H>[5B#d$l^W7L_H5<scD,1Za!jQPA2Q';
%`i2?lZ=HTC.hNuk$`$nQ)k3cA]9gRoHH;RN#Gm\^RG%#1!i2I%]Y;pp8k(.0.J[A,ML)h4"FI>$OKt8@GH/BUPGU0`S>DA<[CZC`
%1?q+k>JCQr/p_3L"7X6:$`7(Gqe!_\4lt4c^m[X,gZ0d);_)Mas-Y/On3Q[BRJNgQ.\]@`LaKDYd:0k3ZSAE9QMi@9A3<[n]b--/
%o99F"Y=@J*%iAAh7(]qB.u<9p:.4n$6Bq-ee\s9L6hAH'-ofcRCAAcmXPie*XB88(\e548b)k1<>b/1cV:#c)SP)\71i][c+Z)&`
%>BqHJH\<)N'i2N3;EB,s)C%dd/mV>6+I&aJ1eL5F2d^m/esCD[QYsr4SJkhI2-=9ar2Zr;bE[#Mq#-WNeU(&*7kPau1'F-=:g?dr
%<e<pcarVSJRmi,rX'TuB9fWtbb_AR7I(s>j>@K%=AUgeNOh(TbDUQ3'7+l=qmJr,)?.K<@=/a%q?k<giptflMW'*JiQSG;,@aj6>
%e%7PFM/UD%/r#Hu-s@pi4t[n=\m4A9G,c-><K\su;V>)#YI.J*P$?q%LY,QY9s-/#V-]6KV/:k=$\iuo<#*2H0&s3K<@4c"IV`>5
%LJjhZAJZju8C'BKZSIDqL1qtmT?7cmQP%Ls>BU)%9m,=3dQ*UZchgm+Z"<Qk!uE3l%l44:Wp;^?&'.\UH@Uo]Y]QV.D]/]$^D;DU
%H"jQ=ioepHXHu=-9?=Du/ojAKf=`B%.$R7_T^,oZZlDJ=N)`]$`i)YbM#FXWV<kQ!NHgfncY,odLiX_@hG_(mUH%e3KL1dJk*_TE
%gSTaci[V"LYW+0$ZkN,NCL,"QYWJ4nA;iY3OUmMM4=a"f_mZPo>>=3uE_5Z(4LnA&*Jg%g48E$#(F^EJ3'_5,;70?Ue;G\Rh-23(
%26Y:!Am)NbJii-d^9"<:MjFQDEP:L/0s/H)<csHlEItQ<Z(NSOW75:S9'o\3[!i;208:q5?F4LU<+93!eac71R8LR^"E%G_)Ps&+
%;-*fE<(A!'7NiqE$g]=NM/Y/1*[+l+lB;kT/R+](j;L1J3LG;s%a196@]c@`^k/IL/#M"4?rRueoOA8P9eM`uPV&@n[2Bf-[3:15
%de$.(:EE84#LEEWIM&n]JsDRb5,UQ6K7=RA`(He9b=JHHJ`qpT%RM>=km=*,!SJE]8:(llJ+ft5F.TZaC:;#YKKVk!c.rD3fM&$.
%3$p;/&/4i\C7Y]nOKQ^Jhq7Bil0^B)Kk&h,RmF=5M<'qQ.&Pl/^eo-'G"p^5+@NN.HLTK=FOe8UES!NY\ok&kLo>A"L_]HAPG56q
%SD!K0PD^YCJR7g#]%&&!;\l9e-/d3q](p=pmg)!0#)sXO;!GoG(-a)r[lcO/GEJAL<L?g1NBB3X:s$OD,_(l910Q[e\\P/[aXBf"
%jqP/QSF]JOEb7lRIT&GDAXSia1-/JEB@b0qGe2>OMk?7l>Hq[M-,H1Y-]-\h"C<-ZY#0Qqn'>pQ>*,grTtIDEH6DhK1tL>aX`d$-
%jdbG)[7]61rEdAK,&4)IqjlGdBjF;r('=&S/]?*)GuG:o^=)@qSs\3_GeR.!7AWV@(k3^7,JJW<0QY%p7V9nd)Z'RNDrJZ1F'IO5
%Q-lIFO_U+5:U!iZ85<P:ik5\QNooG'<lnWN3H!17qjIBYI0X!lRC<B\*;4+[2J'EVdJW-<3E7+H\3Zoi4_,@hcWJD[I(Bl*[-Ao2
%,/15<$tL/Y=Ktjken*64lnrk$F0j`8"jO"]!tVci*.2*#jjBGnFNp:TIj43T,S-HQ<pYMYRgd%@Fhbf,AM+Vn[\U\U<nh+;0T?Bu
%9b$Ji(PY70@5Z:8WWIh*itN4q9FI>![4!R2_[K>p06srL[G0b*93`jpR?-@@`Jq7):UH!::D:b/=t6\t>>`Cn']HPofJG78CV(ud
%eTk*\"belN(#1BAQ+q[reao(>3%38-%&m16%`:)dmhZ&)P/$s+eZIpJk%n@p6bb'N8nilb`-H>TZCuM<<(t*&C.\J@^1!Y\/./EU
%U5^Tq!%WRJ#N?lfcpmlj.h:_;Uo*b1gHS`oRqETl3o<]?[2=no/jU1lqkatJZJ]rGgtha%OXTcT.o,EB(OLMndi(FMq0uHh]ck*G
%-`_Lj9s+WjEj?oXkR_&Mc8?EE1dDb]<=k`tC@6[MAY$]#V/f+blVV@=Nd/)eRbl=#=prKDLJ$1e!qir"`Z-?.249'pc.klr^:7EA
%ET3-Od3:T?f@g'RF,SfP;_;Fskoqjf;dfA9VCpPTFDSLk+3XfJi;`/Yr2W'^bs2,q^]+'?J,OS@qj5(nnalcCTmqg"233=fcThH1
%s7?i:q<PfoX3^h4?iTFVs8)Dthu;ZnrPMu_ks,4G5KsT9Qh`i\HY8X9KM[&5Fs>cU!iAC@oS,,:e?q_&T]rE+4aYVr::?ANbu<);
%nuJMH&h<M<]$mYgZ(>S78q%LX8>CHJRc]$#.Aprce,+!`N/I="J.7Dnnr_ZJcGl<&s*h.EmC1[H\*FB.qcL;[,i[N#.RB&5><<,D
%?tT#`B4,"b9Zapj-kN8Mfk*ZNkR#kP#;^C<D%>*1;5GYp5QY]kIHS49Z:P'Y^(hOV&::jolh_Lq@$e\1.C"'"3@Dt)Y=#Ecp^JHU
%fAZrG@rj5Al^I1t?Q297U:\]-gFK!&LSV\'W3>KIPBAST^AAkEP8&GQG3A:6\T]`,OcOnYF"iMO=OJ=k(L"mM@O*8aUpHc/IP;(X
%U.oeOrdQ)jY!!Smq1!jg_H_2Y?N$Gpr?jH1Y#@Oje1jtsE:EA)Do0)A:D0C0c2=U;DA7PMFp=AOJ$+:7&^!bn\W7@b^Q-C=5iFi9
%Fl9$d\]]T'<&fA0.o'-,8$7$&&R:s%Xa4m4j+BTJ3]jonb1!'q!;;([(*Zg1[9'"+5V+*PeQ>`"o2JtT]*BjS4s/mO0LN=2-s[MY
%\s-4$`s!u*brgh(#-%1\Z\0H-cf7>KXm#)Ks7CY%0$VAYh"U2cnE^))2H0DKs3;cf$W9pjK+R\:#a]%Ze$YJ%Y0c.pLQ+l^>Z8mY
%f-\2$<r@?WrYY=SpPg0\go4<!A.V_(+*Ei;n:Y8E;60iBr!pi=*!'-Pd^/&m8l]pk5Ph.UU=G;4(3*8i<,>;@;DbqHXIT)B4?'^e
%U.IF!MKl623tc$!GP5HYf#KU<it"a(60D&hil9.9DPk-sqYNMIG>TFqI?\>]Bq?UmpbuV+UB-H.#'7Yofh@P7(U`J=V8d5r7J+38
%SMW%KX_g?7C3"MA@cfsUXq!iWdXR97kMg"j'qYQ<*Ju5R]I"&t5XrM?>0.2JH=g!9<t;>;!Bj5<0YBu?OK@<SJR%,lBhZZ.JX^_K
%=KGf%lu+4-JnjfG2a5WP6frB9@lbRh6Sq=F?o:F_R#?aL/s#T9L4FM2ND_]uTCfrQ6@i_[l'[UqZ2*E@4d;o^N8_^j[J)K=(pKWX
%]gAA<M!TRs0:N&8(s`S14O[1BjTJM4l*TmMjNj]lId6ef_Q6-$+$C3RR6_8cP^gAc;T=["7nZlQ^jI#/5uc*l@c!W/%+@NS.%G-e
%)(uY&1KDE$kPTk/T_&p.<fZ`@XV])"@DoMW\g_X5P%luCcN\1&<tVtI</Fdf;Io*6QQA#LeYm5S-!!?g[IONcCsK=mK8hr]>$HX'
%%tqkDL.+7R=47UjTW5IX$^-gmn)rp_7)g>D=glCJ@#Dli2!5_5Uft9o@<9$aKo/"$jtgWm85u7C,'LQ3$"_cJB.,+SoP2_p`AWs$
%Tr.m6frNQXU&HSnmZn]GG+qehS;]$[]SBVH)%.:B"c-W^5h+CWM?,b*L,aX(9]9\Tf?1DC]88a$O;Z4T2&p.'r]i[uEYA/`<J;aT
%S-';N?<9E-JquM?2+,1b?n)3c(@f\&aS2N>qTflI!$K<%O!Bl7B>&7.G<r,UY2B^_;P[17SOLV%cI#b)Y<($Y<e<'_]^S8qF&pZa
%e"or*e>rkrk2$!L?]X&tD<bGWKY46UR&W?G7[?ZFh?An*0pSIk$Q%`TF^f?6b9P*PWSc?0XTOiMb%e\U]$BpGXTG*O+71QQ\u[r`
%_,Q&?D3Ii3$'8f)8.K9D%`k?hE`):M7]NJ09O<,=BcbGs#O-;6#uT/)Rrmue9KE42-*@TZMHMqSc*WFCJHcuq#$,&6j5=EU\<0h^
%I]e,dB)I4PB$1SqI3,N.BO)Xm#t)6'dbFr'$G$dbWM&`SI?nQrlW8M[a0n;k6Rgs/#g$u`O>INKkNM3",&cY:Ib!70K:q[JMa74a
%^'U7OTP:[PcjI"RX>VuO;@*H$GN.(K>Q0aT3DaLZi78<h%0%BQ#eS"\R5+Ule$ih9_[MU/XpdTRV!3RC<Cq`UOA(aJ(:?=P&r;nj
%r@B@b'hg>6qAhX4U_(;(<TBLTPL[K*C7'$&nN9RaC+f\*a@4F:n7ea["VmFXbR0n=bihBD9!W#D\/s9pPR#C!Ti)Kap1f?'"8A!/
%@]acVfme[rTR\ofR%1id-Jo:L0OIF*KcD=$SeMj/!4Y2o7BK(d$'7(@<VItsD-+BT6r:"'"/NL+W/G0mZ7n=NDRFeJ$fFA">EHTa
%"V"jr>FZ/]l'`D/s$=B.C<Kj")aWSu2/lR>f'f7GTA4;P;8=DeVpi$E#qPeA/NXe`aVC84C:Ot'%\iRkrD``k@IaYOR4U-c2-*=f
%@NB[/'P@oQBK88@!le'MK;'/faN,sLUrdat0/)cMLn&gT1?e.IM3@0=%8e+iT74K0_P5Lk(`0MV;e;)1:'^ILXZ!LHhlCnh<XDQm
%dOI7OSIY8>#E!*.Tj-t^,UPCf'N?oPTA9(_Z1br[cD<HuiOj;U,Y&H>dqprO0>A*t.M@[4rH*&[/3_I!,nI>bP$=6F!!tZKC#r&8
%k*K;dR0JR_!L$"]`6-V'EJ4k\hMQ(kIlBfC4a4sookM:dB6nNHK;a>&LfA#0CX)As^L#N_F8TMV&iMY./jA9iJn<TJ+l^*"fP*D9
%X+u#(C3a80+<:0l_t)Gj0DAobSJsj\ZApYseK:):W#s!@W&9Q`#t#jV%VnL3`TjpTd(T0i2$JV[ISl>eTh!Tff.)R0]a-0FneOM*
%5@Ycq=8L)1]AV;>!B5!F<U*#V(;r]f?/geEM&fd&X]t_Dqhb/@mG\ZQ0#o/]]VBH?^f."o<5BNt\\)?[1J-\ob!+?dhNV_EjS:_X
%jW//0@H.u?0/p*%+iZo'7MB268c7i)gFY!l0lg(GO"j1&S['PcBQCNL#qf93=QG2[d=4Y)q4lk-,b5hZBr*-_:rKG0*,YrZIdh4=
%b9hp5$<)RQ-:\1R7p&KG1mA1bC:L4M!:6dg6?9G%+U>LeOC:AC67Vbe6>2Z':!$P4>N+4+8l95hd])9STPt5nCqS1Uc9NG/0+11H
%"_)u91+!;005C;H&]b;+%W;f,P`=T#n`$<m@Scu5XHDHV[q-@U,M*4mnVInO'<:5Ul9jeY,Bk/N;P2'Y!A"=eK4&F+be'g<-]";g
%5O'^Y+\8]OO3+NR(/:ipW+ThfM*@k?'%u\ID3JeBRAkSTbfL0Y`#>s`WcD)JnZs==E4CKK=eFT.*(cm,k7)kfL#)4*/=*<,@pb,g
%Q1ksbqh<!2qH]+1JkM%f(T],Rk.eG=f<+#Di\b;cOcV#FA8<'4Z$94BW+>q$gs"u!lj4*=n=$phZJ!bE+C^e*A0>rIs-1=o_q3Zi
%0Hq+Dfp`g,JGkrko+n02;.`[6hs/qm=O<4mCiMP]E[O+u[71bn@N=F7U@XhY%PbO?&`U>7d>raoE':7UT`*)Jd\qE[iN:nI*_5j:
%o8?RAGe$pu*u,kos4?5U-^`sh*JI0A!lI'm#(nu.0Q%%=#pGO.XX0t^GdZ[h<APb8K2+hcBV&m*KG]MkP:=.qmIQOQiRC(q*e1]8
%cnn`+@3l<LZqi(<Q8"T/,01^SY1CHY+1#,k-Muk)i%TC0H*V8Z3=/*]dn1<BB#]n(^m'2JNYh1%Odl\GI8Cr\&4o0XY`;eHa,4oV
%m/7ic#J[8-L#Volk:[*lku<J(SNn[*+nm3[gsn<_H!EBOA>;9'/Fk\r1FhTM-u+E,a;'L(];bWu>N?=k1.u0I/>Y5gl#=JrKW0p/
%RWQWE%RMQ_8F%O$`t^k'i\&VI5eI^ABIME=arf@t+R1>V?"S:IM>CB+gat4OQ&%]HIC@A0VjkR.bc4FRR]Grh#[[9s%6\8HYS\qh
%513!,>0)e#lDRUth&7Za0Yfif``JHl>n.8(2Cf&?C!Z]L!SV)<:p:G&>Cur>`Z#kqP5shegr&thK+OS+6nrrm`0/]87Xlt;`I_RK
%r";:kar@-aPT*BL.,.U+%I]ZN#PahkK*%Gaea?D1Qt#P/?p$*&TCe(Qp-T8MNt<$L>MQ?TnK5.bR>6qO"00$m:/Jr@$%9`sCMi%Z
%X"emP'MGR'`dE]q1drSa;'%j-;(:(crC8Gr@NE1`eTI9Y@#^Ub[a$0AZ2tcH="I7*a9.A15,CTn2,QZM37Uq!R7f(=!*0!UB9+Ve
%\iEm@lMR&VPcJ>Lr_BdBl!pj&Oo<2uTMm88Kd+n4-L)r]`?4k\[\*o,h[U6>`NoF+c&ECg[KImNJhfcCPN[6"9'Fho.V@;NGI5kS
%m((?9)l;g=OMcp!0&F\q5<nDHs+;-C,q$"p^%/kq/XjgAB@YBTX[e[;>d\sS_3k]))G#N[888U8]'u-UWi[1Z+>JslLQ2'FF.jq'
%@p"\ekQ^K@5;AF('q7KpRO$eQ(e.dFrLIN'ilOh/&W<uYW*GH&aqEV^*?Rm$7Q]]M_B)-NFN[W(DQJc+^i'=Lp`s#+C66F'3&kK/
%2eb$T*PrJ:Ht3X3E]4_Y$ZU`Schj`aQ&(@TIo9VNn\bSQ6&^Ch7U)<aL!o3'd_37sIMaF'"*)0/i0l?1rj1<Nd)ToC1#KZ)"j9/.
%9J@>07fK?Ei\5C?g&iR]^sPPiMV96ce_iT(\2Oa5o*YF=_2M;mD;:g:BF5+kml/<[OJ+YtduE-:,"Yj91PTFhr_CX,G+Zu_^-?+(
%Cm>DS3Fq!keBc0?0Q5CtGa>X6D+c<@7a)%Y[UrS]V-kp3r6P6oL:ZTf5>!`dG*k:g:T#=TYr%p=m]WKaNLs6artON_P2@YZgD62a
%fBLUmM^2ldZt"t!OG8+@Oehh"10E<K8Hb(IFr;Mr-?3e00`ks\HHR-+;9?+\NI]+#G?H.^<5H-QF!ObHADcMTLkt3:*18=:"Qt6X
%O]3Eh/B]"6nZ`%1NX3h=*HM?Obj./Wk!N2d]710/`$QtpgDiebFV;hO7qC36@uTVimAONR,\!N:=Y=1e6m6H70d=iC<&[9kRf"hn
%(t"_8mr=9uVF<'L[kXTmTZupN@mgV&Ebpl6C/H,p>==8[%(@Z0#hFBk,!7Em7;l,crA=J#VFVmA95W"8.3_GIA!nN-Zlt_a!`EhY
%[j_C0`\BlE4KG&\.76KbbjP'u@>I/ML1i&tFgGlO]p?g)S@abKG03k%W@@+1\YCl4G9Q-@W["%"DQ#*a1Lu6YAr*S-0[.3fpF_sr
%Q/Q80&Cq)\U`aBT-"OcS2_c96Du_CuG_/0QC6F`1Rj2FB#B4J$+s-%/A#Cl)4u='6.br7tYJU5^:S2IVj[o[QC(k/=b0@UA`+#D+
%a;c?i"\L9+@*_cCps3]9,fM`bb99?Ajm,@]S&QGq?AIBaU?@2e#kmI<=X-cFc$4B?7T?BXV\M!(]s6=QRK8o&khuMNMs2@L`!9:h
%>$:+:FXU9B.4`9["/TmTQ2HQ/hj!J&WpV!N,Zud&BY^"[*0I*cXK_8b6F@S0^XERk2i0(U`-O2ed/2hEs7?1OrI!1PR+gNMLfW:i
%@5.K1(_X5.G`u`u&\81&\lBaVXH>>U_*++/VGqI;M^tBpqaTZ19<..2c"9p;o?V97XLN*r6$VCpaN2D%2iOmJ@AkXUntugdr[[2U
%Mb)"C]l!R6U^3keF=tN@`9[i<WNKWJ@EN,I.rW0!PXLfe/q4Ioam&r2/_[[s$`7L=Y]Tg@P_9ccMo\hiQ&<KagEZ:d^$0b+j?$GA
%U'WS,9kAq:),^/6H`\#M<%O3abN;9%JZ<*+P9@P2Se6(./?W!"1n&UeZarVHE)BF#P!TF1`A<t/PIOf!O`+?/MY[BWfbVgA('P6?
%aeO6^_.0gE*hrSnLf/mp<ZB9'Hm]Q5+B'L=4$_%Up_a[SipG"HXjn[G9-G(\I&8L(jVG+nAW,o]br2kVQ`PG(g`gUfjDm;ga3*uP
%:.+S6H!5Vs6'YlmWA)Zncem'rcfYsMmZfEGUSRqdpCJd+DhC.l&.pna!?hYAABW'7s"WCp'][S_0/U)\DXZ,(,+<rm<Pp)!It#Q4
%rKF`ZP1lOnE<h%^1W[qu6/ZJMU"M`i(9c*M*<].4KkalZ+E3nEb+W--i'NZIH\0%?Y[C<;g%mhu-u_OE(cYCNL63IdU;1n!jbU)g
%E76^c]q`B&NZ`L_7=iWcVkV=o!`-0AKZL]u^mP?@=4gC.7``f+ECYR9T@,XsBqiC3VmLUPJVt3bNcbSX-gF$tkeIN,B9WNX>qt:6
%k]tYk!tOm@cRT2>9^fN%^q#_1eZp=eUi$a;?U<V%ZqXR434Gkd9%uYibcT1C.gTA^(qlL`E1:,D*a`Lb5>_.;$3JhT4<AUI7ItDc
%I_HY<9g?)4'a$(G.m34;J:gsMhMM>hoEn2$5;D)(.dF`W^nH9X14$ukK34tHJ"dd!7%Fa'`IL=!J!48mV'#gN^H#atVPRb&FjpX,
%=L=/c/W2/P4BdR(6^g#'NQO1jj]@WY5Z]@58H!G)OVO6%4Xe$KGDADXjb@6[3S?g.p1DWLRB*ONq(2)<1!6F1d'dB8^nl[@ZjdAk
%mT/079u#]jn\16r((5h0<m:+G$ajK?$)NR!hp1A;"K0*N"H*[e"?>Bn#;>0CidpAZ@g%#dhF?%M1nq_>YghC.C(j8j2BUgQ,sS,r
%[2.X`I]t"4X8u<G;>`A4`HBt<n"d1W+75H6h5&`#':"$%PsbJYQq188WEhNd8F*@CK/mV8F_$t&d?KOgAm'f-<]r]$APKZA$n+f5
%T<!C7Klr:`q42E:K>1E/40)7^dmZ$OhTsWr(]2I`>3R)XqNTuH7'R:=E`r$#jE24<@gF9::bgc(0kKgYXttt-(-O7Il`ckZ'd8B\
%`tf-@Io9>F.:U%\]W.Ka"G/[EL`qhFZ`$s6MkXj[C<J^B=!5sgr46@efj\"(-@5SDT9mG%"VUDN,YRK#4t;[BDmkg.5#/Ms>1ZbT
%KL:&u153o/Wo+"![Z[p\5:X:RBUL@;7-UW?a\ZFV*Y'G(<GGtV1d7HC;UK)Z?&BLO<e2r=UX1;Xq5BOO2RQBS0U7_l;*sXWPRf(9
%-7P>JEQF*-s*k<P5;jZbc48sWP%U3<,uUkCU,#V<<6UF#%lGc3bWVQKUQ!\VU5Rj$ME`N2ADBh.Wp;h=J<hHF)VqUH.8A%5+qP-^
%K[ee82SHUo-)B\/A;0TaQ&o/d6L[*X%B>UX!+1EIWS))>]*,I74Ck6'oXpG091J1d8<LD)R*Y>#3A.h:*TKQbb&R%O4T0['W(`"^
%AgnfZN9-qBMG*`IT43/f;p`+@6C4mn[(icqE/07L8b!nb@VfBFO8n/*q&mRSn7Hh7J*(k&/@*e^acsb(h_-.O6=4I0[XYZlA!nNC
%LFJY'd5"-iM/$oUC2%h:'LC"hhj)<[9T`c2r%^Mg;ac<SFM:RI_,<]5/*%M?k?=lVYach9q6a06=U&7GC;Ee:ljOdHK<S%3Co>"a
%0eH<le[6^<EV!:17'p2QAY<8-#jX6kg6JLlW45Z)BaEg-A^ejZXYC*p[9Sgs\`+>_/Q\bHUp0mZF%+$h4J$nq+;6`4DT*,<<s2f\
%6@_,4Pq.G4:[L8<50FZqQ@Q,+&*L[(KsNaapp_W.aGC8_@p+;Ipcs0N66DF@6?`PJL<=46VF^9#OlVd-U53j(RO.i6U'UA0jD'At
%;.Rq\*'0B5i]g@D\`JZi8IK;+LbOtn@S8R,&+MC6q>DT;Hs%Y]<_g&GcOs+F9s>h-+XbT!N*bmI#Y,F(T&=uJ;ae/1?tsD\e_<c;
%aP<4sMD1a/=\4dQ[eq,G9sULs8f7S:=2FZMo<&%`(!?@rJ,VsGJP`>!KL'$Dn$GlH<3Dse[+H=t>>978W"QSY<e8WC^^q5I2@PI4
%%d@DM(cpIL@qGO;Z[gJ#.N\G`#'mTdX#=G]V0GoW7]e2ZiBk20^mfY"[7A2V]9Oo-:/mYEk%ZUGrl*_XrSPbP=%@#s&gt(2%:5\E
%O-TC1%\?0Ds&`6n<j9;*+C_q>51rr?Don3$U.i%,`A^f:O[uo1QZ01OK5\oac:rH=VA?>9$Zu`k9r>it&G8TJLh51]lKZR+7LY,G
%&k&"9)r?bQh7N3s8s"]u*o9?>&s:5u(0I<pcCi%s@Zu\S%75pb7aP(55YkL3r$k,k;p\A"jOmd0$:>=rgo5Iu]I>Ns,Df4t7&)7@
%S-D;r(GR$T;$u\WhCK@j4O#h=A)ZHHG7(pF@X6hDS\6dqX#QIqOr2]&3E-Np2CiurFF#L0=&"ri7J]XsOsEOk,(iEePr':APX*(k
%T"g1%XEaQd!Mo5YDM.Dd3&7;,EhCk`'g<sINF4&UQXiXpqMnru)%*8:$gJ\JR13Ft6&kWBVjAI*cN8[+O%SsnH`']l!NWG-W_QHm
%]AQO?9'j],P_@_o]WRK1GH`Q[V+29[dEuUg-Dg9clD\3%W&i\&U,EaJ?W++k1.3-eD^>nEDL`?nXM.oHD)<d[)2skAO?0s1LVdO)
%(1,mWpO-&$G0QXZlURLIWrsCX+RY7=#8i*d*hF.u:o=?Y9MsL>We3\PV)<Ot3ESNo9DqSJ;I.9&$<7<X<VVJYo8'tKWjJ[k>?O80
%IRgFgPpi:%+R,n6QB@n1eHlB`eP!NXE)nH*#6j6QhFO-gNo$iQ[0dSp2^pj1F))Z+P,R*De@Cl5/[C/e=ddd4(1HOJWT@6hZ>sF`
%X)P9#X/OILfg6`+'8.c@L02:4l6Cm,iYUUYE.(_9%,'r%;jE"L]LN?1<pe9n[41GVMGXC`2>lJgN5PUQL-2%2_#U2U"XHl2<G\U[
%'@Ug&AG_q)5PcCTegu>/;]b7!9dXr2o,do;pkic5"(H\X@e*Eno61A;rMDhqPAi!;5)-4<IOID87p,jl]>S9>$.S?T/D[7Fp;M,#
%lW2[I;:S7Gg=4!(?"F`eGo>^CdM*oS<ropo'82!4SL:-=X4%g$l"#.t1`V]_?7<44M97Y7!E"h1F[-s$plBV?jQl>MOIoXHRMKIT
%GARfTklmDDk7[J!mq^gnP&8II]MW&,E>)c_aV:;6]p48s$?cHtgr&Hkd[j-DFnf*;HOTJ=,DW$<Z+[k\ZYi+o8R>/SBH!0D1S@3;
%O'/=[Wl"RDmC+V)3"K:7eRaYH?s[OUDokD^L2Mu;'SC4=MLnb#Qq7qhe:e4Na99QhqbEs":"<4Zh'6+3JNgn/@9*GsEcuglbj&[&
%5jjMY%\CU,5K%;WP_a"V713\"_!7R\(b@L1SON3TF_`XZ+/PtpX*gs8<e9pEUUaP*$]&g571e3;I$ti_0A\1:!,^J!P[%5[-qNF7
%@P7P>7FnM#&.qdj4H"MO$JHln*(O9Wb-n5WCgJ\\!jSsB4f%`_O?uqjF`/Qq8tAHYbGTF_O_\9.KJOc6_4p?s(-lGj11$dAI3ug-
%0Sb>naId@]Q<NY57*S7`OO=F&;tK<cQ$Jt(d"Ai.(<RPqmPk8RPqU3Lc5%BZK)][4CAV]cjkj@W@470s_5Ear<FOK/+XaN^c=)m!
%L)MqOV]n';-I>gbb4`PI2_E8j.76aqR_()(<g'&<iDCXPU4aCC2)6['>`EkO-_sqca6VsoV4&]3Fd[^F]qDMP.&8mrU>DuVYEDtd
%/uh]60XNDj;l@\XemV*$8irls5NM]O"_Q<V+g&TgJEp?KE9foc('Q8oph#T#"07t8-;>]'ngM,O(.;ga+aKrJ?JNuHXe7d"G%@Ak
%9:)`GV#:_bg8!Bsc2?rkXneC)M+"SGb$9p7iK8/+C-e_5f-ID%TkopDP0VY@S[al@$E>d*7;%lmnur4=nCc.;"X<9^;%jB*\"Nm"
%`M-)a9+p:nR=eeua^$[JeG(;YV[q+uDY-(mpj-1V?-(bj</tFY*o9ka/ZEhO5!LP0K30n*?(n*p7S!hkr1V[W9m-Gu*0Rpq%Fu!m
%4UAW#PpKn9'HnGJ!q&dJAt3'u<gZA@knlu-d6G"&C(1q)Y-Zg$QtaPJOf6,>8q=kE0I<#r\J'3dNU)fIrhcd@U-]?'Y.!/BmDeuL
%=9+\H'tPig3odI?k]fOOgc%!(W2#GbnimmXVW$IO+]'E(i`e_S/Cqp1.]eeR0ou*tN^\m,3@p!fM=Q`WO1"!RK2p7JnoWW:Tcs[J
%4\<'aL$N.Se/67V33#el?:pH^iQsJ8X(SIA!t$d(AQ)Yr(G`=r)%1!D:I4U]qiHE[GZX\K*p0?uS*F9Y(-Fqkf]V=CX*,T&Q:)2I
%ii-m_a22C>l.QK)THY'$7R7S1o:oBcV/440K[&c@h>;drN-97DBS3948XGJeRdaeA%m=mmX(n5)^'q2Q]lQ#(Q0\g<0ooc-$?E#R
%Oep(%4:\j8Q?".?Y*rR[:i%YQdVU9Tan\plfgUpO-BcNY`V,,C1O<)$nk%SF8_SZSg07b%(n%M<L!4fIdSsYGp],OeZ^E&'OVMY^
%H^@f4f;Osr_O\:Oj,n`/P3Q\@8k)dT6%V-Ob)Yq>:4=Q],[==;T9[Pr9n]7+#EZVDX;4TE(4iF5_b#HRT2cc>G*]*X5c0qGn?d"[
%B+Xl5[7ql$Tp!<i(*'>*Kk6';.nruWdFuf"b9c#.ocq`480KR;\b!K!bnJdU6OkY_jIdD$O7(f3F\Z3K3br@#O-3V\ObHZ7r:47T
%N@q6!i&4f:3Z2)kbt2)q;N2S_n"qQI:_^tgfNOlTWZ3m;rc<Of+'Ib#Wea3P627:XRL6b(l)DVrgr\4V??oM(GpmWhDQ&G-PTu]A
%%S]cpMqj-=c0o1XkS-hs7e2OR[RhoIj3FY,@ksAf+o6$!s3J>J+Ar]*feIA:e0"qF3>9;2%^^S>X&)D0+4HMcR^Qrh.'->n$/M_"
%T3ONsH(GEW?,[U-`@Dn<K4W"E<@Q0n\4RoeDfMJ>'l:cM/C9B9@T/,`(L.Bs%8e9)KQL+K5Rinq2_&-GPhf"%6'!Od5m8I2oU:X6
%<%U`]>gPYp/*>8Q)Q7&Pp_d$\qjflF<EZr*AiHGb/\FT8:+V(^D3G\IEP`bqTrbO'hL+lp8/.>n(6;J/5aKMJFgB//Sk542*`MCX
%"'/9SN_O=-mB:-BV*kZK#==$X>g5l.aBEp&/+"KDWXPqWlY"A5;AsKH'U*6/.hNN1l+\#_&i4o:2+.o,W^VCN-Mngb2:WShFrnP)
%akf=kZM'TaYA6N2m/bTGMR#0@B2h#EjXO9XIsr^O"dcO3ZeeZ0eJcC2[h?353SkoCA6?30KH2d4hO55oZ4HQ4>6ENu2nhD^W\,r/
%0:;dN"tS@FU)bb/\[s?)<pT$P'MPXQk%<MI&;!X]bF<N_X[Oa(TTUl/f5!D\.$Di<XBGQ!@[TQ$9#K7hceY^Q0C2rqS\1YSas3iX
%/\/Nj%'P*KFO`pC[dH[4<S''RAD-"#)>H$i:ls&Y-VKUsl=Rl#al?<pk\9UaW>'G3@YTke,Rd8]Y>;LU%7M'jDooO0,[=g/G-1J-
%eRs]pGe1[h%P(p0M%/Ip.-.@*`U[h<S1e:KDcb;EVD8nP$_ZNF)Rrf\/h?D8Wf5G9fZ:t9P-(=^#,'jb;e0Th&Xs`0jIQUWUMn+-
%#OVh:T[g>6AFZ\lG..7\p9Tq8(s1HFfa]%[Hn(EnC?9Z?FUD!O.DJg"//+Pt"f9IrbbT9m$%M<@@*M(RQtd%JpRWU,Km0aD:q)<e
%Kh-eZN5$f]-amulH$.Qh0a3n![d"#j;?b1s>a'sG.8$7(btYO3LI[M<'c;"G:[>Po`A-[&:2mS^$gbU-A[%?q0d!=_[?q9.6$b1]
%O>AQg#7+ZJ-+it[6-ALsr3,[%PTB&eYP_"l>kG4B_fIc$V1u"FN/1K3J(6n>p2JKq8c/)sL]1:cK.:OorMp-UlJ?[I?Y-4<:&pSM
%Jq3'bJ`-/RPUhrAfO+;5$-K/bp=EKP`HKm@X@hg2G1^.pH1STP@Xg[SY&3l6LmjhSp/b?o6BngkQB!ESe`gH-Gjk(-l!O,WMI*F%
%C4K/+2LE[R8#lCA0)AWi^m#\@k[1_7ZGq/bs3b@)Wf5W)Ipo"AXOhLh=.+H`%<9e1,(rG.2uT5I5?^8C03;:r!iLOeY(RF+qH"\s
%ML%EHrQCk8JAn746**2hTms1O'#bFurN!"qjWQ2OQfiK[e0"ORk?/S^U4:^%%<I$J^Z#E^pO)13q_Yi(qA3Vhntd0&X'A;_5hl4?
%)KD]1lJd<D'MJU9r3)Q(OQgrY^WLB"(=qk(#mpB$!:r3qb<u<X!7AZ]Sc2XGf<]))9,C]Bb+X;f%b?2LdD*8MJg8S?-FH?W0C5lg
%h(%N8Z+nHE]#iiRncXM2G)aX5*:B/pKPk^=gomR&KQ,">V3.b?iZWf:b[<$mN;ZaoM3T6)p6S1DDL'!dr`/VDALK/,QZO%#aA)]7
%o\4'<k'nt8^%TADng_)e(B81GiaRR"s/VZ8V;a-,=4m[jYdjI81'Q1Bmc&`$<Rp;Yo=q<]W3<`+?YifeCH_kT%VBi9?2Ul=)RNri
%s,0$Uh*qqTX/#hj??cAbo3'37S,\0[ZNTd8s2q,b1jAQ+=T'[/"0EdMTTu#H'f2La=o9rFJOT)^r`9,id;uF[s+Qqg'IC!Y?QkL8
%MuFGETaFGJre3S#'tWX:PsU9rs2&V$($Vs;5cL\TUpIgnqLhMpm'$2mfZVP=_RPQe$0kRc>>]h9YeN<RcGIKu&o[5u%8AN4WO;hd
%r=pVfD)4-JbLb)k/G>DZ[!k)prIodO=>0B7>KK!1m'".9529Us<?n<9I^?du:,RXBri5[F;CiX]X6$8ofYd]'Z1i@]?P]8#W]'[R
%CgNs&DXpl^A_*O*a^6rqcAYKs^69gu(V!)\5MtO?<^@Q4Udb7q'=#`EM#7F]<3&Cc$<-%"kC-P8b4+0HY6'3==1cR]`RHBpFHO>>
%':$>fjKES<a<8%G?_6E5(s`+1<mm-jN;_#lDQ2^?Aq(Q3*(Am*q^_@uNO%5Ec%tY9*;2=l\+XKjrDb=9mJ4!$$BJ9^d\_N)V,"Tj
%s!k9>&Tis1eTe;?0E,%BJiVZbYD)hZobRRs=2DP-!4IAF2Cnos(j55m9`XcH<U@I+@(ig3oTgE7<=6WNr%Ggo.e9)/<<apm8"9P'
%ah)2'rmq5+'_K*W@#J3@HWgh3#R936J<`"GS0`@\R)bJ^%fa^^/am3>^B=hBo"i<F'(r0VqMY>QW+"<@Fo%F1`LM7bl!L#o;1q^E
%.^G)@@+2l9kmA7*$`62B`VsJDajN_LrDbgflJ\UiR5^=9cMoY:Q9N(Y?Th)R3=l.ZV>dM`OR^(gICA74EW2:BD-0CHs-j`QYC]*d
%s"]/"mPY*9=2D8%!7obaD6O:R,p>jP?3KaZBd+/,C*\<!@Xu:*nn\M42rc,B!A(dS((Zl7es=Pfe9(h[IAKW=9`St,dTc>fJ/)ZK
%WO3">DJo>s&\s\9"E/Sl@#5oHQ#-S))k'r3:&lf!T(ZG+!NZF%aJW>I0_\TXg*V?Xp5k5g!S5F[(2X7XU-Z\'$ukpua,9rK1.%?]
%!Z3XQ(NMJ<E*dqW70)L`"nsVN=Q_;Kr[*/\:IW.h70#+iA2A0'=%<Ac-T:uT0hg?\MuV$OCId1SidViT*>4;1<QQB/q2>9<\?5_V
%^O1!)2iI[c#H)%Z7K4j.Lm$8Wrmb#k@lOB'_5Pn(n\:6_H@nWd>B9_,2ZYJ'WW+p\0Z#H:(Mj-iiLpp7'>W>9nV$sTpKCbN,(T9b
%s0`5A[\4l]&-'gZ[AQ%bCMES!BCW`m'+;*1r3'X9elC#ql?CD1?Mq![FVWN?q-StjSHt/Rbqf<75Q!0%Z5tWRs-6,P5l'Dh2(@7c
%MuQds!qa@Is!h8W?#(5U/")-$\bY.Wi^@CA\?JkLrYJ64r8rKmH6`*%pg4/h[8T-a0*4m0_WH=[K9d;5r3%@e*6Q8#9#$!">P'TC
%Z-J-Ert6""8fBYgCK8=&W6P.qe9p"hr`Ae7H,>@9:%F"#o&B;FWm!^TDYf^skd+OdYA1J,I_FuQjmH%sD:?8"_*C)o_u=-=kc!D*
%0C2+s1iE"'HU:0`0D63g-W.^)ZbI>MC-f>]?^2b<L;]S[<>gC3fO#[AT%+][-<g*=&f:G'W?Q>ofO#$t`Q<&l=/D%2]";kR=6$a?
%h9Q!Hq''62(]1hf;I&iI?bj9sVIPF]p\1P7AajFX*VrjWF/\o]^Tu$cSX]VD2NK23dD&_ZNXrP]?WAW+j6EWJ7$;rc(]18-Gfjc*
%ln?A2[JsLuY8,.mQ+kpY'(88oD>)RB30\[??eJ@'n6Yaj'g!,Cn,0B;hU/ejs/Qcdn2D0`bInhei\ph;FEPb4FT.Wa.;e2+J%<1u
%_9N#F[$+k8k[2m+,HLR5IqACh*A%&Rqk-8mp@l6_H"DJD*r,Kl6<G:^R]EIFccLf13p[Q-l$3hT),:gtc@[f='\^ib&=+&WBW?T]
%1Y'`r/<X!"jKCZOlVfD7eajoV#H^bab(I3cSHf1-F]qfeKNd]A3o!>\GlMB/:W&eu)4Bn\#jmp;g.?sJTe_(),sm-\rlgW5TrYPc
%<[*4>^I4ul($D^U&C&l]c\+h1G?CYu8$NOSj[!.*6JHYnK_0E;j]OSTWm.3"^FKQKrG1r/;C#uaG7oSoM-(om:P+Z`X7AY/#m/&T
%iKFCQ=-^%S+Cke:,@3qQ.QM"08p1gM#GUIe.g\PNUf,oJb(K%>Fne!h&CN2BRp23#%/p3bP6:@SmI\]bnPXK,8qPu5C9b42+B49]
%c@Jed+)Hca#Jr)k"NO-YM^qkJjZm2VROr]'+Ktq?T.:.5\`bNcZZ70R<2032J\]./K_(H2O]O!tSHJE]mBif^1m\-`JWOP219DN%
%'nhS>Ud+onnXU@"?%_"A;]o'2P7=`p+HX!/afZ<`Xn(sd.1jjYXi-b2Tur-g*)6]k-q('sGQrgYWmSXs)%c8olh_*HJ+6a0C-bbb
%+$X2b&0)J=VF<;7,":aJ^2R)Ln;'3B(_78u(+Oq!<,6tMdAg&L:bBZo&.PfE"9r#IqKqH(&>LqXm-oAcN,/I_"%]h_k.821Z(ZBF
%9rI6*nJBDF+4d0Fpj#jLrUu)0e`J%JK"`5g4?9>Q$:uB_@HXOjmhBa=#Wcn9L[bDPIWu&;M"FI&]):<:?/l7=>lPmTg@i?:ic+\*
%+(<c>naX$Z+`mp;IeaSQD%Y58#uM?X5h@[H^$@Nd3En--4V&LD#$GMNooHBL@>IQU<Paa$/62\-7EEj9rBod'rT*(,+(-Qiem:l;
%+a.JWh:l6lTbcR^\Yqc":a_m$/Eqq+&ISTU@N^(W.bQX\2^qaHfSHs3Pf)Kc7F69-jkTf$P[R_-A!g]VR(<7HNBY@V)%-Wt*B&dF
%<4brCM+3Wc:h;(u:nLeZ6*0[gSpjtQ-fVD6nh5g[jk":ZY$k=m+6-i>5;M>T?Ee7:0gHG/`:Tjun?ZjE*7^s]<I\P:WGUkB#9W>\
%:r5aQL&cARPI1m"BLtbG%_r-bd#b?Fb%"&CjiKZOYp#/!X.n%m5#G`W(7!aY&=9[^BSo0EPd4UR@QfBUI@dKYBV744dYT.J#GE.<
%hAZ9^lIBb<M_J__W;+))""9ZT\rBu05KGs2M@`cmpo7F33=t623t0%1!cA,E,`ZWI1,`V?ZrQ&U\nY@EW@52>hEWirqWk$e.oliL
%Md\#J03G]('h[nBe<Uul+P;j?m\-6(V"effX+FnL*;R1';YKb^@J:#\Sf@k:a89-_$q2r_$`P"I4DU8nP0%hBS@q%bFm$KAl:,*d
%%^X$Ip\POWJf0!__np42<:':Zi3Q$?JC_SK;2<Kt7Uo$`qeSIbDs@`0XHU]YFq'--<:r@NSV[_7o<C#t$5f#j:9`.,mI&"T@#IA1
%S`cI?\bBt7MdI"LfH/JPd2DZP0DBVXj_):iMb^ZjUV_(_C`Md]9@ernUlVeRgFjZ(O(fA%Nkfc[*pe8!DYV_BO<aYZhs6G#QlV`2
%[r^=m@Ph!IkI?@LrV<NXhMKZ_f)d8-;=9b9,(`cl486INIFoP+)DQtYIoRR#[LX<C;$6L/#38Wbj#TXHHD7LkFkH33b5OP*SS@T2
%jot:mk$ZfFX@VW3coGhNj<oq$d:rsJ-Okk<R=3NIGsph%TD.19]"THo5Um)U_5iQC1G!f2V*Z4I.2tk#MV6',ni"sY^iO$M\g2>A
%?<:_(GbI;HR-^Vm.UnCY:g%mIQ.E%$JW5'iVNOdh]3(9>n0AkgU$M@laM;L*paV/\0jK<4]j)CA+\>)bAljkhB/4=7rf5?onT#@=
%]j%hP;2XTBiaZ!Eq:WcD[mOTMhQuf)Bo:V`8DFTf:a#+9i@A<R'cc>-Dd\!][h$4('!GqSA$D]&hejuK8=mOcWOC"bN!Nm8.VL@H
%<Jk)>OlT[d2q%.f123oZ>Zg=D94dDrc0l_"iFU!.QWAC5(:KMdq?V!nHG7Dpp;,D]k#H^?!Wr[MY>ODc4S`0Ub$dlnMMtSTpiVQG
%7;L[o'`T+9pTm<qbfMoCcPg*B+nlnOJo_n*)MPcSZ+S\%CK=Ns?DFWkU[bE_\ISMMqFJBem<+E*'9niakhVUO>^VNKi*)l\>AKH]
%M&PhhI7,.,raH1%Q(uV@`X=;:C9Q"o>\iuff@k"^cg.u.&%:&fq*W?57U%cko3S3%aE#JU)MP/<7_@78H)\,>nREtpI]q/m=Cpp,
%7WGitP$cf(]<Qjp7Ycaa8-=D4q^0NSmN)0KClDa7>BQd>4uY&4[A%I![Z0:d>Bor\#E)'/ENa+Ki7>Q&PtSbbNqjDeA`ShiY@O2J
%p:W<ZVgEH7H=H:9#p_N82m7k)F/rAX2>eV@*G,O\V\oaSr]/5BBs.RCI[ZgYmF1FX9V3u#*[A]X2/>QLUEY^u-*fbRNgBA+DELHt
%l5/XRmDAQFFhc]r6I&!4^Xr-.W"@'t8%OkKj>1W4-s8XCHnQ5RQE0Gp=ZhA\>0WpmQ(5qW;R7udX'#\>`Z2*mpd`\3Z9Wg#\WWe6
%oIqn_MP7)Sd\UJ'Ye?rZ?aZfJQ)ke?Q)oUDUI$B01rDi9=d^)g.oYuj&oVPs&uRs7]2p>?/4O%70Dt7%?(Y'gn"f\oM]SsZbFhW\
%RjW4@#!K+#ou+NPH5ml-Nn^3S<mh,q1=]0-eRQt,-.(Zi7s5VEO5cq#6%=u+ckBq-RNFt9d";qSYjH]9"VPa#*^ljs/pj/qcM<99
%m!0.:oeP%Ib%UG%RTJ.J$B^j:QDen@rW9McIpq)P(FE:+@ihGNXa,nWd)'Xt/'tY1L-(lW<`8lOn;7'B41]:Q+6;(<(Zr_"G>^HX
%ZTY;(dU#[Y`h^DBl_:sOQF\YthX9%eB,6LZ&#MnoC[LQ_q#U-$/^IPcKKZb+6WR%;``R08ZFSb0^5t,k)d>f,\Wbe4kAf7BkM;Cc
%[kHFlHJ`;Kp[tVIm1K/BcChq%[9$"-?1o?./fPiFs'Ws&YQA3r>R$?-h0Mn#o/Q!Jh>D+s(&P$Y?TMSZ7mn:&PDS>l)mSP!$h6D=
%]jI/G.s-,E;q%"a1^g7jk!"gU'`pV$1nc\oe=VPW)"Eo#hC(YNqImpK?E&VEVei9AS4!TZS8,P-gK644]X:&JQNjLhMB)JpkGiN^
%(A>HLXj'71ne;,A:N2prH+pnui2IL:\?R]YEZpI-0T9ap:u'm6&pY=H0p[jp[n/%+=*Z'W&MiXT\<1[CEGH+sQlh&tRRbRaJE$3?
%NE_u%LL[ac!Kb,j`O.B,r,AVSlRpoj6@9Z#<S&8?o5L][c&>[?`5&)%GS\;F]nP)dD%bdiWaYia\W]H!FmfF:QhoGAbPrQ%pu7P?
%`9rf+m+[Nqq4Ob.1.!u#Rj2*:i]"HG?^V7jg@#AR:R9/.2^Z?`p?lRo&k(_*\b9$fED+m73EX8eKr@5&H=:'G(XG9h$JpHr4DuB$
%cI-P].3n;oE);[\F<b("5?;P_8XXedb748nP:o-]s.BGFaqLbGkc6\\Y?"]87FQY.I=@b(4O3EK-h5l"KHlP&mmP.^BGY4**';65
%W.VYTCU_OCkL+Y23PEpa5c&>Kg?"%E0_%9K1BhRm]R@#]Y4\Xnq>H"H4kNX!#nOGPdN;mfh1'o=SgDkpnZD7%C`etu:i/$QJrTp/
%rbg?b,gZJ#BF\I3HON>a-m7"R/LN5#S1Eq!U,`LFImh8GX6;\@oL!\u;K#,[<#g$s'h3>n*+3AU/=Jq+HUeR$k-,c;nV-+uoQ#ga
%+cGJZfjF7iCXFk[1Pa<)<))ELEg8Bjih8@BE+k7>Es\TA?ST3?BdW;aH7r!EO8>u,WT7tjLZUS3TfLtZXed&/Gs+")KfRDOmpXoD
%:30s"5LpW#%SY+J2pJ&?%b'6=;n64Ldi=<AXV!J9!?uB%di9LhL!k5C@-k'R#GJb!N,PJULu/eb3(@VZ$;S97<?d,3r-ZgP0r?7'
%,SYgOl4p\pINdGo4kR0Eb#h=!")OI'Jqt<$An`mR@U?O[al(DF3bG?XQmio&?+&h2XjS/-UNAlTR.<:K5JiFTH=:]T$AiU>S!4iL
%USm.6ZR8p3m1D\BJ$;T&5[We9\^'MnXn,`dao+E,Bn9n*pGoF6@:(&^40Jr/=t@rp@R\=E!'dNAPJ=9j?An!RhT0hC+)IM!lULcU
%?4XZnC6e:Gf3,doG+[:ifk3/sjinNE5H>=%c>*"*QMYf*'<egd40Gnn+VNg!X3^Cg=fp31-bfpT;Ff3Gc>&LCX:XJSX"WP&VM4hK
%9jWB[HdA#4O1R;^Ns`3U7l=T*6Rp\b]k?7aWo#D+CT69fO1,,f-7fRLIG</H(?k/V1=:YFbp9KfN@Ya^)/cOW[SH^5"&[M5FgRFS
%PI.Ng%4no7:,Z:Z\Ui`f)]:2DV#+OuMlBN+*tr/L0A9B+Mtp1V^8(8-@_&ZLlO`T=D$/D+G-H+nNGKR&Hq3IWe5r3!NabVfg_d5q
%7%&2%*T0!2hL2GIYano[#MXt._5=CJ_W>9:G*G4<*Gf+t8HV',kU*c`&W[4R06Ia_MM8)(b!+J9]R.3aq^c[`kkDpeIdF6C>?TOF
%MTQJTrTt=u/KFElCdqm2B36%7&Iaaq2rBS@o[qG/Y>F"+j@BM1k3,?&Z:NJ:ot%/+YcVMs_r*kUeU+OX3>S]Y+O<tML.Ddm*YBQq
%*hk28-$%>h0r;.C=fQZi>[Kl"&k&YYKm5ir^Y;ktY*+Z,*Oc3UXI2snD#1GCAEPF"+Q>R"6W/CQ)=Ak+^[cES$i2&<%3`45.*Jn4
%m1t)D;Y$8F8j'J;W`D'X=A8gNW<AB47OV&&jeC)#_/u\eppk/4MMfu#Vq_Oq*U:.V@89:VmBm=n14KkL:fR1b$_ucKZ!KrF2UpI$
%/"c%^m;WBKXfFGP9/K7:"D:lf:\Gu^qdAC[`qTp1&-(hmqPed/nX"b(l-KA,Ik1Q\hu<"mrUQ:>rouHBnm?kBZTn=Orpm7Aomcu'
%0E:leIeB1+J+`Pcq7C!^rl`(T>M;pOlG(Ypq>==/q:4C&_r(FT=.fNls7s9V"IVJWQiGa2rS.AA^OH%Z!/Hs3l2~>
%AI9_PrivateDataEnd
